/* automatically generated by rust-bindgen 0.72.0 */
use crate::orb::orb_metadata;

pub const ORB_MULTI_MAX_INSTANCES: u32 = 10;
pub const GPIO_CONFIG_INPUT: u32 = 0;
pub const GPIO_CONFIG_OUTPUT: u32 = 1;
pub const GPIO_CONFIG_PULLUP: u32 = 16;
pub const GPIO_CONFIG_PULLDOWN: u32 = 32;
pub const GPIO_CONFIG_OPENDRAIN: u32 = 256;
pub const GPIO_CONFIG_INPUT_FLOATING: u32 = 0;
pub const GPIO_CONFIG_INPUT_PULLUP: u32 = 16;
pub const GPIO_CONFIG_INPUT_PULLDOWN: u32 = 32;
pub const GPIO_CONFIG_OUTPUT_PUSHPULL: u32 = 0;
pub const GPIO_CONFIG_OUTPUT_OPENDRAIN: u32 = 256;
pub const GPIO_CONFIG_OUTPUT_OPENDRAIN_PULLUP: u32 = 272;
pub const GIMBAL_MANAGER_INFORMATION_GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT: u32 = 1;
pub const GIMBAL_MANAGER_INFORMATION_GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL: u32 = 2;
pub const GIMBAL_MANAGER_INFORMATION_GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS: u32 = 4;
pub const GIMBAL_MANAGER_INFORMATION_GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW: u32 = 8;
pub const GIMBAL_MANAGER_INFORMATION_GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK: u32 = 16;
pub const GIMBAL_MANAGER_INFORMATION_GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS: u32 = 32;
pub const GIMBAL_MANAGER_INFORMATION_GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW: u32 = 64;
pub const GIMBAL_MANAGER_INFORMATION_GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK: u32 = 128;
pub const GIMBAL_MANAGER_INFORMATION_GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS: u32 = 256;
pub const GIMBAL_MANAGER_INFORMATION_GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW: u32 = 512;
pub const GIMBAL_MANAGER_INFORMATION_GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK: u32 = 1024;
pub const GIMBAL_MANAGER_INFORMATION_GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW: u32 = 2048;
pub const GIMBAL_MANAGER_INFORMATION_GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL: u32 = 65536;
pub const GIMBAL_MANAGER_INFORMATION_GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL: u32 =
    131072;
pub const LOGGER_STATUS_LOGGER_TYPE_FULL: u32 = 0;
pub const LOGGER_STATUS_LOGGER_TYPE_MISSION: u32 = 1;
pub const LOGGER_STATUS_BACKEND_FILE: u32 = 1;
pub const LOGGER_STATUS_BACKEND_MAVLINK: u32 = 2;
pub const LOGGER_STATUS_BACKEND_ALL: u32 = 3;
pub const MODE_COMPLETED_MESSAGE_VERSION: u32 = 0;
pub const MODE_COMPLETED_RESULT_SUCCESS: u32 = 0;
pub const MODE_COMPLETED_RESULT_FAILURE_OTHER: u32 = 100;
pub const AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_IDLE: u32 = 0;
pub const AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_INIT: u32 = 1;
pub const AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_ROLL: u32 = 2;
pub const AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_ROLL_PAUSE: u32 = 3;
pub const AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_PITCH: u32 = 4;
pub const AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_PITCH_PAUSE: u32 = 5;
pub const AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_YAW: u32 = 6;
pub const AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_YAW_PAUSE: u32 = 7;
pub const AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_VERIFICATION: u32 = 8;
pub const AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_APPLY: u32 = 9;
pub const AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_TEST: u32 = 10;
pub const AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_COMPLETE: u32 = 11;
pub const AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_FAIL: u32 = 12;
pub const AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_WAIT_FOR_DISARM: u32 = 13;
pub const EKF2_TIMESTAMPS_RELATIVE_TIMESTAMP_INVALID: u32 = 32767;
pub const CAMERA_TRIGGER_ORB_QUEUE_LENGTH: u32 = 2;
pub const GIMBAL_DEVICE_SET_ATTITUDE_GIMBAL_DEVICE_FLAGS_RETRACT: u32 = 1;
pub const GIMBAL_DEVICE_SET_ATTITUDE_GIMBAL_DEVICE_FLAGS_NEUTRAL: u32 = 2;
pub const GIMBAL_DEVICE_SET_ATTITUDE_GIMBAL_DEVICE_FLAGS_ROLL_LOCK: u32 = 4;
pub const GIMBAL_DEVICE_SET_ATTITUDE_GIMBAL_DEVICE_FLAGS_PITCH_LOCK: u32 = 8;
pub const GIMBAL_DEVICE_SET_ATTITUDE_GIMBAL_DEVICE_FLAGS_YAW_LOCK: u32 = 16;
pub const UNREGISTER_EXT_COMPONENT_MESSAGE_VERSION: u32 = 0;
pub const GOTO_SETPOINT_MESSAGE_VERSION: u32 = 0;
pub const VEHICLE_ANGULAR_VELOCITY_MESSAGE_VERSION: u32 = 0;
pub const POSITION_CONTROLLER_LANDING_STATUS_NOT_ABORTED: u32 = 0;
pub const POSITION_CONTROLLER_LANDING_STATUS_ABORTED_BY_OPERATOR: u32 = 1;
pub const POSITION_CONTROLLER_LANDING_STATUS_TERRAIN_NOT_FOUND: u32 = 2;
pub const POSITION_CONTROLLER_LANDING_STATUS_TERRAIN_TIMEOUT: u32 = 3;
pub const POSITION_CONTROLLER_LANDING_STATUS_UNKNOWN_ABORT_CRITERION: u32 = 4;
pub const DISTANCE_SENSOR_MAV_DISTANCE_SENSOR_LASER: u32 = 0;
pub const DISTANCE_SENSOR_MAV_DISTANCE_SENSOR_ULTRASOUND: u32 = 1;
pub const DISTANCE_SENSOR_MAV_DISTANCE_SENSOR_INFRARED: u32 = 2;
pub const DISTANCE_SENSOR_MAV_DISTANCE_SENSOR_RADAR: u32 = 3;
pub const DISTANCE_SENSOR_ROTATION_YAW_0: u32 = 0;
pub const DISTANCE_SENSOR_ROTATION_YAW_45: u32 = 1;
pub const DISTANCE_SENSOR_ROTATION_YAW_90: u32 = 2;
pub const DISTANCE_SENSOR_ROTATION_YAW_135: u32 = 3;
pub const DISTANCE_SENSOR_ROTATION_YAW_180: u32 = 4;
pub const DISTANCE_SENSOR_ROTATION_YAW_225: u32 = 5;
pub const DISTANCE_SENSOR_ROTATION_YAW_270: u32 = 6;
pub const DISTANCE_SENSOR_ROTATION_YAW_315: u32 = 7;
pub const DISTANCE_SENSOR_ROTATION_FORWARD_FACING: u32 = 0;
pub const DISTANCE_SENSOR_ROTATION_RIGHT_FACING: u32 = 2;
pub const DISTANCE_SENSOR_ROTATION_BACKWARD_FACING: u32 = 4;
pub const DISTANCE_SENSOR_ROTATION_LEFT_FACING: u32 = 6;
pub const DISTANCE_SENSOR_ROTATION_UPWARD_FACING: u32 = 24;
pub const DISTANCE_SENSOR_ROTATION_DOWNWARD_FACING: u32 = 25;
pub const DISTANCE_SENSOR_ROTATION_CUSTOM: u32 = 100;
pub const DISTANCE_SENSOR_MODE_UNKNOWN: u32 = 0;
pub const DISTANCE_SENSOR_MODE_ENABLED: u32 = 1;
pub const DISTANCE_SENSOR_MODE_DISABLED: u32 = 2;
pub const ACTUATOR_SERVOS_MESSAGE_VERSION: u32 = 0;
pub const ACTUATOR_SERVOS_NUM_CONTROLS: u32 = 8;
pub const VEHICLE_ATTITUDE_MESSAGE_VERSION: u32 = 0;
pub const HEATER_STATUS_MODE_GPIO: u32 = 1;
pub const HEATER_STATUS_MODE_PX4IO: u32 = 2;
pub const GPS_DUMP_ORB_QUEUE_LENGTH: u32 = 8;
pub const SENSOR_BARO_ORB_QUEUE_LENGTH: u32 = 4;
pub const ESC_REPORT_FAILURE_OVER_CURRENT: u32 = 0;
pub const ESC_REPORT_FAILURE_OVER_VOLTAGE: u32 = 1;
pub const ESC_REPORT_FAILURE_MOTOR_OVER_TEMPERATURE: u32 = 2;
pub const ESC_REPORT_FAILURE_OVER_RPM: u32 = 3;
pub const ESC_REPORT_FAILURE_INCONSISTENT_CMD: u32 = 4;
pub const ESC_REPORT_FAILURE_MOTOR_STUCK: u32 = 5;
pub const ESC_REPORT_FAILURE_GENERIC: u32 = 6;
pub const ESC_REPORT_FAILURE_MOTOR_WARN_TEMPERATURE: u32 = 7;
pub const ESC_REPORT_FAILURE_WARN_ESC_TEMPERATURE: u32 = 8;
pub const ESC_REPORT_FAILURE_OVER_ESC_TEMPERATURE: u32 = 9;
pub const ESC_REPORT_ESC_FAILURE_COUNT: u32 = 10;
pub const ESC_STATUS_CONNECTED_ESC_MAX: u32 = 8;
pub const ESC_STATUS_ESC_CONNECTION_TYPE_PPM: u32 = 0;
pub const ESC_STATUS_ESC_CONNECTION_TYPE_SERIAL: u32 = 1;
pub const ESC_STATUS_ESC_CONNECTION_TYPE_ONESHOT: u32 = 2;
pub const ESC_STATUS_ESC_CONNECTION_TYPE_I2C: u32 = 3;
pub const ESC_STATUS_ESC_CONNECTION_TYPE_CAN: u32 = 4;
pub const ESC_STATUS_ESC_CONNECTION_TYPE_DSHOT: u32 = 5;
pub const REGISTER_EXT_COMPONENT_REPLY_MESSAGE_VERSION: u32 = 0;
pub const REGISTER_EXT_COMPONENT_REPLY_ORB_QUEUE_LENGTH: u32 = 2;
pub const INPUT_RC_RC_INPUT_SOURCE_UNKNOWN: u32 = 0;
pub const INPUT_RC_RC_INPUT_SOURCE_PX4FMU_PPM: u32 = 1;
pub const INPUT_RC_RC_INPUT_SOURCE_PX4IO_PPM: u32 = 2;
pub const INPUT_RC_RC_INPUT_SOURCE_PX4IO_SPEKTRUM: u32 = 3;
pub const INPUT_RC_RC_INPUT_SOURCE_PX4IO_SBUS: u32 = 4;
pub const INPUT_RC_RC_INPUT_SOURCE_PX4IO_ST24: u32 = 5;
pub const INPUT_RC_RC_INPUT_SOURCE_MAVLINK: u32 = 6;
pub const INPUT_RC_RC_INPUT_SOURCE_QURT: u32 = 7;
pub const INPUT_RC_RC_INPUT_SOURCE_PX4FMU_SPEKTRUM: u32 = 8;
pub const INPUT_RC_RC_INPUT_SOURCE_PX4FMU_SBUS: u32 = 9;
pub const INPUT_RC_RC_INPUT_SOURCE_PX4FMU_ST24: u32 = 10;
pub const INPUT_RC_RC_INPUT_SOURCE_PX4FMU_SUMD: u32 = 11;
pub const INPUT_RC_RC_INPUT_SOURCE_PX4FMU_DSM: u32 = 12;
pub const INPUT_RC_RC_INPUT_SOURCE_PX4IO_SUMD: u32 = 13;
pub const INPUT_RC_RC_INPUT_SOURCE_PX4FMU_CRSF: u32 = 14;
pub const INPUT_RC_RC_INPUT_SOURCE_PX4FMU_GHST: u32 = 15;
pub const INPUT_RC_RC_INPUT_MAX_CHANNELS: u32 = 18;
pub const INPUT_RC_RSSI_MAX: u32 = 100;
pub const RC_CHANNELS_FUNCTION_THROTTLE: u32 = 0;
pub const RC_CHANNELS_FUNCTION_ROLL: u32 = 1;
pub const RC_CHANNELS_FUNCTION_PITCH: u32 = 2;
pub const RC_CHANNELS_FUNCTION_YAW: u32 = 3;
pub const RC_CHANNELS_FUNCTION_RETURN: u32 = 4;
pub const RC_CHANNELS_FUNCTION_LOITER: u32 = 5;
pub const RC_CHANNELS_FUNCTION_OFFBOARD: u32 = 6;
pub const RC_CHANNELS_FUNCTION_FLAPS: u32 = 7;
pub const RC_CHANNELS_FUNCTION_AUX_1: u32 = 8;
pub const RC_CHANNELS_FUNCTION_AUX_2: u32 = 9;
pub const RC_CHANNELS_FUNCTION_AUX_3: u32 = 10;
pub const RC_CHANNELS_FUNCTION_AUX_4: u32 = 11;
pub const RC_CHANNELS_FUNCTION_AUX_5: u32 = 12;
pub const RC_CHANNELS_FUNCTION_AUX_6: u32 = 13;
pub const RC_CHANNELS_FUNCTION_PARAM_1: u32 = 14;
pub const RC_CHANNELS_FUNCTION_PARAM_2: u32 = 15;
pub const RC_CHANNELS_FUNCTION_PARAM_3_5: u32 = 16;
pub const RC_CHANNELS_FUNCTION_KILLSWITCH: u32 = 17;
pub const RC_CHANNELS_FUNCTION_TRANSITION: u32 = 18;
pub const RC_CHANNELS_FUNCTION_GEAR: u32 = 19;
pub const RC_CHANNELS_FUNCTION_ARMSWITCH: u32 = 20;
pub const RC_CHANNELS_FUNCTION_FLTBTN_SLOT_1: u32 = 21;
pub const RC_CHANNELS_FUNCTION_FLTBTN_SLOT_2: u32 = 22;
pub const RC_CHANNELS_FUNCTION_FLTBTN_SLOT_3: u32 = 23;
pub const RC_CHANNELS_FUNCTION_FLTBTN_SLOT_4: u32 = 24;
pub const RC_CHANNELS_FUNCTION_FLTBTN_SLOT_5: u32 = 25;
pub const RC_CHANNELS_FUNCTION_FLTBTN_SLOT_6: u32 = 26;
pub const RC_CHANNELS_FUNCTION_ENGAGE_MAIN_MOTOR: u32 = 27;
pub const RC_CHANNELS_FUNCTION_PAYLOAD_POWER: u32 = 28;
pub const RC_CHANNELS_FUNCTION_FLTBTN_SLOT_COUNT: u32 = 6;
pub const SATELLITE_INFO_SAT_INFO_MAX_SATELLITES: u32 = 20;
pub const TRANSPONDER_REPORT_PX4_ADSB_FLAGS_VALID_COORDS: u32 = 1;
pub const TRANSPONDER_REPORT_PX4_ADSB_FLAGS_VALID_ALTITUDE: u32 = 2;
pub const TRANSPONDER_REPORT_PX4_ADSB_FLAGS_VALID_HEADING: u32 = 4;
pub const TRANSPONDER_REPORT_PX4_ADSB_FLAGS_VALID_VELOCITY: u32 = 8;
pub const TRANSPONDER_REPORT_PX4_ADSB_FLAGS_VALID_CALLSIGN: u32 = 16;
pub const TRANSPONDER_REPORT_PX4_ADSB_FLAGS_VALID_SQUAWK: u32 = 32;
pub const TRANSPONDER_REPORT_PX4_ADSB_FLAGS_RETRANSLATE: u32 = 256;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_NO_INFO: u32 = 0;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_LIGHT: u32 = 1;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_SMALL: u32 = 2;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_LARGE: u32 = 3;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE: u32 = 4;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_HEAVY: u32 = 5;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_HIGHLY_MANUV: u32 = 6;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_ROTOCRAFT: u32 = 7;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_UNASSIGNED: u32 = 8;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_GLIDER: u32 = 9;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_LIGHTER_AIR: u32 = 10;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_PARACHUTE: u32 = 11;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_ULTRA_LIGHT: u32 = 12;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_UNASSIGNED2: u32 = 13;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_UAV: u32 = 14;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_SPACE: u32 = 15;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_UNASSGINED3: u32 = 16;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_EMERGENCY_SURFACE: u32 = 17;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_SERVICE_SURFACE: u32 = 18;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_POINT_OBSTACLE: u32 = 19;
pub const TRANSPONDER_REPORT_ADSB_EMITTER_TYPE_ENUM_END: u32 = 20;
pub const TRANSPONDER_REPORT_ORB_QUEUE_LENGTH: u32 = 16;
pub const DATAMAN_RESPONSE_STATUS_SUCCESS: u32 = 0;
pub const DATAMAN_RESPONSE_STATUS_FAILURE_ID_ERR: u32 = 1;
pub const DATAMAN_RESPONSE_STATUS_FAILURE_NO_DATA: u32 = 2;
pub const DATAMAN_RESPONSE_STATUS_FAILURE_READ_FAILED: u32 = 3;
pub const DATAMAN_RESPONSE_STATUS_FAILURE_WRITE_FAILED: u32 = 4;
pub const DATAMAN_RESPONSE_STATUS_FAILURE_CLEAR_FAILED: u32 = 5;
pub const SENSOR_OPTICAL_FLOW_MODE_UNKNOWN: u32 = 0;
pub const SENSOR_OPTICAL_FLOW_MODE_BRIGHT: u32 = 1;
pub const SENSOR_OPTICAL_FLOW_MODE_LOWLIGHT: u32 = 2;
pub const SENSOR_OPTICAL_FLOW_MODE_SUPER_LOWLIGHT: u32 = 3;
pub const ACTUATOR_OUTPUTS_NUM_ACTUATOR_OUTPUTS: u32 = 16;
pub const ACTUATOR_OUTPUTS_NUM_ACTUATOR_OUTPUT_GROUPS: u32 = 4;
pub const SENSOR_GYRO_ORB_QUEUE_LENGTH: u32 = 8;
pub const ACTION_REQUEST_ACTION_DISARM: u32 = 0;
pub const ACTION_REQUEST_ACTION_ARM: u32 = 1;
pub const ACTION_REQUEST_ACTION_TOGGLE_ARMING: u32 = 2;
pub const ACTION_REQUEST_ACTION_UNKILL: u32 = 3;
pub const ACTION_REQUEST_ACTION_KILL: u32 = 4;
pub const ACTION_REQUEST_ACTION_SWITCH_MODE: u32 = 5;
pub const ACTION_REQUEST_ACTION_VTOL_TRANSITION_TO_MULTICOPTER: u32 = 6;
pub const ACTION_REQUEST_ACTION_VTOL_TRANSITION_TO_FIXEDWING: u32 = 7;
pub const ACTION_REQUEST_SOURCE_STICK_GESTURE: u32 = 0;
pub const ACTION_REQUEST_SOURCE_RC_SWITCH: u32 = 1;
pub const ACTION_REQUEST_SOURCE_RC_BUTTON: u32 = 2;
pub const ACTION_REQUEST_SOURCE_RC_MODE_SLOT: u32 = 3;
pub const VEHICLE_LAND_DETECTED_MESSAGE_VERSION: u32 = 0;
pub const VEHICLE_GLOBAL_POSITION_MESSAGE_VERSION: u32 = 0;
pub const VEHICLE_ODOMETRY_MESSAGE_VERSION: u32 = 0;
pub const VEHICLE_ODOMETRY_POSE_FRAME_UNKNOWN: u32 = 0;
pub const VEHICLE_ODOMETRY_POSE_FRAME_NED: u32 = 1;
pub const VEHICLE_ODOMETRY_POSE_FRAME_FRD: u32 = 2;
pub const VEHICLE_ODOMETRY_VELOCITY_FRAME_UNKNOWN: u32 = 0;
pub const VEHICLE_ODOMETRY_VELOCITY_FRAME_NED: u32 = 1;
pub const VEHICLE_ODOMETRY_VELOCITY_FRAME_FRD: u32 = 2;
pub const VEHICLE_ODOMETRY_VELOCITY_FRAME_BODY_FRD: u32 = 3;
pub const PARAMETER_RESET_REQUEST_ORB_QUEUE_LENGTH: u32 = 4;
pub const TUNE_CONTROL_TUNE_ID_STOP: u32 = 0;
pub const TUNE_CONTROL_TUNE_ID_STARTUP: u32 = 1;
pub const TUNE_CONTROL_TUNE_ID_ERROR: u32 = 2;
pub const TUNE_CONTROL_TUNE_ID_NOTIFY_POSITIVE: u32 = 3;
pub const TUNE_CONTROL_TUNE_ID_NOTIFY_NEUTRAL: u32 = 4;
pub const TUNE_CONTROL_TUNE_ID_NOTIFY_NEGATIVE: u32 = 5;
pub const TUNE_CONTROL_TUNE_ID_ARMING_WARNING: u32 = 6;
pub const TUNE_CONTROL_TUNE_ID_BATTERY_WARNING_SLOW: u32 = 7;
pub const TUNE_CONTROL_TUNE_ID_BATTERY_WARNING_FAST: u32 = 8;
pub const TUNE_CONTROL_TUNE_ID_GPS_WARNING: u32 = 9;
pub const TUNE_CONTROL_TUNE_ID_ARMING_FAILURE: u32 = 10;
pub const TUNE_CONTROL_TUNE_ID_PARACHUTE_RELEASE: u32 = 11;
pub const TUNE_CONTROL_TUNE_ID_SINGLE_BEEP: u32 = 12;
pub const TUNE_CONTROL_TUNE_ID_HOME_SET: u32 = 13;
pub const TUNE_CONTROL_TUNE_ID_SD_INIT: u32 = 14;
pub const TUNE_CONTROL_TUNE_ID_SD_ERROR: u32 = 15;
pub const TUNE_CONTROL_TUNE_ID_PROG_PX4IO: u32 = 16;
pub const TUNE_CONTROL_TUNE_ID_PROG_PX4IO_OK: u32 = 17;
pub const TUNE_CONTROL_TUNE_ID_PROG_PX4IO_ERR: u32 = 18;
pub const TUNE_CONTROL_TUNE_ID_POWER_OFF: u32 = 19;
pub const TUNE_CONTROL_NUMBER_OF_TUNES: u32 = 20;
pub const TUNE_CONTROL_VOLUME_LEVEL_MIN: u32 = 0;
pub const TUNE_CONTROL_VOLUME_LEVEL_DEFAULT: u32 = 20;
pub const TUNE_CONTROL_VOLUME_LEVEL_MAX: u32 = 100;
pub const TUNE_CONTROL_ORB_QUEUE_LENGTH: u32 = 4;
pub const EVENT_ORB_QUEUE_LENGTH: u32 = 16;
pub const ARMING_CHECK_REPLY_MESSAGE_VERSION: u32 = 0;
pub const ARMING_CHECK_REPLY_HEALTH_COMPONENT_INDEX_NONE: u32 = 0;
pub const ARMING_CHECK_REPLY_ORB_QUEUE_LENGTH: u32 = 4;
pub const ARMING_CHECK_REQUEST_MESSAGE_VERSION: u32 = 0;
pub const ESTIMATOR_STATUS_GPS_CHECK_FAIL_GPS_FIX: u32 = 0;
pub const ESTIMATOR_STATUS_GPS_CHECK_FAIL_MIN_SAT_COUNT: u32 = 1;
pub const ESTIMATOR_STATUS_GPS_CHECK_FAIL_MAX_PDOP: u32 = 2;
pub const ESTIMATOR_STATUS_GPS_CHECK_FAIL_MAX_HORZ_ERR: u32 = 3;
pub const ESTIMATOR_STATUS_GPS_CHECK_FAIL_MAX_VERT_ERR: u32 = 4;
pub const ESTIMATOR_STATUS_GPS_CHECK_FAIL_MAX_SPD_ERR: u32 = 5;
pub const ESTIMATOR_STATUS_GPS_CHECK_FAIL_MAX_HORZ_DRIFT: u32 = 6;
pub const ESTIMATOR_STATUS_GPS_CHECK_FAIL_MAX_VERT_DRIFT: u32 = 7;
pub const ESTIMATOR_STATUS_GPS_CHECK_FAIL_MAX_HORZ_SPD_ERR: u32 = 8;
pub const ESTIMATOR_STATUS_GPS_CHECK_FAIL_MAX_VERT_SPD_ERR: u32 = 9;
pub const ESTIMATOR_STATUS_GPS_CHECK_FAIL_SPOOFED: u32 = 10;
pub const ESTIMATOR_STATUS_CS_TILT_ALIGN: u32 = 0;
pub const ESTIMATOR_STATUS_CS_YAW_ALIGN: u32 = 1;
pub const ESTIMATOR_STATUS_CS_GNSS_POS: u32 = 2;
pub const ESTIMATOR_STATUS_CS_OPT_FLOW: u32 = 3;
pub const ESTIMATOR_STATUS_CS_MAG_HDG: u32 = 4;
pub const ESTIMATOR_STATUS_CS_MAG_3D: u32 = 5;
pub const ESTIMATOR_STATUS_CS_MAG_DEC: u32 = 6;
pub const ESTIMATOR_STATUS_CS_IN_AIR: u32 = 7;
pub const ESTIMATOR_STATUS_CS_WIND: u32 = 8;
pub const ESTIMATOR_STATUS_CS_BARO_HGT: u32 = 9;
pub const ESTIMATOR_STATUS_CS_RNG_HGT: u32 = 10;
pub const ESTIMATOR_STATUS_CS_GPS_HGT: u32 = 11;
pub const ESTIMATOR_STATUS_CS_EV_POS: u32 = 12;
pub const ESTIMATOR_STATUS_CS_EV_YAW: u32 = 13;
pub const ESTIMATOR_STATUS_CS_EV_HGT: u32 = 14;
pub const ESTIMATOR_STATUS_CS_BETA: u32 = 15;
pub const ESTIMATOR_STATUS_CS_MAG_FIELD: u32 = 16;
pub const ESTIMATOR_STATUS_CS_FIXED_WING: u32 = 17;
pub const ESTIMATOR_STATUS_CS_MAG_FAULT: u32 = 18;
pub const ESTIMATOR_STATUS_CS_ASPD: u32 = 19;
pub const ESTIMATOR_STATUS_CS_GND_EFFECT: u32 = 20;
pub const ESTIMATOR_STATUS_CS_RNG_STUCK: u32 = 21;
pub const ESTIMATOR_STATUS_CS_GPS_YAW: u32 = 22;
pub const ESTIMATOR_STATUS_CS_MAG_ALIGNED: u32 = 23;
pub const ESTIMATOR_STATUS_CS_EV_VEL: u32 = 24;
pub const ESTIMATOR_STATUS_CS_SYNTHETIC_MAG_Z: u32 = 25;
pub const ESTIMATOR_STATUS_CS_VEHICLE_AT_REST: u32 = 26;
pub const ESTIMATOR_STATUS_CS_GPS_YAW_FAULT: u32 = 27;
pub const ESTIMATOR_STATUS_CS_RNG_FAULT: u32 = 28;
pub const ESTIMATOR_STATUS_CS_GNSS_VEL: u32 = 44;
pub const SENSOR_GPS_FIX_TYPE_NONE: u32 = 1;
pub const SENSOR_GPS_FIX_TYPE_2D: u32 = 2;
pub const SENSOR_GPS_FIX_TYPE_3D: u32 = 3;
pub const SENSOR_GPS_FIX_TYPE_RTCM_CODE_DIFFERENTIAL: u32 = 4;
pub const SENSOR_GPS_FIX_TYPE_RTK_FLOAT: u32 = 5;
pub const SENSOR_GPS_FIX_TYPE_RTK_FIXED: u32 = 6;
pub const SENSOR_GPS_FIX_TYPE_EXTRAPOLATED: u32 = 8;
pub const SENSOR_GPS_JAMMING_STATE_UNKNOWN: u32 = 0;
pub const SENSOR_GPS_JAMMING_STATE_OK: u32 = 1;
pub const SENSOR_GPS_JAMMING_STATE_WARNING: u32 = 2;
pub const SENSOR_GPS_JAMMING_STATE_CRITICAL: u32 = 3;
pub const SENSOR_GPS_SPOOFING_STATE_UNKNOWN: u32 = 0;
pub const SENSOR_GPS_SPOOFING_STATE_NONE: u32 = 1;
pub const SENSOR_GPS_SPOOFING_STATE_INDICATED: u32 = 2;
pub const SENSOR_GPS_SPOOFING_STATE_MULTIPLE: u32 = 3;
pub const SENSOR_GPS_RTCM_MSG_USED_UNKNOWN: u32 = 0;
pub const SENSOR_GPS_RTCM_MSG_USED_NOT_USED: u32 = 1;
pub const SENSOR_GPS_RTCM_MSG_USED_USED: u32 = 2;
pub const MAG_WORKER_DATA_MAX_MAGS: u32 = 4;
pub const FUEL_TANK_STATUS_MAV_FUEL_TYPE_UNKNOWN: u32 = 0;
pub const FUEL_TANK_STATUS_MAV_FUEL_TYPE_LIQUID: u32 = 1;
pub const FUEL_TANK_STATUS_MAV_FUEL_TYPE_GAS: u32 = 2;
pub const GIMBAL_CONTROLS_INDEX_ROLL: u32 = 0;
pub const GIMBAL_CONTROLS_INDEX_PITCH: u32 = 1;
pub const GIMBAL_CONTROLS_INDEX_YAW: u32 = 2;
pub const DEBUG_ARRAY_ARRAY_SIZE: u32 = 58;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_STATE_STOPPED: u32 = 0;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_STATE_STARTING: u32 = 1;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_STATE_RUNNING: u32 = 2;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_STATE_FAULT: u32 = 3;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_GENERAL_ERROR: u32 = 1;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_CRANKSHAFT_SENSOR_ERROR_SUPPORTED: u32 = 2;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_CRANKSHAFT_SENSOR_ERROR: u32 = 4;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_TEMPERATURE_SUPPORTED: u32 = 8;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_TEMPERATURE_BELOW_NOMINAL: u32 = 16;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_TEMPERATURE_ABOVE_NOMINAL: u32 = 32;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_TEMPERATURE_OVERHEATING: u32 = 64;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_TEMPERATURE_EGT_ABOVE_NOMINAL: u32 = 128;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_FUEL_PRESSURE_SUPPORTED: u32 = 256;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_FUEL_PRESSURE_BELOW_NOMINAL: u32 = 512;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_FUEL_PRESSURE_ABOVE_NOMINAL: u32 = 1024;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_DETONATION_SUPPORTED: u32 = 2048;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_DETONATION_OBSERVED: u32 = 4096;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_MISFIRE_SUPPORTED: u32 = 8192;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_MISFIRE_OBSERVED: u32 = 16384;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_OIL_PRESSURE_SUPPORTED: u32 = 32768;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_OIL_PRESSURE_BELOW_NOMINAL: u32 = 65536;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_OIL_PRESSURE_ABOVE_NOMINAL: u32 = 131072;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_DEBRIS_SUPPORTED: u32 = 262144;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_FLAG_DEBRIS_DETECTED: u32 = 524288;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_SPARK_PLUG_SINGLE: u32 = 0;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_SPARK_PLUG_FIRST_ACTIVE: u32 = 1;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_SPARK_PLUG_SECOND_ACTIVE: u32 = 2;
pub const INTERNAL_COMBUSTION_ENGINE_STATUS_SPARK_PLUG_BOTH_ACTIVE: u32 = 3;
pub const VEHICLE_RATES_SETPOINT_MESSAGE_VERSION: u32 = 0;
pub const SENSOR_MAG_ORB_QUEUE_LENGTH: u32 = 4;
pub const ULOG_STREAM_FLAGS_NEED_ACK: u32 = 1;
pub const ULOG_STREAM_ORB_QUEUE_LENGTH: u32 = 16;
pub const ORB_TEST_MEDIUM_ORB_QUEUE_LENGTH: u32 = 16;
pub const CONFIG_OVERRIDES_MESSAGE_VERSION: u32 = 0;
pub const CONFIG_OVERRIDES_SOURCE_TYPE_MODE: u32 = 0;
pub const CONFIG_OVERRIDES_SOURCE_TYPE_MODE_EXECUTOR: u32 = 1;
pub const CONFIG_OVERRIDES_ORB_QUEUE_LENGTH: u32 = 4;
pub const BATTERY_STATUS_MESSAGE_VERSION: u32 = 0;
pub const BATTERY_STATUS_SOURCE_POWER_MODULE: u32 = 0;
pub const BATTERY_STATUS_SOURCE_EXTERNAL: u32 = 1;
pub const BATTERY_STATUS_SOURCE_ESCS: u32 = 2;
pub const BATTERY_STATUS_WARNING_NONE: u32 = 0;
pub const BATTERY_STATUS_WARNING_LOW: u32 = 1;
pub const BATTERY_STATUS_WARNING_CRITICAL: u32 = 2;
pub const BATTERY_STATUS_WARNING_EMERGENCY: u32 = 3;
pub const BATTERY_STATUS_WARNING_FAILED: u32 = 4;
pub const BATTERY_STATUS_STATE_UNHEALTHY: u32 = 6;
pub const BATTERY_STATUS_STATE_CHARGING: u32 = 7;
pub const BATTERY_STATUS_FAULT_DEEP_DISCHARGE: u32 = 0;
pub const BATTERY_STATUS_FAULT_SPIKES: u32 = 1;
pub const BATTERY_STATUS_FAULT_CELL_FAIL: u32 = 2;
pub const BATTERY_STATUS_FAULT_OVER_CURRENT: u32 = 3;
pub const BATTERY_STATUS_FAULT_OVER_TEMPERATURE: u32 = 4;
pub const BATTERY_STATUS_FAULT_UNDER_TEMPERATURE: u32 = 5;
pub const BATTERY_STATUS_FAULT_INCOMPATIBLE_VOLTAGE: u32 = 6;
pub const BATTERY_STATUS_FAULT_INCOMPATIBLE_FIRMWARE: u32 = 7;
pub const BATTERY_STATUS_FAULT_INCOMPATIBLE_MODEL: u32 = 8;
pub const BATTERY_STATUS_FAULT_HARDWARE_FAILURE: u32 = 9;
pub const BATTERY_STATUS_FAULT_FAILED_TO_ARM: u32 = 10;
pub const BATTERY_STATUS_FAULT_COUNT: u32 = 11;
pub const BATTERY_STATUS_MAX_INSTANCES: u32 = 4;
pub const ORBIT_STATUS_ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TO_CIRCLE_CENTER: u32 = 0;
pub const ORBIT_STATUS_ORBIT_YAW_BEHAVIOUR_HOLD_INITIAL_HEADING: u32 = 1;
pub const ORBIT_STATUS_ORBIT_YAW_BEHAVIOUR_UNCONTROLLED: u32 = 2;
pub const ORBIT_STATUS_ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TANGENT_TO_CIRCLE: u32 = 3;
pub const ORBIT_STATUS_ORBIT_YAW_BEHAVIOUR_RC_CONTROLLED: u32 = 4;
pub const ORBIT_STATUS_ORBIT_YAW_BEHAVIOUR_UNCHANGED: u32 = 5;
pub const VEHICLE_LOCAL_POSITION_MESSAGE_VERSION: u32 = 0;
pub const VEHICLE_LOCAL_POSITION_DIST_BOTTOM_SENSOR_NONE: u32 = 0;
pub const VEHICLE_LOCAL_POSITION_DIST_BOTTOM_SENSOR_RANGE: u32 = 1;
pub const VEHICLE_LOCAL_POSITION_DIST_BOTTOM_SENSOR_FLOW: u32 = 2;
pub const AIRSPEED_VALIDATED_MESSAGE_VERSION: u32 = 0;
pub const ACTUATOR_SERVOS_TRIM_NUM_CONTROLS: u32 = 8;
pub const LOG_MESSAGE_ORB_QUEUE_LENGTH: u32 = 4;
pub const VEHICLE_COMMAND_ACK_MESSAGE_VERSION: u32 = 0;
pub const VEHICLE_COMMAND_ACK_VEHICLE_CMD_RESULT_ACCEPTED: u32 = 0;
pub const VEHICLE_COMMAND_ACK_VEHICLE_CMD_RESULT_TEMPORARILY_REJECTED: u32 = 1;
pub const VEHICLE_COMMAND_ACK_VEHICLE_CMD_RESULT_DENIED: u32 = 2;
pub const VEHICLE_COMMAND_ACK_VEHICLE_CMD_RESULT_UNSUPPORTED: u32 = 3;
pub const VEHICLE_COMMAND_ACK_VEHICLE_CMD_RESULT_FAILED: u32 = 4;
pub const VEHICLE_COMMAND_ACK_VEHICLE_CMD_RESULT_IN_PROGRESS: u32 = 5;
pub const VEHICLE_COMMAND_ACK_VEHICLE_CMD_RESULT_CANCELLED: u32 = 6;
pub const VEHICLE_COMMAND_ACK_ARM_AUTH_DENIED_REASON_GENERIC: u32 = 0;
pub const VEHICLE_COMMAND_ACK_ARM_AUTH_DENIED_REASON_NONE: u32 = 1;
pub const VEHICLE_COMMAND_ACK_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT: u32 = 2;
pub const VEHICLE_COMMAND_ACK_ARM_AUTH_DENIED_REASON_TIMEOUT: u32 = 3;
pub const VEHICLE_COMMAND_ACK_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE: u32 = 4;
pub const VEHICLE_COMMAND_ACK_ARM_AUTH_DENIED_REASON_BAD_WEATHER: u32 = 5;
pub const VEHICLE_COMMAND_ACK_ORB_QUEUE_LENGTH: u32 = 4;
pub const TIMESYNC_STATUS_SOURCE_PROTOCOL_UNKNOWN: u32 = 0;
pub const TIMESYNC_STATUS_SOURCE_PROTOCOL_MAVLINK: u32 = 1;
pub const TIMESYNC_STATUS_SOURCE_PROTOCOL_DDS: u32 = 2;
pub const OBSTACLE_DISTANCE_MAV_FRAME_GLOBAL: u32 = 0;
pub const OBSTACLE_DISTANCE_MAV_FRAME_LOCAL_NED: u32 = 1;
pub const OBSTACLE_DISTANCE_MAV_FRAME_BODY_FRD: u32 = 12;
pub const OBSTACLE_DISTANCE_MAV_DISTANCE_SENSOR_LASER: u32 = 0;
pub const OBSTACLE_DISTANCE_MAV_DISTANCE_SENSOR_ULTRASOUND: u32 = 1;
pub const OBSTACLE_DISTANCE_MAV_DISTANCE_SENSOR_INFRARED: u32 = 2;
pub const OBSTACLE_DISTANCE_MAV_DISTANCE_SENSOR_RADAR: u32 = 3;
pub const MAVLINK_LOG_ORB_QUEUE_LENGTH: u32 = 8;
pub const SENSOR_COMBINED_RELATIVE_TIMESTAMP_INVALID: u32 = 2147483647;
pub const SENSOR_COMBINED_CLIPPING_X: u32 = 1;
pub const SENSOR_COMBINED_CLIPPING_Y: u32 = 2;
pub const SENSOR_COMBINED_CLIPPING_Z: u32 = 4;
pub const LED_CONTROL_COLOR_OFF: u32 = 0;
pub const LED_CONTROL_COLOR_RED: u32 = 1;
pub const LED_CONTROL_COLOR_GREEN: u32 = 2;
pub const LED_CONTROL_COLOR_BLUE: u32 = 3;
pub const LED_CONTROL_COLOR_YELLOW: u32 = 4;
pub const LED_CONTROL_COLOR_PURPLE: u32 = 5;
pub const LED_CONTROL_COLOR_AMBER: u32 = 6;
pub const LED_CONTROL_COLOR_CYAN: u32 = 7;
pub const LED_CONTROL_COLOR_WHITE: u32 = 8;
pub const LED_CONTROL_MODE_OFF: u32 = 0;
pub const LED_CONTROL_MODE_ON: u32 = 1;
pub const LED_CONTROL_MODE_DISABLED: u32 = 2;
pub const LED_CONTROL_MODE_BLINK_SLOW: u32 = 3;
pub const LED_CONTROL_MODE_BLINK_NORMAL: u32 = 4;
pub const LED_CONTROL_MODE_BLINK_FAST: u32 = 5;
pub const LED_CONTROL_MODE_BREATHE: u32 = 6;
pub const LED_CONTROL_MODE_FLASH: u32 = 7;
pub const LED_CONTROL_MAX_PRIORITY: u32 = 2;
pub const LED_CONTROL_ORB_QUEUE_LENGTH: u32 = 8;
pub const HOME_POSITION_MESSAGE_VERSION: u32 = 0;
pub const RTL_STATUS_RTL_STATUS_TYPE_NONE: u32 = 0;
pub const RTL_STATUS_RTL_STATUS_TYPE_DIRECT_SAFE_POINT: u32 = 1;
pub const RTL_STATUS_RTL_STATUS_TYPE_DIRECT_MISSION_LAND: u32 = 2;
pub const RTL_STATUS_RTL_STATUS_TYPE_FOLLOW_MISSION: u32 = 3;
pub const RTL_STATUS_RTL_STATUS_TYPE_FOLLOW_MISSION_REVERSE: u32 = 4;
pub const VEHICLE_ROI_ROI_NONE: u32 = 0;
pub const VEHICLE_ROI_ROI_WPNEXT: u32 = 1;
pub const VEHICLE_ROI_ROI_WPINDEX: u32 = 2;
pub const VEHICLE_ROI_ROI_LOCATION: u32 = 3;
pub const VEHICLE_ROI_ROI_TARGET: u32 = 4;
pub const VEHICLE_ROI_ROI_ENUM_END: u32 = 5;
pub const NAVIGATOR_STATUS_FAILURE_NONE: u32 = 0;
pub const NAVIGATOR_STATUS_FAILURE_HAGL: u32 = 1;
pub const TRAJECTORY_SETPOINT_MESSAGE_VERSION: u32 = 0;
pub const UAVCAN_PARAMETER_REQUEST_MESSAGE_TYPE_PARAM_REQUEST_READ: u32 = 20;
pub const UAVCAN_PARAMETER_REQUEST_MESSAGE_TYPE_PARAM_REQUEST_LIST: u32 = 21;
pub const UAVCAN_PARAMETER_REQUEST_MESSAGE_TYPE_PARAM_SET: u32 = 23;
pub const UAVCAN_PARAMETER_REQUEST_NODE_ID_ALL: u32 = 0;
pub const UAVCAN_PARAMETER_REQUEST_PARAM_TYPE_UINT8: u32 = 1;
pub const UAVCAN_PARAMETER_REQUEST_PARAM_TYPE_INT64: u32 = 8;
pub const UAVCAN_PARAMETER_REQUEST_PARAM_TYPE_REAL32: u32 = 9;
pub const UAVCAN_PARAMETER_REQUEST_ORB_QUEUE_LENGTH: u32 = 4;
pub const ULOG_STREAM_ACK_ACK_TIMEOUT: u32 = 50;
pub const ULOG_STREAM_ACK_ACK_MAX_TRIES: u32 = 50;
pub const TAKEOFF_STATUS_TAKEOFF_STATE_UNINITIALIZED: u32 = 0;
pub const TAKEOFF_STATUS_TAKEOFF_STATE_DISARMED: u32 = 1;
pub const TAKEOFF_STATUS_TAKEOFF_STATE_SPOOLUP: u32 = 2;
pub const TAKEOFF_STATUS_TAKEOFF_STATE_READY_FOR_TAKEOFF: u32 = 3;
pub const TAKEOFF_STATUS_TAKEOFF_STATE_RAMPUP: u32 = 4;
pub const TAKEOFF_STATUS_TAKEOFF_STATE_FLIGHT: u32 = 5;
pub const PARAMETER_SET_VALUE_RESPONSE_ORB_QUEUE_LENGTH: u32 = 4;
pub const POWER_BUTTON_STATE_PWR_BUTTON_STATE_IDEL: u32 = 0;
pub const POWER_BUTTON_STATE_PWR_BUTTON_STATE_DOWN: u32 = 1;
pub const POWER_BUTTON_STATE_PWR_BUTTON_STATE_UP: u32 = 2;
pub const POWER_BUTTON_STATE_PWR_BUTTON_STATE_REQUEST_SHUTDOWN: u32 = 3;
pub const VTOL_VEHICLE_STATUS_MESSAGE_VERSION: u32 = 0;
pub const VTOL_VEHICLE_STATUS_VEHICLE_VTOL_STATE_UNDEFINED: u32 = 0;
pub const VTOL_VEHICLE_STATUS_VEHICLE_VTOL_STATE_TRANSITION_TO_FW: u32 = 1;
pub const VTOL_VEHICLE_STATUS_VEHICLE_VTOL_STATE_TRANSITION_TO_MC: u32 = 2;
pub const VTOL_VEHICLE_STATUS_VEHICLE_VTOL_STATE_MC: u32 = 3;
pub const VTOL_VEHICLE_STATUS_VEHICLE_VTOL_STATE_FW: u32 = 4;
pub const QSHELL_REQ_MAX_STRLEN: u32 = 100;
pub const POSITION_SETPOINT_SETPOINT_TYPE_POSITION: u32 = 0;
pub const POSITION_SETPOINT_SETPOINT_TYPE_VELOCITY: u32 = 1;
pub const POSITION_SETPOINT_SETPOINT_TYPE_LOITER: u32 = 2;
pub const POSITION_SETPOINT_SETPOINT_TYPE_TAKEOFF: u32 = 3;
pub const POSITION_SETPOINT_SETPOINT_TYPE_LAND: u32 = 4;
pub const POSITION_SETPOINT_SETPOINT_TYPE_IDLE: u32 = 5;
pub const POSITION_SETPOINT_LOITER_TYPE_ORBIT: u32 = 0;
pub const POSITION_SETPOINT_LOITER_TYPE_FIGUREEIGHT: u32 = 1;
pub const SYSTEM_POWER_BRICK1_VALID_SHIFTS: u32 = 0;
pub const SYSTEM_POWER_BRICK1_VALID_MASK: u32 = 1;
pub const SYSTEM_POWER_BRICK2_VALID_SHIFTS: u32 = 1;
pub const SYSTEM_POWER_BRICK2_VALID_MASK: u32 = 2;
pub const SYSTEM_POWER_BRICK3_VALID_SHIFTS: u32 = 2;
pub const SYSTEM_POWER_BRICK3_VALID_MASK: u32 = 4;
pub const SYSTEM_POWER_BRICK4_VALID_SHIFTS: u32 = 3;
pub const SYSTEM_POWER_BRICK4_VALID_MASK: u32 = 8;
pub const GIMBAL_DEVICE_ATTITUDE_STATUS_DEVICE_FLAGS_RETRACT: u32 = 1;
pub const GIMBAL_DEVICE_ATTITUDE_STATUS_DEVICE_FLAGS_NEUTRAL: u32 = 2;
pub const GIMBAL_DEVICE_ATTITUDE_STATUS_DEVICE_FLAGS_ROLL_LOCK: u32 = 4;
pub const GIMBAL_DEVICE_ATTITUDE_STATUS_DEVICE_FLAGS_PITCH_LOCK: u32 = 8;
pub const GIMBAL_DEVICE_ATTITUDE_STATUS_DEVICE_FLAGS_YAW_LOCK: u32 = 16;
pub const SENSOR_GYRO_FIFO_ORB_QUEUE_LENGTH: u32 = 4;
pub const VEHICLE_COMMAND_MESSAGE_VERSION: u32 = 0;
pub const VEHICLE_COMMAND_VEHICLE_CMD_CUSTOM_0: u32 = 0;
pub const VEHICLE_COMMAND_VEHICLE_CMD_CUSTOM_1: u32 = 1;
pub const VEHICLE_COMMAND_VEHICLE_CMD_CUSTOM_2: u32 = 2;
pub const VEHICLE_COMMAND_VEHICLE_CMD_NAV_WAYPOINT: u32 = 16;
pub const VEHICLE_COMMAND_VEHICLE_CMD_NAV_LOITER_UNLIM: u32 = 17;
pub const VEHICLE_COMMAND_VEHICLE_CMD_NAV_LOITER_TURNS: u32 = 18;
pub const VEHICLE_COMMAND_VEHICLE_CMD_NAV_LOITER_TIME: u32 = 19;
pub const VEHICLE_COMMAND_VEHICLE_CMD_NAV_RETURN_TO_LAUNCH: u32 = 20;
pub const VEHICLE_COMMAND_VEHICLE_CMD_NAV_LAND: u32 = 21;
pub const VEHICLE_COMMAND_VEHICLE_CMD_NAV_TAKEOFF: u32 = 22;
pub const VEHICLE_COMMAND_VEHICLE_CMD_NAV_PRECLAND: u32 = 23;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_ORBIT: u32 = 34;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_FIGUREEIGHT: u32 = 35;
pub const VEHICLE_COMMAND_VEHICLE_CMD_NAV_ROI: u32 = 80;
pub const VEHICLE_COMMAND_VEHICLE_CMD_NAV_PATHPLANNING: u32 = 81;
pub const VEHICLE_COMMAND_VEHICLE_CMD_NAV_VTOL_TAKEOFF: u32 = 84;
pub const VEHICLE_COMMAND_VEHICLE_CMD_NAV_VTOL_LAND: u32 = 85;
pub const VEHICLE_COMMAND_VEHICLE_CMD_NAV_GUIDED_LIMITS: u32 = 90;
pub const VEHICLE_COMMAND_VEHICLE_CMD_NAV_GUIDED_MASTER: u32 = 91;
pub const VEHICLE_COMMAND_VEHICLE_CMD_NAV_DELAY: u32 = 93;
pub const VEHICLE_COMMAND_VEHICLE_CMD_NAV_LAST: u32 = 95;
pub const VEHICLE_COMMAND_VEHICLE_CMD_CONDITION_DELAY: u32 = 112;
pub const VEHICLE_COMMAND_VEHICLE_CMD_CONDITION_CHANGE_ALT: u32 = 113;
pub const VEHICLE_COMMAND_VEHICLE_CMD_CONDITION_DISTANCE: u32 = 114;
pub const VEHICLE_COMMAND_VEHICLE_CMD_CONDITION_YAW: u32 = 115;
pub const VEHICLE_COMMAND_VEHICLE_CMD_CONDITION_LAST: u32 = 159;
pub const VEHICLE_COMMAND_VEHICLE_CMD_CONDITION_GATE: u32 = 4501;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_SET_MODE: u32 = 176;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_JUMP: u32 = 177;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_CHANGE_SPEED: u32 = 178;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_SET_HOME: u32 = 179;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_SET_PARAMETER: u32 = 180;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_SET_RELAY: u32 = 181;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_REPEAT_RELAY: u32 = 182;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_REPEAT_SERVO: u32 = 184;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_FLIGHTTERMINATION: u32 = 185;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_CHANGE_ALTITUDE: u32 = 186;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_SET_ACTUATOR: u32 = 187;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_LAND_START: u32 = 189;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_GO_AROUND: u32 = 191;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_REPOSITION: u32 = 192;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_PAUSE_CONTINUE: u32 = 193;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_SET_ROI_LOCATION: u32 = 195;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_SET_ROI_WPNEXT_OFFSET: u32 = 196;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_SET_ROI_NONE: u32 = 197;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_CONTROL_VIDEO: u32 = 200;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_SET_ROI: u32 = 201;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_DIGICAM_CONTROL: u32 = 203;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_MOUNT_CONFIGURE: u32 = 204;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_MOUNT_CONTROL: u32 = 205;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_SET_CAM_TRIGG_DIST: u32 = 206;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_FENCE_ENABLE: u32 = 207;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_PARACHUTE: u32 = 208;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_MOTOR_TEST: u32 = 209;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_INVERTED_FLIGHT: u32 = 210;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_GRIPPER: u32 = 211;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_SET_CAM_TRIGG_INTERVAL: u32 = 214;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_MOUNT_CONTROL_QUAT: u32 = 220;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_GUIDED_MASTER: u32 = 221;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_GUIDED_LIMITS: u32 = 222;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_LAST: u32 = 240;
pub const VEHICLE_COMMAND_VEHICLE_CMD_PREFLIGHT_CALIBRATION: u32 = 241;
pub const VEHICLE_COMMAND_PREFLIGHT_CALIBRATION_TEMPERATURE_CALIBRATION: u32 = 3;
pub const VEHICLE_COMMAND_VEHICLE_CMD_PREFLIGHT_SET_SENSOR_OFFSETS: u32 = 242;
pub const VEHICLE_COMMAND_VEHICLE_CMD_PREFLIGHT_UAVCAN: u32 = 243;
pub const VEHICLE_COMMAND_VEHICLE_CMD_PREFLIGHT_STORAGE: u32 = 245;
pub const VEHICLE_COMMAND_VEHICLE_CMD_PREFLIGHT_REBOOT_SHUTDOWN: u32 = 246;
pub const VEHICLE_COMMAND_VEHICLE_CMD_OBLIQUE_SURVEY: u32 = 260;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_SET_STANDARD_MODE: u32 = 262;
pub const VEHICLE_COMMAND_VEHICLE_CMD_GIMBAL_DEVICE_INFORMATION: u32 = 283;
pub const VEHICLE_COMMAND_VEHICLE_CMD_MISSION_START: u32 = 300;
pub const VEHICLE_COMMAND_VEHICLE_CMD_ACTUATOR_TEST: u32 = 310;
pub const VEHICLE_COMMAND_VEHICLE_CMD_CONFIGURE_ACTUATOR: u32 = 311;
pub const VEHICLE_COMMAND_VEHICLE_CMD_COMPONENT_ARM_DISARM: u32 = 400;
pub const VEHICLE_COMMAND_VEHICLE_CMD_RUN_PREARM_CHECKS: u32 = 401;
pub const VEHICLE_COMMAND_VEHICLE_CMD_INJECT_FAILURE: u32 = 420;
pub const VEHICLE_COMMAND_VEHICLE_CMD_START_RX_PAIR: u32 = 500;
pub const VEHICLE_COMMAND_VEHICLE_CMD_REQUEST_MESSAGE: u32 = 512;
pub const VEHICLE_COMMAND_VEHICLE_CMD_REQUEST_CAMERA_INFORMATION: u32 = 521;
pub const VEHICLE_COMMAND_VEHICLE_CMD_SET_CAMERA_MODE: u32 = 530;
pub const VEHICLE_COMMAND_VEHICLE_CMD_SET_CAMERA_ZOOM: u32 = 531;
pub const VEHICLE_COMMAND_VEHICLE_CMD_SET_CAMERA_FOCUS: u32 = 532;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_GIMBAL_MANAGER_PITCHYAW: u32 = 1000;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_GIMBAL_MANAGER_CONFIGURE: u32 = 1001;
pub const VEHICLE_COMMAND_VEHICLE_CMD_IMAGE_START_CAPTURE: u32 = 2000;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_TRIGGER_CONTROL: u32 = 2003;
pub const VEHICLE_COMMAND_VEHICLE_CMD_VIDEO_START_CAPTURE: u32 = 2500;
pub const VEHICLE_COMMAND_VEHICLE_CMD_VIDEO_STOP_CAPTURE: u32 = 2501;
pub const VEHICLE_COMMAND_VEHICLE_CMD_LOGGING_START: u32 = 2510;
pub const VEHICLE_COMMAND_VEHICLE_CMD_LOGGING_STOP: u32 = 2511;
pub const VEHICLE_COMMAND_VEHICLE_CMD_CONTROL_HIGH_LATENCY: u32 = 2600;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_VTOL_TRANSITION: u32 = 3000;
pub const VEHICLE_COMMAND_VEHICLE_CMD_ARM_AUTHORIZATION_REQUEST: u32 = 3001;
pub const VEHICLE_COMMAND_VEHICLE_CMD_PAYLOAD_PREPARE_DEPLOY: u32 = 30001;
pub const VEHICLE_COMMAND_VEHICLE_CMD_PAYLOAD_CONTROL_DEPLOY: u32 = 30002;
pub const VEHICLE_COMMAND_VEHICLE_CMD_FIXED_MAG_CAL_YAW: u32 = 42006;
pub const VEHICLE_COMMAND_VEHICLE_CMD_DO_WINCH: u32 = 42600;
pub const VEHICLE_COMMAND_VEHICLE_CMD_EXTERNAL_POSITION_ESTIMATE: u32 = 43003;
pub const VEHICLE_COMMAND_VEHICLE_CMD_EXTERNAL_WIND_ESTIMATE: u32 = 43004;
pub const VEHICLE_COMMAND_VEHICLE_CMD_PX4_INTERNAL_START: u32 = 65537;
pub const VEHICLE_COMMAND_VEHICLE_CMD_SET_GPS_GLOBAL_ORIGIN: u32 = 100000;
pub const VEHICLE_COMMAND_VEHICLE_CMD_SET_NAV_STATE: u32 = 100001;
pub const VEHICLE_COMMAND_VEHICLE_MOUNT_MODE_RETRACT: u32 = 0;
pub const VEHICLE_COMMAND_VEHICLE_MOUNT_MODE_NEUTRAL: u32 = 1;
pub const VEHICLE_COMMAND_VEHICLE_MOUNT_MODE_MAVLINK_TARGETING: u32 = 2;
pub const VEHICLE_COMMAND_VEHICLE_MOUNT_MODE_RC_TARGETING: u32 = 3;
pub const VEHICLE_COMMAND_VEHICLE_MOUNT_MODE_GPS_POINT: u32 = 4;
pub const VEHICLE_COMMAND_VEHICLE_MOUNT_MODE_ENUM_END: u32 = 5;
pub const VEHICLE_COMMAND_VEHICLE_ROI_NONE: u32 = 0;
pub const VEHICLE_COMMAND_VEHICLE_ROI_WPNEXT: u32 = 1;
pub const VEHICLE_COMMAND_VEHICLE_ROI_WPINDEX: u32 = 2;
pub const VEHICLE_COMMAND_VEHICLE_ROI_LOCATION: u32 = 3;
pub const VEHICLE_COMMAND_VEHICLE_ROI_TARGET: u32 = 4;
pub const VEHICLE_COMMAND_VEHICLE_ROI_ENUM_END: u32 = 5;
pub const VEHICLE_COMMAND_PARACHUTE_ACTION_DISABLE: u32 = 0;
pub const VEHICLE_COMMAND_PARACHUTE_ACTION_ENABLE: u32 = 1;
pub const VEHICLE_COMMAND_PARACHUTE_ACTION_RELEASE: u32 = 2;
pub const VEHICLE_COMMAND_FAILURE_UNIT_SENSOR_GYRO: u32 = 0;
pub const VEHICLE_COMMAND_FAILURE_UNIT_SENSOR_ACCEL: u32 = 1;
pub const VEHICLE_COMMAND_FAILURE_UNIT_SENSOR_MAG: u32 = 2;
pub const VEHICLE_COMMAND_FAILURE_UNIT_SENSOR_BARO: u32 = 3;
pub const VEHICLE_COMMAND_FAILURE_UNIT_SENSOR_GPS: u32 = 4;
pub const VEHICLE_COMMAND_FAILURE_UNIT_SENSOR_OPTICAL_FLOW: u32 = 5;
pub const VEHICLE_COMMAND_FAILURE_UNIT_SENSOR_VIO: u32 = 6;
pub const VEHICLE_COMMAND_FAILURE_UNIT_SENSOR_DISTANCE_SENSOR: u32 = 7;
pub const VEHICLE_COMMAND_FAILURE_UNIT_SENSOR_AIRSPEED: u32 = 8;
pub const VEHICLE_COMMAND_FAILURE_UNIT_SYSTEM_BATTERY: u32 = 100;
pub const VEHICLE_COMMAND_FAILURE_UNIT_SYSTEM_MOTOR: u32 = 101;
pub const VEHICLE_COMMAND_FAILURE_UNIT_SYSTEM_SERVO: u32 = 102;
pub const VEHICLE_COMMAND_FAILURE_UNIT_SYSTEM_AVOIDANCE: u32 = 103;
pub const VEHICLE_COMMAND_FAILURE_UNIT_SYSTEM_RC_SIGNAL: u32 = 104;
pub const VEHICLE_COMMAND_FAILURE_UNIT_SYSTEM_MAVLINK_SIGNAL: u32 = 105;
pub const VEHICLE_COMMAND_FAILURE_TYPE_OK: u32 = 0;
pub const VEHICLE_COMMAND_FAILURE_TYPE_OFF: u32 = 1;
pub const VEHICLE_COMMAND_FAILURE_TYPE_STUCK: u32 = 2;
pub const VEHICLE_COMMAND_FAILURE_TYPE_GARBAGE: u32 = 3;
pub const VEHICLE_COMMAND_FAILURE_TYPE_WRONG: u32 = 4;
pub const VEHICLE_COMMAND_FAILURE_TYPE_SLOW: u32 = 5;
pub const VEHICLE_COMMAND_FAILURE_TYPE_DELAYED: u32 = 6;
pub const VEHICLE_COMMAND_FAILURE_TYPE_INTERMITTENT: u32 = 7;
pub const VEHICLE_COMMAND_SPEED_TYPE_AIRSPEED: u32 = 0;
pub const VEHICLE_COMMAND_SPEED_TYPE_GROUNDSPEED: u32 = 1;
pub const VEHICLE_COMMAND_SPEED_TYPE_CLIMB_SPEED: u32 = 2;
pub const VEHICLE_COMMAND_SPEED_TYPE_DESCEND_SPEED: u32 = 3;
pub const VEHICLE_COMMAND_ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TO_CIRCLE_CENTER: u32 = 0;
pub const VEHICLE_COMMAND_ORBIT_YAW_BEHAVIOUR_HOLD_INITIAL_HEADING: u32 = 1;
pub const VEHICLE_COMMAND_ORBIT_YAW_BEHAVIOUR_UNCONTROLLED: u32 = 2;
pub const VEHICLE_COMMAND_ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TANGENT_TO_CIRCLE: u32 = 3;
pub const VEHICLE_COMMAND_ORBIT_YAW_BEHAVIOUR_RC_CONTROLLED: u32 = 4;
pub const VEHICLE_COMMAND_ORBIT_YAW_BEHAVIOUR_UNCHANGED: u32 = 5;
pub const VEHICLE_COMMAND_ARMING_ACTION_DISARM: u32 = 0;
pub const VEHICLE_COMMAND_ARMING_ACTION_ARM: u32 = 1;
pub const VEHICLE_COMMAND_GRIPPER_ACTION_RELEASE: u32 = 0;
pub const VEHICLE_COMMAND_GRIPPER_ACTION_GRAB: u32 = 1;
pub const VEHICLE_COMMAND_ORB_QUEUE_LENGTH: u32 = 8;
pub const VEHICLE_COMMAND_COMPONENT_MODE_EXECUTOR_START: u32 = 1000;
pub const VEHICLE_IMU_CLIPPING_X: u32 = 1;
pub const VEHICLE_IMU_CLIPPING_Y: u32 = 2;
pub const VEHICLE_IMU_CLIPPING_Z: u32 = 4;
pub const ACTUATOR_MOTORS_MESSAGE_VERSION: u32 = 0;
pub const ACTUATOR_MOTORS_ACTUATOR_FUNCTION_MOTOR1: u32 = 101;
pub const ACTUATOR_MOTORS_NUM_CONTROLS: u32 = 12;
pub const TASK_STACK_INFO_ORB_QUEUE_LENGTH: u32 = 2;
pub const LAUNCH_DETECTION_STATUS_STATE_WAITING_FOR_LAUNCH: u32 = 0;
pub const LAUNCH_DETECTION_STATUS_STATE_LAUNCH_DETECTED_DISABLED_MOTOR: u32 = 1;
pub const LAUNCH_DETECTION_STATUS_STATE_FLYING: u32 = 2;
pub const REGISTER_EXT_COMPONENT_REQUEST_MESSAGE_VERSION: u32 = 0;
pub const REGISTER_EXT_COMPONENT_REQUEST_LATEST_PX4_ROS2_API_VERSION: u32 = 1;
pub const REGISTER_EXT_COMPONENT_REQUEST_ORB_QUEUE_LENGTH: u32 = 2;
pub const GRIPPER_COMMAND_GRAB: u32 = 0;
pub const GRIPPER_COMMAND_RELEASE: u32 = 1;
pub const VEHICLE_STATUS_MESSAGE_VERSION: u32 = 1;
pub const VEHICLE_STATUS_ARMING_STATE_DISARMED: u32 = 1;
pub const VEHICLE_STATUS_ARMING_STATE_ARMED: u32 = 2;
pub const VEHICLE_STATUS_ARM_DISARM_REASON_TRANSITION_TO_STANDBY: u32 = 0;
pub const VEHICLE_STATUS_ARM_DISARM_REASON_STICK_GESTURE: u32 = 1;
pub const VEHICLE_STATUS_ARM_DISARM_REASON_RC_SWITCH: u32 = 2;
pub const VEHICLE_STATUS_ARM_DISARM_REASON_COMMAND_INTERNAL: u32 = 3;
pub const VEHICLE_STATUS_ARM_DISARM_REASON_COMMAND_EXTERNAL: u32 = 4;
pub const VEHICLE_STATUS_ARM_DISARM_REASON_MISSION_START: u32 = 5;
pub const VEHICLE_STATUS_ARM_DISARM_REASON_SAFETY_BUTTON: u32 = 6;
pub const VEHICLE_STATUS_ARM_DISARM_REASON_AUTO_DISARM_LAND: u32 = 7;
pub const VEHICLE_STATUS_ARM_DISARM_REASON_AUTO_DISARM_PREFLIGHT: u32 = 8;
pub const VEHICLE_STATUS_ARM_DISARM_REASON_KILL_SWITCH: u32 = 9;
pub const VEHICLE_STATUS_ARM_DISARM_REASON_LOCKDOWN: u32 = 10;
pub const VEHICLE_STATUS_ARM_DISARM_REASON_FAILURE_DETECTOR: u32 = 11;
pub const VEHICLE_STATUS_ARM_DISARM_REASON_SHUTDOWN: u32 = 12;
pub const VEHICLE_STATUS_ARM_DISARM_REASON_UNIT_TEST: u32 = 13;
pub const VEHICLE_STATUS_NAVIGATION_STATE_MANUAL: u32 = 0;
pub const VEHICLE_STATUS_NAVIGATION_STATE_ALTCTL: u32 = 1;
pub const VEHICLE_STATUS_NAVIGATION_STATE_POSCTL: u32 = 2;
pub const VEHICLE_STATUS_NAVIGATION_STATE_AUTO_MISSION: u32 = 3;
pub const VEHICLE_STATUS_NAVIGATION_STATE_AUTO_LOITER: u32 = 4;
pub const VEHICLE_STATUS_NAVIGATION_STATE_AUTO_RTL: u32 = 5;
pub const VEHICLE_STATUS_NAVIGATION_STATE_POSITION_SLOW: u32 = 6;
pub const VEHICLE_STATUS_NAVIGATION_STATE_FREE5: u32 = 7;
pub const VEHICLE_STATUS_NAVIGATION_STATE_FREE4: u32 = 8;
pub const VEHICLE_STATUS_NAVIGATION_STATE_FREE3: u32 = 9;
pub const VEHICLE_STATUS_NAVIGATION_STATE_ACRO: u32 = 10;
pub const VEHICLE_STATUS_NAVIGATION_STATE_FREE2: u32 = 11;
pub const VEHICLE_STATUS_NAVIGATION_STATE_DESCEND: u32 = 12;
pub const VEHICLE_STATUS_NAVIGATION_STATE_TERMINATION: u32 = 13;
pub const VEHICLE_STATUS_NAVIGATION_STATE_OFFBOARD: u32 = 14;
pub const VEHICLE_STATUS_NAVIGATION_STATE_STAB: u32 = 15;
pub const VEHICLE_STATUS_NAVIGATION_STATE_FREE1: u32 = 16;
pub const VEHICLE_STATUS_NAVIGATION_STATE_AUTO_TAKEOFF: u32 = 17;
pub const VEHICLE_STATUS_NAVIGATION_STATE_AUTO_LAND: u32 = 18;
pub const VEHICLE_STATUS_NAVIGATION_STATE_AUTO_FOLLOW_TARGET: u32 = 19;
pub const VEHICLE_STATUS_NAVIGATION_STATE_AUTO_PRECLAND: u32 = 20;
pub const VEHICLE_STATUS_NAVIGATION_STATE_ORBIT: u32 = 21;
pub const VEHICLE_STATUS_NAVIGATION_STATE_AUTO_VTOL_TAKEOFF: u32 = 22;
pub const VEHICLE_STATUS_NAVIGATION_STATE_EXTERNAL1: u32 = 23;
pub const VEHICLE_STATUS_NAVIGATION_STATE_EXTERNAL2: u32 = 24;
pub const VEHICLE_STATUS_NAVIGATION_STATE_EXTERNAL3: u32 = 25;
pub const VEHICLE_STATUS_NAVIGATION_STATE_EXTERNAL4: u32 = 26;
pub const VEHICLE_STATUS_NAVIGATION_STATE_EXTERNAL5: u32 = 27;
pub const VEHICLE_STATUS_NAVIGATION_STATE_EXTERNAL6: u32 = 28;
pub const VEHICLE_STATUS_NAVIGATION_STATE_EXTERNAL7: u32 = 29;
pub const VEHICLE_STATUS_NAVIGATION_STATE_EXTERNAL8: u32 = 30;
pub const VEHICLE_STATUS_NAVIGATION_STATE_MAX: u32 = 31;
pub const VEHICLE_STATUS_FAILURE_NONE: u32 = 0;
pub const VEHICLE_STATUS_FAILURE_ROLL: u32 = 1;
pub const VEHICLE_STATUS_FAILURE_PITCH: u32 = 2;
pub const VEHICLE_STATUS_FAILURE_ALT: u32 = 4;
pub const VEHICLE_STATUS_FAILURE_EXT: u32 = 8;
pub const VEHICLE_STATUS_FAILURE_ARM_ESC: u32 = 16;
pub const VEHICLE_STATUS_FAILURE_BATTERY: u32 = 32;
pub const VEHICLE_STATUS_FAILURE_IMBALANCED_PROP: u32 = 64;
pub const VEHICLE_STATUS_FAILURE_MOTOR: u32 = 128;
pub const VEHICLE_STATUS_HIL_STATE_OFF: u32 = 0;
pub const VEHICLE_STATUS_HIL_STATE_ON: u32 = 1;
pub const VEHICLE_STATUS_VEHICLE_TYPE_ROTARY_WING: u32 = 1;
pub const VEHICLE_STATUS_VEHICLE_TYPE_FIXED_WING: u32 = 2;
pub const VEHICLE_STATUS_VEHICLE_TYPE_ROVER: u32 = 3;
pub const VEHICLE_STATUS_FAILSAFE_DEFER_STATE_DISABLED: u32 = 0;
pub const VEHICLE_STATUS_FAILSAFE_DEFER_STATE_ENABLED: u32 = 1;
pub const VEHICLE_STATUS_FAILSAFE_DEFER_STATE_WOULD_FAILSAFE: u32 = 2;
pub const LANDING_GEAR_GEAR_UP: u32 = 1;
pub const LANDING_GEAR_GEAR_DOWN: i32 = -1;
pub const LANDING_GEAR_GEAR_KEEP: u32 = 0;
pub const GENERATOR_STATUS_STATUS_FLAG_OFF: u32 = 1;
pub const GENERATOR_STATUS_STATUS_FLAG_READY: u32 = 2;
pub const GENERATOR_STATUS_STATUS_FLAG_GENERATING: u32 = 4;
pub const GENERATOR_STATUS_STATUS_FLAG_CHARGING: u32 = 8;
pub const GENERATOR_STATUS_STATUS_FLAG_REDUCED_POWER: u32 = 16;
pub const GENERATOR_STATUS_STATUS_FLAG_MAXPOWER: u32 = 32;
pub const GENERATOR_STATUS_STATUS_FLAG_OVERTEMP_WARNING: u32 = 64;
pub const GENERATOR_STATUS_STATUS_FLAG_OVERTEMP_FAULT: u32 = 128;
pub const GENERATOR_STATUS_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING: u32 = 256;
pub const GENERATOR_STATUS_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT: u32 = 512;
pub const GENERATOR_STATUS_STATUS_FLAG_ELECTRONICS_FAULT: u32 = 1024;
pub const GENERATOR_STATUS_STATUS_FLAG_POWERSOURCE_FAULT: u32 = 2048;
pub const GENERATOR_STATUS_STATUS_FLAG_COMMUNICATION_WARNING: u32 = 4096;
pub const GENERATOR_STATUS_STATUS_FLAG_COOLING_WARNING: u32 = 8192;
pub const GENERATOR_STATUS_STATUS_FLAG_POWER_RAIL_FAULT: u32 = 16384;
pub const GENERATOR_STATUS_STATUS_FLAG_OVERCURRENT_FAULT: u32 = 32768;
pub const GENERATOR_STATUS_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT: u32 = 65536;
pub const GENERATOR_STATUS_STATUS_FLAG_OVERVOLTAGE_FAULT: u32 = 131072;
pub const GENERATOR_STATUS_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT: u32 = 262144;
pub const GENERATOR_STATUS_STATUS_FLAG_START_INHIBITED: u32 = 524288;
pub const GENERATOR_STATUS_STATUS_FLAG_MAINTENANCE_REQUIRED: u32 = 1048576;
pub const GENERATOR_STATUS_STATUS_FLAG_WARMING_UP: u32 = 2097152;
pub const GENERATOR_STATUS_STATUS_FLAG_IDLE: u32 = 4194304;
pub const CONTROL_ALLOCATOR_STATUS_ACTUATOR_SATURATION_OK: u32 = 0;
pub const CONTROL_ALLOCATOR_STATUS_ACTUATOR_SATURATION_UPPER_DYN: u32 = 1;
pub const CONTROL_ALLOCATOR_STATUS_ACTUATOR_SATURATION_UPPER: u32 = 2;
pub const CONTROL_ALLOCATOR_STATUS_ACTUATOR_SATURATION_LOWER_DYN: i32 = -1;
pub const CONTROL_ALLOCATOR_STATUS_ACTUATOR_SATURATION_LOWER: i32 = -2;
pub const MANUAL_CONTROL_SETPOINT_MESSAGE_VERSION: u32 = 0;
pub const MANUAL_CONTROL_SETPOINT_SOURCE_UNKNOWN: u32 = 0;
pub const MANUAL_CONTROL_SETPOINT_SOURCE_RC: u32 = 1;
pub const MANUAL_CONTROL_SETPOINT_SOURCE_MAVLINK_0: u32 = 2;
pub const MANUAL_CONTROL_SETPOINT_SOURCE_MAVLINK_1: u32 = 3;
pub const MANUAL_CONTROL_SETPOINT_SOURCE_MAVLINK_2: u32 = 4;
pub const MANUAL_CONTROL_SETPOINT_SOURCE_MAVLINK_3: u32 = 5;
pub const MANUAL_CONTROL_SETPOINT_SOURCE_MAVLINK_4: u32 = 6;
pub const MANUAL_CONTROL_SETPOINT_SOURCE_MAVLINK_5: u32 = 7;
pub const GIMBAL_MANAGER_SET_MANUAL_CONTROL_GIMBAL_MANAGER_FLAGS_RETRACT: u32 = 1;
pub const GIMBAL_MANAGER_SET_MANUAL_CONTROL_GIMBAL_MANAGER_FLAGS_NEUTRAL: u32 = 2;
pub const GIMBAL_MANAGER_SET_MANUAL_CONTROL_GIMBAL_MANAGER_FLAGS_ROLL_LOCK: u32 = 4;
pub const GIMBAL_MANAGER_SET_MANUAL_CONTROL_GIMBAL_MANAGER_FLAGS_PITCH_LOCK: u32 = 8;
pub const GIMBAL_MANAGER_SET_MANUAL_CONTROL_GIMBAL_MANAGER_FLAGS_YAW_LOCK: u32 = 16;
pub const GEOFENCE_RESULT_GF_ACTION_NONE: u32 = 0;
pub const GEOFENCE_RESULT_GF_ACTION_WARN: u32 = 1;
pub const GEOFENCE_RESULT_GF_ACTION_LOITER: u32 = 2;
pub const GEOFENCE_RESULT_GF_ACTION_RTL: u32 = 3;
pub const GEOFENCE_RESULT_GF_ACTION_TERMINATE: u32 = 4;
pub const GEOFENCE_RESULT_GF_ACTION_LAND: u32 = 5;
pub const RC_PARAMETER_MAP_RC_PARAM_MAP_NCHAN: u32 = 3;
pub const RC_PARAMETER_MAP_PARAM_ID_LEN: u32 = 16;
pub const DISTANCE_SENSOR_MODE_CHANGE_REQUEST_REQUEST_OFF: u32 = 0;
pub const DISTANCE_SENSOR_MODE_CHANGE_REQUEST_REQUEST_ON: u32 = 1;
pub const PARAMETER_SET_VALUE_REQUEST_ORB_QUEUE_LENGTH: u32 = 32;
pub const GEOFENCE_STATUS_GF_STATUS_LOADING: u32 = 0;
pub const GEOFENCE_STATUS_GF_STATUS_READY: u32 = 1;
pub const SENSOR_ACCEL_ORB_QUEUE_LENGTH: u32 = 8;
pub const CELLULAR_STATUS_CELLULAR_STATUS_FLAG_UNKNOWN: u32 = 0;
pub const CELLULAR_STATUS_CELLULAR_STATUS_FLAG_FAILED: u32 = 1;
pub const CELLULAR_STATUS_CELLULAR_STATUS_FLAG_INITIALIZING: u32 = 2;
pub const CELLULAR_STATUS_CELLULAR_STATUS_FLAG_LOCKED: u32 = 3;
pub const CELLULAR_STATUS_CELLULAR_STATUS_FLAG_DISABLED: u32 = 4;
pub const CELLULAR_STATUS_CELLULAR_STATUS_FLAG_DISABLING: u32 = 5;
pub const CELLULAR_STATUS_CELLULAR_STATUS_FLAG_ENABLING: u32 = 6;
pub const CELLULAR_STATUS_CELLULAR_STATUS_FLAG_ENABLED: u32 = 7;
pub const CELLULAR_STATUS_CELLULAR_STATUS_FLAG_SEARCHING: u32 = 8;
pub const CELLULAR_STATUS_CELLULAR_STATUS_FLAG_REGISTERED: u32 = 9;
pub const CELLULAR_STATUS_CELLULAR_STATUS_FLAG_DISCONNECTING: u32 = 10;
pub const CELLULAR_STATUS_CELLULAR_STATUS_FLAG_CONNECTING: u32 = 11;
pub const CELLULAR_STATUS_CELLULAR_STATUS_FLAG_CONNECTED: u32 = 12;
pub const CELLULAR_STATUS_CELLULAR_NETWORK_FAILED_REASON_NONE: u32 = 0;
pub const CELLULAR_STATUS_CELLULAR_NETWORK_FAILED_REASON_UNKNOWN: u32 = 1;
pub const CELLULAR_STATUS_CELLULAR_NETWORK_FAILED_REASON_SIM_MISSING: u32 = 2;
pub const CELLULAR_STATUS_CELLULAR_NETWORK_FAILED_REASON_SIM_ERROR: u32 = 3;
pub const GIMBAL_MANAGER_SET_ATTITUDE_GIMBAL_MANAGER_FLAGS_RETRACT: u32 = 1;
pub const GIMBAL_MANAGER_SET_ATTITUDE_GIMBAL_MANAGER_FLAGS_NEUTRAL: u32 = 2;
pub const GIMBAL_MANAGER_SET_ATTITUDE_GIMBAL_MANAGER_FLAGS_ROLL_LOCK: u32 = 4;
pub const GIMBAL_MANAGER_SET_ATTITUDE_GIMBAL_MANAGER_FLAGS_PITCH_LOCK: u32 = 8;
pub const GIMBAL_MANAGER_SET_ATTITUDE_GIMBAL_MANAGER_FLAGS_YAW_LOCK: u32 = 16;
pub const GIMBAL_MANAGER_SET_ATTITUDE_ORB_QUEUE_LENGTH: u32 = 2;
pub const AIRSPEED_WIND_SOURCE_AS_BETA_ONLY: u32 = 0;
pub const AIRSPEED_WIND_SOURCE_AS_SENSOR_1: u32 = 1;
pub const AIRSPEED_WIND_SOURCE_AS_SENSOR_2: u32 = 2;
pub const AIRSPEED_WIND_SOURCE_AS_SENSOR_3: u32 = 3;
pub const MESSAGE_FORMAT_REQUEST_LATEST_PROTOCOL_VERSION: u32 = 1;
pub const VEHICLE_CONTROL_MODE_MESSAGE_VERSION: u32 = 0;
pub const BUTTON_EVENT_ORB_QUEUE_LENGTH: u32 = 2;
pub const PARAMETER_SET_USED_REQUEST_ORB_QUEUE_LENGTH: u32 = 64;
pub const ACTUATOR_TEST_ACTION_RELEASE_CONTROL: u32 = 0;
pub const ACTUATOR_TEST_ACTION_DO_CONTROL: u32 = 1;
pub const ACTUATOR_TEST_FUNCTION_MOTOR1: u32 = 101;
pub const ACTUATOR_TEST_MAX_NUM_MOTORS: u32 = 12;
pub const ACTUATOR_TEST_FUNCTION_SERVO1: u32 = 201;
pub const ACTUATOR_TEST_MAX_NUM_SERVOS: u32 = 8;
pub const ACTUATOR_TEST_ORB_QUEUE_LENGTH: u32 = 16;
pub const MANUAL_CONTROL_SWITCHES_SWITCH_POS_NONE: u32 = 0;
pub const MANUAL_CONTROL_SWITCHES_SWITCH_POS_ON: u32 = 1;
pub const MANUAL_CONTROL_SWITCHES_SWITCH_POS_MIDDLE: u32 = 2;
pub const MANUAL_CONTROL_SWITCHES_SWITCH_POS_OFF: u32 = 3;
pub const MANUAL_CONTROL_SWITCHES_MODE_SLOT_NONE: u32 = 0;
pub const MANUAL_CONTROL_SWITCHES_MODE_SLOT_1: u32 = 1;
pub const MANUAL_CONTROL_SWITCHES_MODE_SLOT_2: u32 = 2;
pub const MANUAL_CONTROL_SWITCHES_MODE_SLOT_3: u32 = 3;
pub const MANUAL_CONTROL_SWITCHES_MODE_SLOT_4: u32 = 4;
pub const MANUAL_CONTROL_SWITCHES_MODE_SLOT_5: u32 = 5;
pub const MANUAL_CONTROL_SWITCHES_MODE_SLOT_6: u32 = 6;
pub const MANUAL_CONTROL_SWITCHES_MODE_SLOT_NUM: u32 = 6;
pub const GPS_INJECT_DATA_ORB_QUEUE_LENGTH: u32 = 8;
pub const GPS_INJECT_DATA_MAX_INSTANCES: u32 = 2;
pub const MAVLINK_TUNNEL_MAV_TUNNEL_PAYLOAD_TYPE_UNKNOWN: u32 = 0;
pub const MAVLINK_TUNNEL_MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED0: u32 = 200;
pub const MAVLINK_TUNNEL_MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED1: u32 = 201;
pub const MAVLINK_TUNNEL_MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED2: u32 = 202;
pub const MAVLINK_TUNNEL_MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED3: u32 = 203;
pub const MAVLINK_TUNNEL_MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED4: u32 = 204;
pub const MAVLINK_TUNNEL_MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED5: u32 = 205;
pub const MAVLINK_TUNNEL_MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED6: u32 = 206;
pub const MAVLINK_TUNNEL_MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED7: u32 = 207;
pub const MAVLINK_TUNNEL_MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED8: u32 = 208;
pub const MAVLINK_TUNNEL_MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED9: u32 = 209;
pub const FLIGHT_PHASE_ESTIMATION_FLIGHT_PHASE_UNKNOWN: u32 = 0;
pub const FLIGHT_PHASE_ESTIMATION_FLIGHT_PHASE_LEVEL: u32 = 1;
pub const FLIGHT_PHASE_ESTIMATION_FLIGHT_PHASE_DESCEND: u32 = 2;
pub const FLIGHT_PHASE_ESTIMATION_FLIGHT_PHASE_CLIMB: u32 = 3;
pub const VEHICLE_ATTITUDE_SETPOINT_MESSAGE_VERSION: u32 = 0;
pub const TELEMETRY_STATUS_LINK_TYPE_GENERIC: u32 = 0;
pub const TELEMETRY_STATUS_LINK_TYPE_UBIQUITY_BULLET: u32 = 1;
pub const TELEMETRY_STATUS_LINK_TYPE_WIRE: u32 = 2;
pub const TELEMETRY_STATUS_LINK_TYPE_USB: u32 = 3;
pub const TELEMETRY_STATUS_LINK_TYPE_IRIDIUM: u32 = 4;
pub const TELEMETRY_STATUS_HEARTBEAT_TIMEOUT_US: u32 = 2500000;
pub const GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT: u32 = 1;
pub const GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL: u32 = 2;
pub const GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS: u32 = 4;
pub const GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW: u32 = 8;
pub const GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK: u32 = 16;
pub const GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS: u32 = 32;
pub const GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW: u32 = 64;
pub const GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK: u32 = 128;
pub const GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS: u32 = 256;
pub const GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW: u32 = 512;
pub const GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK: u32 = 1024;
pub const GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW: u32 = 2048;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_gnss_relative_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub time_utc_usec: u64,
    pub device_id: u32,
    pub position: [f32; 3usize],
    pub position_accuracy: [f32; 3usize],
    pub heading: f32,
    pub heading_accuracy: f32,
    pub position_length: f32,
    pub accuracy_length: f32,
    pub reference_station_id: u16,
    pub gnss_fix_ok: bool,
    pub differential_solution: bool,
    pub relative_position_valid: bool,
    pub carrier_solution_floating: bool,
    pub carrier_solution_fixed: bool,
    pub moving_base_mode: bool,
    pub reference_position_miss: bool,
    pub reference_observations_miss: bool,
    pub heading_valid: bool,
    pub relative_position_normalized: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_gnss_relative_s"][::core::mem::size_of::<sensor_gnss_relative_s>() - 80usize];
    ["Alignment of sensor_gnss_relative_s"]
        [::core::mem::align_of::<sensor_gnss_relative_s>() - 8usize];
    ["Offset of field: sensor_gnss_relative_s::timestamp"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, timestamp) - 0usize];
    ["Offset of field: sensor_gnss_relative_s::timestamp_sample"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, timestamp_sample) - 8usize];
    ["Offset of field: sensor_gnss_relative_s::time_utc_usec"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, time_utc_usec) - 16usize];
    ["Offset of field: sensor_gnss_relative_s::device_id"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, device_id) - 24usize];
    ["Offset of field: sensor_gnss_relative_s::position"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, position) - 28usize];
    ["Offset of field: sensor_gnss_relative_s::position_accuracy"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, position_accuracy) - 40usize];
    ["Offset of field: sensor_gnss_relative_s::heading"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, heading) - 52usize];
    ["Offset of field: sensor_gnss_relative_s::heading_accuracy"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, heading_accuracy) - 56usize];
    ["Offset of field: sensor_gnss_relative_s::position_length"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, position_length) - 60usize];
    ["Offset of field: sensor_gnss_relative_s::accuracy_length"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, accuracy_length) - 64usize];
    ["Offset of field: sensor_gnss_relative_s::reference_station_id"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, reference_station_id) - 68usize];
    ["Offset of field: sensor_gnss_relative_s::gnss_fix_ok"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, gnss_fix_ok) - 70usize];
    ["Offset of field: sensor_gnss_relative_s::differential_solution"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, differential_solution) - 71usize];
    ["Offset of field: sensor_gnss_relative_s::relative_position_valid"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, relative_position_valid) - 72usize];
    ["Offset of field: sensor_gnss_relative_s::carrier_solution_floating"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, carrier_solution_floating) - 73usize];
    ["Offset of field: sensor_gnss_relative_s::carrier_solution_fixed"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, carrier_solution_fixed) - 74usize];
    ["Offset of field: sensor_gnss_relative_s::moving_base_mode"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, moving_base_mode) - 75usize];
    ["Offset of field: sensor_gnss_relative_s::reference_position_miss"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, reference_position_miss) - 76usize];
    ["Offset of field: sensor_gnss_relative_s::reference_observations_miss"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, reference_observations_miss) - 77usize];
    ["Offset of field: sensor_gnss_relative_s::heading_valid"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, heading_valid) - 78usize];
    ["Offset of field: sensor_gnss_relative_s::relative_position_normalized"]
        [::core::mem::offset_of!(sensor_gnss_relative_s, relative_position_normalized) - 79usize];
};
unsafe extern "C" {
    pub static __orb_sensor_gnss_relative: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct estimator_aid_source3d_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub time_last_fuse: u64,
    pub device_id: u32,
    pub observation: [f32; 3usize],
    pub observation_variance: [f32; 3usize],
    pub innovation: [f32; 3usize],
    pub innovation_filtered: [f32; 3usize],
    pub innovation_variance: [f32; 3usize],
    pub test_ratio: [f32; 3usize],
    pub test_ratio_filtered: [f32; 3usize],
    pub estimator_instance: u8,
    pub innovation_rejected: bool,
    pub fused: bool,
    pub _padding0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of estimator_aid_source3d_s"]
        [::core::mem::size_of::<estimator_aid_source3d_s>() - 120usize];
    ["Alignment of estimator_aid_source3d_s"]
        [::core::mem::align_of::<estimator_aid_source3d_s>() - 8usize];
    ["Offset of field: estimator_aid_source3d_s::timestamp"]
        [::core::mem::offset_of!(estimator_aid_source3d_s, timestamp) - 0usize];
    ["Offset of field: estimator_aid_source3d_s::timestamp_sample"]
        [::core::mem::offset_of!(estimator_aid_source3d_s, timestamp_sample) - 8usize];
    ["Offset of field: estimator_aid_source3d_s::time_last_fuse"]
        [::core::mem::offset_of!(estimator_aid_source3d_s, time_last_fuse) - 16usize];
    ["Offset of field: estimator_aid_source3d_s::device_id"]
        [::core::mem::offset_of!(estimator_aid_source3d_s, device_id) - 24usize];
    ["Offset of field: estimator_aid_source3d_s::observation"]
        [::core::mem::offset_of!(estimator_aid_source3d_s, observation) - 28usize];
    ["Offset of field: estimator_aid_source3d_s::observation_variance"]
        [::core::mem::offset_of!(estimator_aid_source3d_s, observation_variance) - 40usize];
    ["Offset of field: estimator_aid_source3d_s::innovation"]
        [::core::mem::offset_of!(estimator_aid_source3d_s, innovation) - 52usize];
    ["Offset of field: estimator_aid_source3d_s::innovation_filtered"]
        [::core::mem::offset_of!(estimator_aid_source3d_s, innovation_filtered) - 64usize];
    ["Offset of field: estimator_aid_source3d_s::innovation_variance"]
        [::core::mem::offset_of!(estimator_aid_source3d_s, innovation_variance) - 76usize];
    ["Offset of field: estimator_aid_source3d_s::test_ratio"]
        [::core::mem::offset_of!(estimator_aid_source3d_s, test_ratio) - 88usize];
    ["Offset of field: estimator_aid_source3d_s::test_ratio_filtered"]
        [::core::mem::offset_of!(estimator_aid_source3d_s, test_ratio_filtered) - 100usize];
    ["Offset of field: estimator_aid_source3d_s::estimator_instance"]
        [::core::mem::offset_of!(estimator_aid_source3d_s, estimator_instance) - 112usize];
    ["Offset of field: estimator_aid_source3d_s::innovation_rejected"]
        [::core::mem::offset_of!(estimator_aid_source3d_s, innovation_rejected) - 113usize];
    ["Offset of field: estimator_aid_source3d_s::fused"]
        [::core::mem::offset_of!(estimator_aid_source3d_s, fused) - 114usize];
    ["Offset of field: estimator_aid_source3d_s::_padding0"]
        [::core::mem::offset_of!(estimator_aid_source3d_s, _padding0) - 115usize];
};
unsafe extern "C" {
    pub static __orb_estimator_aid_src_ev_vel: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_gnss_vel: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_gravity: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_mag: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpm_s {
    pub timestamp: u64,
    pub rpm_estimate: f32,
    pub rpm_raw: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rpm_s"][::core::mem::size_of::<rpm_s>() - 16usize];
    ["Alignment of rpm_s"][::core::mem::align_of::<rpm_s>() - 8usize];
    ["Offset of field: rpm_s::timestamp"][::core::mem::offset_of!(rpm_s, timestamp) - 0usize];
    ["Offset of field: rpm_s::rpm_estimate"][::core::mem::offset_of!(rpm_s, rpm_estimate) - 8usize];
    ["Offset of field: rpm_s::rpm_raw"][::core::mem::offset_of!(rpm_s, rpm_raw) - 12usize];
};
unsafe extern "C" {
    pub static __orb_rpm: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct irlock_report_s {
    pub timestamp: u64,
    pub pos_x: f32,
    pub pos_y: f32,
    pub size_x: f32,
    pub size_y: f32,
    pub signature: u16,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of irlock_report_s"][::core::mem::size_of::<irlock_report_s>() - 32usize];
    ["Alignment of irlock_report_s"][::core::mem::align_of::<irlock_report_s>() - 8usize];
    ["Offset of field: irlock_report_s::timestamp"]
        [::core::mem::offset_of!(irlock_report_s, timestamp) - 0usize];
    ["Offset of field: irlock_report_s::pos_x"]
        [::core::mem::offset_of!(irlock_report_s, pos_x) - 8usize];
    ["Offset of field: irlock_report_s::pos_y"]
        [::core::mem::offset_of!(irlock_report_s, pos_y) - 12usize];
    ["Offset of field: irlock_report_s::size_x"]
        [::core::mem::offset_of!(irlock_report_s, size_x) - 16usize];
    ["Offset of field: irlock_report_s::size_y"]
        [::core::mem::offset_of!(irlock_report_s, size_y) - 20usize];
    ["Offset of field: irlock_report_s::signature"]
        [::core::mem::offset_of!(irlock_report_s, signature) - 24usize];
    ["Offset of field: irlock_report_s::_padding0"]
        [::core::mem::offset_of!(irlock_report_s, _padding0) - 26usize];
};
unsafe extern "C" {
    pub static __orb_irlock_report: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_uwb_s {
    pub timestamp: u64,
    pub sessionid: u32,
    pub time_offset: u32,
    pub counter: u32,
    pub distance: f32,
    pub aoa_azimuth_dev: f32,
    pub aoa_elevation_dev: f32,
    pub aoa_azimuth_resp: f32,
    pub aoa_elevation_resp: f32,
    pub offset_x: f32,
    pub offset_y: f32,
    pub offset_z: f32,
    pub mac: u16,
    pub mac_dest: u16,
    pub status: u16,
    pub nlos: u8,
    pub aoa_azimuth_fom: u8,
    pub aoa_elevation_fom: u8,
    pub aoa_dest_azimuth_fom: u8,
    pub aoa_dest_elevation_fom: u8,
    pub orientation: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_uwb_s"][::core::mem::size_of::<sensor_uwb_s>() - 64usize];
    ["Alignment of sensor_uwb_s"][::core::mem::align_of::<sensor_uwb_s>() - 8usize];
    ["Offset of field: sensor_uwb_s::timestamp"]
        [::core::mem::offset_of!(sensor_uwb_s, timestamp) - 0usize];
    ["Offset of field: sensor_uwb_s::sessionid"]
        [::core::mem::offset_of!(sensor_uwb_s, sessionid) - 8usize];
    ["Offset of field: sensor_uwb_s::time_offset"]
        [::core::mem::offset_of!(sensor_uwb_s, time_offset) - 12usize];
    ["Offset of field: sensor_uwb_s::counter"]
        [::core::mem::offset_of!(sensor_uwb_s, counter) - 16usize];
    ["Offset of field: sensor_uwb_s::distance"]
        [::core::mem::offset_of!(sensor_uwb_s, distance) - 20usize];
    ["Offset of field: sensor_uwb_s::aoa_azimuth_dev"]
        [::core::mem::offset_of!(sensor_uwb_s, aoa_azimuth_dev) - 24usize];
    ["Offset of field: sensor_uwb_s::aoa_elevation_dev"]
        [::core::mem::offset_of!(sensor_uwb_s, aoa_elevation_dev) - 28usize];
    ["Offset of field: sensor_uwb_s::aoa_azimuth_resp"]
        [::core::mem::offset_of!(sensor_uwb_s, aoa_azimuth_resp) - 32usize];
    ["Offset of field: sensor_uwb_s::aoa_elevation_resp"]
        [::core::mem::offset_of!(sensor_uwb_s, aoa_elevation_resp) - 36usize];
    ["Offset of field: sensor_uwb_s::offset_x"]
        [::core::mem::offset_of!(sensor_uwb_s, offset_x) - 40usize];
    ["Offset of field: sensor_uwb_s::offset_y"]
        [::core::mem::offset_of!(sensor_uwb_s, offset_y) - 44usize];
    ["Offset of field: sensor_uwb_s::offset_z"]
        [::core::mem::offset_of!(sensor_uwb_s, offset_z) - 48usize];
    ["Offset of field: sensor_uwb_s::mac"][::core::mem::offset_of!(sensor_uwb_s, mac) - 52usize];
    ["Offset of field: sensor_uwb_s::mac_dest"]
        [::core::mem::offset_of!(sensor_uwb_s, mac_dest) - 54usize];
    ["Offset of field: sensor_uwb_s::status"]
        [::core::mem::offset_of!(sensor_uwb_s, status) - 56usize];
    ["Offset of field: sensor_uwb_s::nlos"][::core::mem::offset_of!(sensor_uwb_s, nlos) - 58usize];
    ["Offset of field: sensor_uwb_s::aoa_azimuth_fom"]
        [::core::mem::offset_of!(sensor_uwb_s, aoa_azimuth_fom) - 59usize];
    ["Offset of field: sensor_uwb_s::aoa_elevation_fom"]
        [::core::mem::offset_of!(sensor_uwb_s, aoa_elevation_fom) - 60usize];
    ["Offset of field: sensor_uwb_s::aoa_dest_azimuth_fom"]
        [::core::mem::offset_of!(sensor_uwb_s, aoa_dest_azimuth_fom) - 61usize];
    ["Offset of field: sensor_uwb_s::aoa_dest_elevation_fom"]
        [::core::mem::offset_of!(sensor_uwb_s, aoa_dest_elevation_fom) - 62usize];
    ["Offset of field: sensor_uwb_s::orientation"]
        [::core::mem::offset_of!(sensor_uwb_s, orientation) - 63usize];
};
unsafe extern "C" {
    pub static __orb_sensor_uwb: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gpio_config_s {
    pub timestamp: u64,
    pub device_id: u32,
    pub mask: u32,
    pub state: u32,
    pub config: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpio_config_s"][::core::mem::size_of::<gpio_config_s>() - 24usize];
    ["Alignment of gpio_config_s"][::core::mem::align_of::<gpio_config_s>() - 8usize];
    ["Offset of field: gpio_config_s::timestamp"]
        [::core::mem::offset_of!(gpio_config_s, timestamp) - 0usize];
    ["Offset of field: gpio_config_s::device_id"]
        [::core::mem::offset_of!(gpio_config_s, device_id) - 8usize];
    ["Offset of field: gpio_config_s::mask"]
        [::core::mem::offset_of!(gpio_config_s, mask) - 12usize];
    ["Offset of field: gpio_config_s::state"]
        [::core::mem::offset_of!(gpio_config_s, state) - 16usize];
    ["Offset of field: gpio_config_s::config"]
        [::core::mem::offset_of!(gpio_config_s, config) - 20usize];
};
unsafe extern "C" {
    pub static __orb_gpio_config: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gimbal_manager_information_s {
    pub timestamp: u64,
    pub cap_flags: u32,
    pub roll_min: f32,
    pub roll_max: f32,
    pub pitch_min: f32,
    pub pitch_max: f32,
    pub yaw_min: f32,
    pub yaw_max: f32,
    pub gimbal_device_id: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gimbal_manager_information_s"]
        [::core::mem::size_of::<gimbal_manager_information_s>() - 40usize];
    ["Alignment of gimbal_manager_information_s"]
        [::core::mem::align_of::<gimbal_manager_information_s>() - 8usize];
    ["Offset of field: gimbal_manager_information_s::timestamp"]
        [::core::mem::offset_of!(gimbal_manager_information_s, timestamp) - 0usize];
    ["Offset of field: gimbal_manager_information_s::cap_flags"]
        [::core::mem::offset_of!(gimbal_manager_information_s, cap_flags) - 8usize];
    ["Offset of field: gimbal_manager_information_s::roll_min"]
        [::core::mem::offset_of!(gimbal_manager_information_s, roll_min) - 12usize];
    ["Offset of field: gimbal_manager_information_s::roll_max"]
        [::core::mem::offset_of!(gimbal_manager_information_s, roll_max) - 16usize];
    ["Offset of field: gimbal_manager_information_s::pitch_min"]
        [::core::mem::offset_of!(gimbal_manager_information_s, pitch_min) - 20usize];
    ["Offset of field: gimbal_manager_information_s::pitch_max"]
        [::core::mem::offset_of!(gimbal_manager_information_s, pitch_max) - 24usize];
    ["Offset of field: gimbal_manager_information_s::yaw_min"]
        [::core::mem::offset_of!(gimbal_manager_information_s, yaw_min) - 28usize];
    ["Offset of field: gimbal_manager_information_s::yaw_max"]
        [::core::mem::offset_of!(gimbal_manager_information_s, yaw_max) - 32usize];
    ["Offset of field: gimbal_manager_information_s::gimbal_device_id"]
        [::core::mem::offset_of!(gimbal_manager_information_s, gimbal_device_id) - 36usize];
    ["Offset of field: gimbal_manager_information_s::_padding0"]
        [::core::mem::offset_of!(gimbal_manager_information_s, _padding0) - 37usize];
};
unsafe extern "C" {
    pub static __orb_gimbal_manager_information: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct estimator_event_flags_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub information_event_changes: u32,
    pub gps_checks_passed: bool,
    pub reset_vel_to_gps: bool,
    pub reset_vel_to_flow: bool,
    pub reset_vel_to_vision: bool,
    pub reset_vel_to_zero: bool,
    pub reset_pos_to_last_known: bool,
    pub reset_pos_to_gps: bool,
    pub reset_pos_to_vision: bool,
    pub starting_gps_fusion: bool,
    pub starting_vision_pos_fusion: bool,
    pub starting_vision_vel_fusion: bool,
    pub starting_vision_yaw_fusion: bool,
    pub yaw_aligned_to_imu_gps: bool,
    pub reset_hgt_to_baro: bool,
    pub reset_hgt_to_gps: bool,
    pub reset_hgt_to_rng: bool,
    pub reset_hgt_to_ev: bool,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of estimator_event_flags_s"]
        [::core::mem::size_of::<estimator_event_flags_s>() - 40usize];
    ["Alignment of estimator_event_flags_s"]
        [::core::mem::align_of::<estimator_event_flags_s>() - 8usize];
    ["Offset of field: estimator_event_flags_s::timestamp"]
        [::core::mem::offset_of!(estimator_event_flags_s, timestamp) - 0usize];
    ["Offset of field: estimator_event_flags_s::timestamp_sample"]
        [::core::mem::offset_of!(estimator_event_flags_s, timestamp_sample) - 8usize];
    ["Offset of field: estimator_event_flags_s::information_event_changes"]
        [::core::mem::offset_of!(estimator_event_flags_s, information_event_changes) - 16usize];
    ["Offset of field: estimator_event_flags_s::gps_checks_passed"]
        [::core::mem::offset_of!(estimator_event_flags_s, gps_checks_passed) - 20usize];
    ["Offset of field: estimator_event_flags_s::reset_vel_to_gps"]
        [::core::mem::offset_of!(estimator_event_flags_s, reset_vel_to_gps) - 21usize];
    ["Offset of field: estimator_event_flags_s::reset_vel_to_flow"]
        [::core::mem::offset_of!(estimator_event_flags_s, reset_vel_to_flow) - 22usize];
    ["Offset of field: estimator_event_flags_s::reset_vel_to_vision"]
        [::core::mem::offset_of!(estimator_event_flags_s, reset_vel_to_vision) - 23usize];
    ["Offset of field: estimator_event_flags_s::reset_vel_to_zero"]
        [::core::mem::offset_of!(estimator_event_flags_s, reset_vel_to_zero) - 24usize];
    ["Offset of field: estimator_event_flags_s::reset_pos_to_last_known"]
        [::core::mem::offset_of!(estimator_event_flags_s, reset_pos_to_last_known) - 25usize];
    ["Offset of field: estimator_event_flags_s::reset_pos_to_gps"]
        [::core::mem::offset_of!(estimator_event_flags_s, reset_pos_to_gps) - 26usize];
    ["Offset of field: estimator_event_flags_s::reset_pos_to_vision"]
        [::core::mem::offset_of!(estimator_event_flags_s, reset_pos_to_vision) - 27usize];
    ["Offset of field: estimator_event_flags_s::starting_gps_fusion"]
        [::core::mem::offset_of!(estimator_event_flags_s, starting_gps_fusion) - 28usize];
    ["Offset of field: estimator_event_flags_s::starting_vision_pos_fusion"]
        [::core::mem::offset_of!(estimator_event_flags_s, starting_vision_pos_fusion) - 29usize];
    ["Offset of field: estimator_event_flags_s::starting_vision_vel_fusion"]
        [::core::mem::offset_of!(estimator_event_flags_s, starting_vision_vel_fusion) - 30usize];
    ["Offset of field: estimator_event_flags_s::starting_vision_yaw_fusion"]
        [::core::mem::offset_of!(estimator_event_flags_s, starting_vision_yaw_fusion) - 31usize];
    ["Offset of field: estimator_event_flags_s::yaw_aligned_to_imu_gps"]
        [::core::mem::offset_of!(estimator_event_flags_s, yaw_aligned_to_imu_gps) - 32usize];
    ["Offset of field: estimator_event_flags_s::reset_hgt_to_baro"]
        [::core::mem::offset_of!(estimator_event_flags_s, reset_hgt_to_baro) - 33usize];
    ["Offset of field: estimator_event_flags_s::reset_hgt_to_gps"]
        [::core::mem::offset_of!(estimator_event_flags_s, reset_hgt_to_gps) - 34usize];
    ["Offset of field: estimator_event_flags_s::reset_hgt_to_rng"]
        [::core::mem::offset_of!(estimator_event_flags_s, reset_hgt_to_rng) - 35usize];
    ["Offset of field: estimator_event_flags_s::reset_hgt_to_ev"]
        [::core::mem::offset_of!(estimator_event_flags_s, reset_hgt_to_ev) - 36usize];
    ["Offset of field: estimator_event_flags_s::_padding0"]
        [::core::mem::offset_of!(estimator_event_flags_s, _padding0) - 37usize];
};
unsafe extern "C" {
    pub static __orb_estimator_event_flags: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct logger_status_s {
    pub timestamp: u64,
    pub total_written_kb: f32,
    pub write_rate_kb_s: f32,
    pub dropouts: u32,
    pub message_gaps: u32,
    pub buffer_used_bytes: u32,
    pub buffer_size_bytes: u32,
    pub type_: u8,
    pub backend: u8,
    pub is_logging: bool,
    pub num_messages: u8,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of logger_status_s"][::core::mem::size_of::<logger_status_s>() - 40usize];
    ["Alignment of logger_status_s"][::core::mem::align_of::<logger_status_s>() - 8usize];
    ["Offset of field: logger_status_s::timestamp"]
        [::core::mem::offset_of!(logger_status_s, timestamp) - 0usize];
    ["Offset of field: logger_status_s::total_written_kb"]
        [::core::mem::offset_of!(logger_status_s, total_written_kb) - 8usize];
    ["Offset of field: logger_status_s::write_rate_kb_s"]
        [::core::mem::offset_of!(logger_status_s, write_rate_kb_s) - 12usize];
    ["Offset of field: logger_status_s::dropouts"]
        [::core::mem::offset_of!(logger_status_s, dropouts) - 16usize];
    ["Offset of field: logger_status_s::message_gaps"]
        [::core::mem::offset_of!(logger_status_s, message_gaps) - 20usize];
    ["Offset of field: logger_status_s::buffer_used_bytes"]
        [::core::mem::offset_of!(logger_status_s, buffer_used_bytes) - 24usize];
    ["Offset of field: logger_status_s::buffer_size_bytes"]
        [::core::mem::offset_of!(logger_status_s, buffer_size_bytes) - 28usize];
    ["Offset of field: logger_status_s::type_"]
        [::core::mem::offset_of!(logger_status_s, type_) - 32usize];
    ["Offset of field: logger_status_s::backend"]
        [::core::mem::offset_of!(logger_status_s, backend) - 33usize];
    ["Offset of field: logger_status_s::is_logging"]
        [::core::mem::offset_of!(logger_status_s, is_logging) - 34usize];
    ["Offset of field: logger_status_s::num_messages"]
        [::core::mem::offset_of!(logger_status_s, num_messages) - 35usize];
    ["Offset of field: logger_status_s::_padding0"]
        [::core::mem::offset_of!(logger_status_s, _padding0) - 36usize];
};
unsafe extern "C" {
    pub static __orb_logger_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mode_completed_s {
    pub timestamp: u64,
    pub result: u8,
    pub nav_state: u8,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mode_completed_s"][::core::mem::size_of::<mode_completed_s>() - 16usize];
    ["Alignment of mode_completed_s"][::core::mem::align_of::<mode_completed_s>() - 8usize];
    ["Offset of field: mode_completed_s::timestamp"]
        [::core::mem::offset_of!(mode_completed_s, timestamp) - 0usize];
    ["Offset of field: mode_completed_s::result"]
        [::core::mem::offset_of!(mode_completed_s, result) - 8usize];
    ["Offset of field: mode_completed_s::nav_state"]
        [::core::mem::offset_of!(mode_completed_s, nav_state) - 9usize];
    ["Offset of field: mode_completed_s::_padding0"]
        [::core::mem::offset_of!(mode_completed_s, _padding0) - 10usize];
};
unsafe extern "C" {
    pub static __orb_mode_completed: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct position_controller_status_s {
    pub timestamp: u64,
    pub nav_roll: f32,
    pub nav_pitch: f32,
    pub nav_bearing: f32,
    pub target_bearing: f32,
    pub xtrack_error: f32,
    pub wp_dist: f32,
    pub acceptance_radius: f32,
    pub type_: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of position_controller_status_s"]
        [::core::mem::size_of::<position_controller_status_s>() - 40usize];
    ["Alignment of position_controller_status_s"]
        [::core::mem::align_of::<position_controller_status_s>() - 8usize];
    ["Offset of field: position_controller_status_s::timestamp"]
        [::core::mem::offset_of!(position_controller_status_s, timestamp) - 0usize];
    ["Offset of field: position_controller_status_s::nav_roll"]
        [::core::mem::offset_of!(position_controller_status_s, nav_roll) - 8usize];
    ["Offset of field: position_controller_status_s::nav_pitch"]
        [::core::mem::offset_of!(position_controller_status_s, nav_pitch) - 12usize];
    ["Offset of field: position_controller_status_s::nav_bearing"]
        [::core::mem::offset_of!(position_controller_status_s, nav_bearing) - 16usize];
    ["Offset of field: position_controller_status_s::target_bearing"]
        [::core::mem::offset_of!(position_controller_status_s, target_bearing) - 20usize];
    ["Offset of field: position_controller_status_s::xtrack_error"]
        [::core::mem::offset_of!(position_controller_status_s, xtrack_error) - 24usize];
    ["Offset of field: position_controller_status_s::wp_dist"]
        [::core::mem::offset_of!(position_controller_status_s, wp_dist) - 28usize];
    ["Offset of field: position_controller_status_s::acceptance_radius"]
        [::core::mem::offset_of!(position_controller_status_s, acceptance_radius) - 32usize];
    ["Offset of field: position_controller_status_s::type_"]
        [::core::mem::offset_of!(position_controller_status_s, type_) - 36usize];
    ["Offset of field: position_controller_status_s::_padding0"]
        [::core::mem::offset_of!(position_controller_status_s, _padding0) - 37usize];
};
unsafe extern "C" {
    pub static __orb_position_controller_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wind_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub windspeed_north: f32,
    pub windspeed_east: f32,
    pub variance_north: f32,
    pub variance_east: f32,
    pub tas_innov: f32,
    pub tas_innov_var: f32,
    pub beta_innov: f32,
    pub beta_innov_var: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wind_s"][::core::mem::size_of::<wind_s>() - 48usize];
    ["Alignment of wind_s"][::core::mem::align_of::<wind_s>() - 8usize];
    ["Offset of field: wind_s::timestamp"][::core::mem::offset_of!(wind_s, timestamp) - 0usize];
    ["Offset of field: wind_s::timestamp_sample"]
        [::core::mem::offset_of!(wind_s, timestamp_sample) - 8usize];
    ["Offset of field: wind_s::windspeed_north"]
        [::core::mem::offset_of!(wind_s, windspeed_north) - 16usize];
    ["Offset of field: wind_s::windspeed_east"]
        [::core::mem::offset_of!(wind_s, windspeed_east) - 20usize];
    ["Offset of field: wind_s::variance_north"]
        [::core::mem::offset_of!(wind_s, variance_north) - 24usize];
    ["Offset of field: wind_s::variance_east"]
        [::core::mem::offset_of!(wind_s, variance_east) - 28usize];
    ["Offset of field: wind_s::tas_innov"][::core::mem::offset_of!(wind_s, tas_innov) - 32usize];
    ["Offset of field: wind_s::tas_innov_var"]
        [::core::mem::offset_of!(wind_s, tas_innov_var) - 36usize];
    ["Offset of field: wind_s::beta_innov"][::core::mem::offset_of!(wind_s, beta_innov) - 40usize];
    ["Offset of field: wind_s::beta_innov_var"]
        [::core::mem::offset_of!(wind_s, beta_innov_var) - 44usize];
};
unsafe extern "C" {
    pub static __orb_wind: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_wind: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct autotune_attitude_control_status_s {
    pub timestamp: u64,
    pub coeff: [f32; 5usize],
    pub coeff_var: [f32; 5usize],
    pub fitness: f32,
    pub innov: f32,
    pub dt_model: f32,
    pub kc: f32,
    pub ki: f32,
    pub kd: f32,
    pub kff: f32,
    pub att_p: f32,
    pub rate_sp: [f32; 3usize],
    pub u_filt: f32,
    pub y_filt: f32,
    pub state: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of autotune_attitude_control_status_s"]
        [::core::mem::size_of::<autotune_attitude_control_status_s>() - 104usize];
    ["Alignment of autotune_attitude_control_status_s"]
        [::core::mem::align_of::<autotune_attitude_control_status_s>() - 8usize];
    ["Offset of field: autotune_attitude_control_status_s::timestamp"]
        [::core::mem::offset_of!(autotune_attitude_control_status_s, timestamp) - 0usize];
    ["Offset of field: autotune_attitude_control_status_s::coeff"]
        [::core::mem::offset_of!(autotune_attitude_control_status_s, coeff) - 8usize];
    ["Offset of field: autotune_attitude_control_status_s::coeff_var"]
        [::core::mem::offset_of!(autotune_attitude_control_status_s, coeff_var) - 28usize];
    ["Offset of field: autotune_attitude_control_status_s::fitness"]
        [::core::mem::offset_of!(autotune_attitude_control_status_s, fitness) - 48usize];
    ["Offset of field: autotune_attitude_control_status_s::innov"]
        [::core::mem::offset_of!(autotune_attitude_control_status_s, innov) - 52usize];
    ["Offset of field: autotune_attitude_control_status_s::dt_model"]
        [::core::mem::offset_of!(autotune_attitude_control_status_s, dt_model) - 56usize];
    ["Offset of field: autotune_attitude_control_status_s::kc"]
        [::core::mem::offset_of!(autotune_attitude_control_status_s, kc) - 60usize];
    ["Offset of field: autotune_attitude_control_status_s::ki"]
        [::core::mem::offset_of!(autotune_attitude_control_status_s, ki) - 64usize];
    ["Offset of field: autotune_attitude_control_status_s::kd"]
        [::core::mem::offset_of!(autotune_attitude_control_status_s, kd) - 68usize];
    ["Offset of field: autotune_attitude_control_status_s::kff"]
        [::core::mem::offset_of!(autotune_attitude_control_status_s, kff) - 72usize];
    ["Offset of field: autotune_attitude_control_status_s::att_p"]
        [::core::mem::offset_of!(autotune_attitude_control_status_s, att_p) - 76usize];
    ["Offset of field: autotune_attitude_control_status_s::rate_sp"]
        [::core::mem::offset_of!(autotune_attitude_control_status_s, rate_sp) - 80usize];
    ["Offset of field: autotune_attitude_control_status_s::u_filt"]
        [::core::mem::offset_of!(autotune_attitude_control_status_s, u_filt) - 92usize];
    ["Offset of field: autotune_attitude_control_status_s::y_filt"]
        [::core::mem::offset_of!(autotune_attitude_control_status_s, y_filt) - 96usize];
    ["Offset of field: autotune_attitude_control_status_s::state"]
        [::core::mem::offset_of!(autotune_attitude_control_status_s, state) - 100usize];
    ["Offset of field: autotune_attitude_control_status_s::_padding0"]
        [::core::mem::offset_of!(autotune_attitude_control_status_s, _padding0) - 101usize];
};
unsafe extern "C" {
    pub static __orb_autotune_attitude_control_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_gyro_fft_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub device_id: u32,
    pub sensor_sample_rate_hz: f32,
    pub resolution_hz: f32,
    pub peak_frequencies_x: [f32; 3usize],
    pub peak_frequencies_y: [f32; 3usize],
    pub peak_frequencies_z: [f32; 3usize],
    pub peak_snr_x: [f32; 3usize],
    pub peak_snr_y: [f32; 3usize],
    pub peak_snr_z: [f32; 3usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_gyro_fft_s"][::core::mem::size_of::<sensor_gyro_fft_s>() - 104usize];
    ["Alignment of sensor_gyro_fft_s"][::core::mem::align_of::<sensor_gyro_fft_s>() - 8usize];
    ["Offset of field: sensor_gyro_fft_s::timestamp"]
        [::core::mem::offset_of!(sensor_gyro_fft_s, timestamp) - 0usize];
    ["Offset of field: sensor_gyro_fft_s::timestamp_sample"]
        [::core::mem::offset_of!(sensor_gyro_fft_s, timestamp_sample) - 8usize];
    ["Offset of field: sensor_gyro_fft_s::device_id"]
        [::core::mem::offset_of!(sensor_gyro_fft_s, device_id) - 16usize];
    ["Offset of field: sensor_gyro_fft_s::sensor_sample_rate_hz"]
        [::core::mem::offset_of!(sensor_gyro_fft_s, sensor_sample_rate_hz) - 20usize];
    ["Offset of field: sensor_gyro_fft_s::resolution_hz"]
        [::core::mem::offset_of!(sensor_gyro_fft_s, resolution_hz) - 24usize];
    ["Offset of field: sensor_gyro_fft_s::peak_frequencies_x"]
        [::core::mem::offset_of!(sensor_gyro_fft_s, peak_frequencies_x) - 28usize];
    ["Offset of field: sensor_gyro_fft_s::peak_frequencies_y"]
        [::core::mem::offset_of!(sensor_gyro_fft_s, peak_frequencies_y) - 40usize];
    ["Offset of field: sensor_gyro_fft_s::peak_frequencies_z"]
        [::core::mem::offset_of!(sensor_gyro_fft_s, peak_frequencies_z) - 52usize];
    ["Offset of field: sensor_gyro_fft_s::peak_snr_x"]
        [::core::mem::offset_of!(sensor_gyro_fft_s, peak_snr_x) - 64usize];
    ["Offset of field: sensor_gyro_fft_s::peak_snr_y"]
        [::core::mem::offset_of!(sensor_gyro_fft_s, peak_snr_y) - 76usize];
    ["Offset of field: sensor_gyro_fft_s::peak_snr_z"]
        [::core::mem::offset_of!(sensor_gyro_fft_s, peak_snr_z) - 88usize];
    ["Offset of field: sensor_gyro_fft_s::_padding0"]
        [::core::mem::offset_of!(sensor_gyro_fft_s, _padding0) - 100usize];
};
unsafe extern "C" {
    pub static __orb_sensor_gyro_fft: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ekf2_timestamps_s {
    pub timestamp: u64,
    pub airspeed_timestamp_rel: i16,
    pub airspeed_validated_timestamp_rel: i16,
    pub distance_sensor_timestamp_rel: i16,
    pub optical_flow_timestamp_rel: i16,
    pub vehicle_air_data_timestamp_rel: i16,
    pub vehicle_magnetometer_timestamp_rel: i16,
    pub visual_odometry_timestamp_rel: i16,
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ekf2_timestamps_s"][::core::mem::size_of::<ekf2_timestamps_s>() - 24usize];
    ["Alignment of ekf2_timestamps_s"][::core::mem::align_of::<ekf2_timestamps_s>() - 8usize];
    ["Offset of field: ekf2_timestamps_s::timestamp"]
        [::core::mem::offset_of!(ekf2_timestamps_s, timestamp) - 0usize];
    ["Offset of field: ekf2_timestamps_s::airspeed_timestamp_rel"]
        [::core::mem::offset_of!(ekf2_timestamps_s, airspeed_timestamp_rel) - 8usize];
    ["Offset of field: ekf2_timestamps_s::airspeed_validated_timestamp_rel"]
        [::core::mem::offset_of!(ekf2_timestamps_s, airspeed_validated_timestamp_rel) - 10usize];
    ["Offset of field: ekf2_timestamps_s::distance_sensor_timestamp_rel"]
        [::core::mem::offset_of!(ekf2_timestamps_s, distance_sensor_timestamp_rel) - 12usize];
    ["Offset of field: ekf2_timestamps_s::optical_flow_timestamp_rel"]
        [::core::mem::offset_of!(ekf2_timestamps_s, optical_flow_timestamp_rel) - 14usize];
    ["Offset of field: ekf2_timestamps_s::vehicle_air_data_timestamp_rel"]
        [::core::mem::offset_of!(ekf2_timestamps_s, vehicle_air_data_timestamp_rel) - 16usize];
    ["Offset of field: ekf2_timestamps_s::vehicle_magnetometer_timestamp_rel"]
        [::core::mem::offset_of!(ekf2_timestamps_s, vehicle_magnetometer_timestamp_rel) - 18usize];
    ["Offset of field: ekf2_timestamps_s::visual_odometry_timestamp_rel"]
        [::core::mem::offset_of!(ekf2_timestamps_s, visual_odometry_timestamp_rel) - 20usize];
    ["Offset of field: ekf2_timestamps_s::_padding0"]
        [::core::mem::offset_of!(ekf2_timestamps_s, _padding0) - 22usize];
};
unsafe extern "C" {
    pub static __orb_ekf2_timestamps: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpuload_s {
    pub timestamp: u64,
    pub load: f32,
    pub ram_usage: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpuload_s"][::core::mem::size_of::<cpuload_s>() - 16usize];
    ["Alignment of cpuload_s"][::core::mem::align_of::<cpuload_s>() - 8usize];
    ["Offset of field: cpuload_s::timestamp"]
        [::core::mem::offset_of!(cpuload_s, timestamp) - 0usize];
    ["Offset of field: cpuload_s::load"][::core::mem::offset_of!(cpuload_s, load) - 8usize];
    ["Offset of field: cpuload_s::ram_usage"]
        [::core::mem::offset_of!(cpuload_s, ram_usage) - 12usize];
};
unsafe extern "C" {
    pub static __orb_cpuload: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct camera_trigger_s {
    pub timestamp: u64,
    pub timestamp_utc: u64,
    pub seq: u32,
    pub feedback: bool,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of camera_trigger_s"][::core::mem::size_of::<camera_trigger_s>() - 24usize];
    ["Alignment of camera_trigger_s"][::core::mem::align_of::<camera_trigger_s>() - 8usize];
    ["Offset of field: camera_trigger_s::timestamp"]
        [::core::mem::offset_of!(camera_trigger_s, timestamp) - 0usize];
    ["Offset of field: camera_trigger_s::timestamp_utc"]
        [::core::mem::offset_of!(camera_trigger_s, timestamp_utc) - 8usize];
    ["Offset of field: camera_trigger_s::seq"]
        [::core::mem::offset_of!(camera_trigger_s, seq) - 16usize];
    ["Offset of field: camera_trigger_s::feedback"]
        [::core::mem::offset_of!(camera_trigger_s, feedback) - 20usize];
    ["Offset of field: camera_trigger_s::_padding0"]
        [::core::mem::offset_of!(camera_trigger_s, _padding0) - 21usize];
};
unsafe extern "C" {
    pub static __orb_camera_trigger: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct follow_target_status_s {
    pub timestamp: u64,
    pub tracked_target_course: f32,
    pub follow_angle: f32,
    pub orbit_angle_setpoint: f32,
    pub angular_rate_setpoint: f32,
    pub desired_position_raw: [f32; 3usize],
    pub gimbal_pitch: f32,
    pub in_emergency_ascent: bool,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of follow_target_status_s"][::core::mem::size_of::<follow_target_status_s>() - 48usize];
    ["Alignment of follow_target_status_s"]
        [::core::mem::align_of::<follow_target_status_s>() - 8usize];
    ["Offset of field: follow_target_status_s::timestamp"]
        [::core::mem::offset_of!(follow_target_status_s, timestamp) - 0usize];
    ["Offset of field: follow_target_status_s::tracked_target_course"]
        [::core::mem::offset_of!(follow_target_status_s, tracked_target_course) - 8usize];
    ["Offset of field: follow_target_status_s::follow_angle"]
        [::core::mem::offset_of!(follow_target_status_s, follow_angle) - 12usize];
    ["Offset of field: follow_target_status_s::orbit_angle_setpoint"]
        [::core::mem::offset_of!(follow_target_status_s, orbit_angle_setpoint) - 16usize];
    ["Offset of field: follow_target_status_s::angular_rate_setpoint"]
        [::core::mem::offset_of!(follow_target_status_s, angular_rate_setpoint) - 20usize];
    ["Offset of field: follow_target_status_s::desired_position_raw"]
        [::core::mem::offset_of!(follow_target_status_s, desired_position_raw) - 24usize];
    ["Offset of field: follow_target_status_s::gimbal_pitch"]
        [::core::mem::offset_of!(follow_target_status_s, gimbal_pitch) - 36usize];
    ["Offset of field: follow_target_status_s::in_emergency_ascent"]
        [::core::mem::offset_of!(follow_target_status_s, in_emergency_ascent) - 40usize];
    ["Offset of field: follow_target_status_s::_padding0"]
        [::core::mem::offset_of!(follow_target_status_s, _padding0) - 41usize];
};
unsafe extern "C" {
    pub static __orb_follow_target_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gimbal_device_set_attitude_s {
    pub timestamp: u64,
    pub q: [f32; 4usize],
    pub angular_velocity_x: f32,
    pub angular_velocity_y: f32,
    pub angular_velocity_z: f32,
    pub flags: u16,
    pub target_system: u8,
    pub target_component: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gimbal_device_set_attitude_s"]
        [::core::mem::size_of::<gimbal_device_set_attitude_s>() - 40usize];
    ["Alignment of gimbal_device_set_attitude_s"]
        [::core::mem::align_of::<gimbal_device_set_attitude_s>() - 8usize];
    ["Offset of field: gimbal_device_set_attitude_s::timestamp"]
        [::core::mem::offset_of!(gimbal_device_set_attitude_s, timestamp) - 0usize];
    ["Offset of field: gimbal_device_set_attitude_s::q"]
        [::core::mem::offset_of!(gimbal_device_set_attitude_s, q) - 8usize];
    ["Offset of field: gimbal_device_set_attitude_s::angular_velocity_x"]
        [::core::mem::offset_of!(gimbal_device_set_attitude_s, angular_velocity_x) - 24usize];
    ["Offset of field: gimbal_device_set_attitude_s::angular_velocity_y"]
        [::core::mem::offset_of!(gimbal_device_set_attitude_s, angular_velocity_y) - 28usize];
    ["Offset of field: gimbal_device_set_attitude_s::angular_velocity_z"]
        [::core::mem::offset_of!(gimbal_device_set_attitude_s, angular_velocity_z) - 32usize];
    ["Offset of field: gimbal_device_set_attitude_s::flags"]
        [::core::mem::offset_of!(gimbal_device_set_attitude_s, flags) - 36usize];
    ["Offset of field: gimbal_device_set_attitude_s::target_system"]
        [::core::mem::offset_of!(gimbal_device_set_attitude_s, target_system) - 38usize];
    ["Offset of field: gimbal_device_set_attitude_s::target_component"]
        [::core::mem::offset_of!(gimbal_device_set_attitude_s, target_component) - 39usize];
};
unsafe extern "C" {
    pub static __orb_gimbal_device_set_attitude: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unregister_ext_component_s {
    pub timestamp: u64,
    pub name: [::core::ffi::c_char; 25usize],
    pub arming_check_id: i8,
    pub mode_id: i8,
    pub mode_executor_id: i8,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of unregister_ext_component_s"]
        [::core::mem::size_of::<unregister_ext_component_s>() - 40usize];
    ["Alignment of unregister_ext_component_s"]
        [::core::mem::align_of::<unregister_ext_component_s>() - 8usize];
    ["Offset of field: unregister_ext_component_s::timestamp"]
        [::core::mem::offset_of!(unregister_ext_component_s, timestamp) - 0usize];
    ["Offset of field: unregister_ext_component_s::name"]
        [::core::mem::offset_of!(unregister_ext_component_s, name) - 8usize];
    ["Offset of field: unregister_ext_component_s::arming_check_id"]
        [::core::mem::offset_of!(unregister_ext_component_s, arming_check_id) - 33usize];
    ["Offset of field: unregister_ext_component_s::mode_id"]
        [::core::mem::offset_of!(unregister_ext_component_s, mode_id) - 34usize];
    ["Offset of field: unregister_ext_component_s::mode_executor_id"]
        [::core::mem::offset_of!(unregister_ext_component_s, mode_executor_id) - 35usize];
    ["Offset of field: unregister_ext_component_s::_padding0"]
        [::core::mem::offset_of!(unregister_ext_component_s, _padding0) - 36usize];
};
unsafe extern "C" {
    pub static __orb_unregister_ext_component: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct goto_setpoint_s {
    pub timestamp: u64,
    pub position: [f32; 3usize],
    pub heading: f32,
    pub max_horizontal_speed: f32,
    pub max_vertical_speed: f32,
    pub max_heading_rate: f32,
    pub flag_control_heading: bool,
    pub flag_set_max_horizontal_speed: bool,
    pub flag_set_max_vertical_speed: bool,
    pub flag_set_max_heading_rate: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of goto_setpoint_s"][::core::mem::size_of::<goto_setpoint_s>() - 40usize];
    ["Alignment of goto_setpoint_s"][::core::mem::align_of::<goto_setpoint_s>() - 8usize];
    ["Offset of field: goto_setpoint_s::timestamp"]
        [::core::mem::offset_of!(goto_setpoint_s, timestamp) - 0usize];
    ["Offset of field: goto_setpoint_s::position"]
        [::core::mem::offset_of!(goto_setpoint_s, position) - 8usize];
    ["Offset of field: goto_setpoint_s::heading"]
        [::core::mem::offset_of!(goto_setpoint_s, heading) - 20usize];
    ["Offset of field: goto_setpoint_s::max_horizontal_speed"]
        [::core::mem::offset_of!(goto_setpoint_s, max_horizontal_speed) - 24usize];
    ["Offset of field: goto_setpoint_s::max_vertical_speed"]
        [::core::mem::offset_of!(goto_setpoint_s, max_vertical_speed) - 28usize];
    ["Offset of field: goto_setpoint_s::max_heading_rate"]
        [::core::mem::offset_of!(goto_setpoint_s, max_heading_rate) - 32usize];
    ["Offset of field: goto_setpoint_s::flag_control_heading"]
        [::core::mem::offset_of!(goto_setpoint_s, flag_control_heading) - 36usize];
    ["Offset of field: goto_setpoint_s::flag_set_max_horizontal_speed"]
        [::core::mem::offset_of!(goto_setpoint_s, flag_set_max_horizontal_speed) - 37usize];
    ["Offset of field: goto_setpoint_s::flag_set_max_vertical_speed"]
        [::core::mem::offset_of!(goto_setpoint_s, flag_set_max_vertical_speed) - 38usize];
    ["Offset of field: goto_setpoint_s::flag_set_max_heading_rate"]
        [::core::mem::offset_of!(goto_setpoint_s, flag_set_max_heading_rate) - 39usize];
};
unsafe extern "C" {
    pub static __orb_goto_setpoint: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rover_rate_status_s {
    pub timestamp: u64,
    pub measured_yaw_rate: f32,
    pub adjusted_yaw_rate_setpoint: f32,
    pub pid_yaw_rate_integral: f32,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rover_rate_status_s"][::core::mem::size_of::<rover_rate_status_s>() - 24usize];
    ["Alignment of rover_rate_status_s"][::core::mem::align_of::<rover_rate_status_s>() - 8usize];
    ["Offset of field: rover_rate_status_s::timestamp"]
        [::core::mem::offset_of!(rover_rate_status_s, timestamp) - 0usize];
    ["Offset of field: rover_rate_status_s::measured_yaw_rate"]
        [::core::mem::offset_of!(rover_rate_status_s, measured_yaw_rate) - 8usize];
    ["Offset of field: rover_rate_status_s::adjusted_yaw_rate_setpoint"]
        [::core::mem::offset_of!(rover_rate_status_s, adjusted_yaw_rate_setpoint) - 12usize];
    ["Offset of field: rover_rate_status_s::pid_yaw_rate_integral"]
        [::core::mem::offset_of!(rover_rate_status_s, pid_yaw_rate_integral) - 16usize];
    ["Offset of field: rover_rate_status_s::_padding0"]
        [::core::mem::offset_of!(rover_rate_status_s, _padding0) - 20usize];
};
unsafe extern "C" {
    pub static __orb_rover_rate_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_angular_velocity_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub xyz: [f32; 3usize],
    pub xyz_derivative: [f32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_angular_velocity_s"]
        [::core::mem::size_of::<vehicle_angular_velocity_s>() - 40usize];
    ["Alignment of vehicle_angular_velocity_s"]
        [::core::mem::align_of::<vehicle_angular_velocity_s>() - 8usize];
    ["Offset of field: vehicle_angular_velocity_s::timestamp"]
        [::core::mem::offset_of!(vehicle_angular_velocity_s, timestamp) - 0usize];
    ["Offset of field: vehicle_angular_velocity_s::timestamp_sample"]
        [::core::mem::offset_of!(vehicle_angular_velocity_s, timestamp_sample) - 8usize];
    ["Offset of field: vehicle_angular_velocity_s::xyz"]
        [::core::mem::offset_of!(vehicle_angular_velocity_s, xyz) - 16usize];
    ["Offset of field: vehicle_angular_velocity_s::xyz_derivative"]
        [::core::mem::offset_of!(vehicle_angular_velocity_s, xyz_derivative) - 28usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_angular_velocity: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_vehicle_angular_velocity_groundtruth: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ping_s {
    pub timestamp: u64,
    pub ping_time: u64,
    pub ping_sequence: u32,
    pub dropped_packets: u32,
    pub rtt_ms: f32,
    pub system_id: u8,
    pub component_id: u8,
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ping_s"][::core::mem::size_of::<ping_s>() - 32usize];
    ["Alignment of ping_s"][::core::mem::align_of::<ping_s>() - 8usize];
    ["Offset of field: ping_s::timestamp"][::core::mem::offset_of!(ping_s, timestamp) - 0usize];
    ["Offset of field: ping_s::ping_time"][::core::mem::offset_of!(ping_s, ping_time) - 8usize];
    ["Offset of field: ping_s::ping_sequence"]
        [::core::mem::offset_of!(ping_s, ping_sequence) - 16usize];
    ["Offset of field: ping_s::dropped_packets"]
        [::core::mem::offset_of!(ping_s, dropped_packets) - 20usize];
    ["Offset of field: ping_s::rtt_ms"][::core::mem::offset_of!(ping_s, rtt_ms) - 24usize];
    ["Offset of field: ping_s::system_id"][::core::mem::offset_of!(ping_s, system_id) - 28usize];
    ["Offset of field: ping_s::component_id"]
        [::core::mem::offset_of!(ping_s, component_id) - 29usize];
    ["Offset of field: ping_s::_padding0"][::core::mem::offset_of!(ping_s, _padding0) - 30usize];
};
unsafe extern "C" {
    pub static __orb_ping: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct position_controller_landing_status_s {
    pub timestamp: u64,
    pub lateral_touchdown_offset: f32,
    pub flaring: bool,
    pub abort_status: u8,
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of position_controller_landing_status_s"]
        [::core::mem::size_of::<position_controller_landing_status_s>() - 16usize];
    ["Alignment of position_controller_landing_status_s"]
        [::core::mem::align_of::<position_controller_landing_status_s>() - 8usize];
    ["Offset of field: position_controller_landing_status_s::timestamp"]
        [::core::mem::offset_of!(position_controller_landing_status_s, timestamp) - 0usize];
    ["Offset of field: position_controller_landing_status_s::lateral_touchdown_offset"][::core::mem::offset_of!(
        position_controller_landing_status_s,
        lateral_touchdown_offset
    ) - 8usize];
    ["Offset of field: position_controller_landing_status_s::flaring"]
        [::core::mem::offset_of!(position_controller_landing_status_s, flaring) - 12usize];
    ["Offset of field: position_controller_landing_status_s::abort_status"]
        [::core::mem::offset_of!(position_controller_landing_status_s, abort_status) - 13usize];
    ["Offset of field: position_controller_landing_status_s::_padding0"]
        [::core::mem::offset_of!(position_controller_landing_status_s, _padding0) - 14usize];
};
unsafe extern "C" {
    pub static __orb_position_controller_landing_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct distance_sensor_s {
    pub timestamp: u64,
    pub device_id: u32,
    pub min_distance: f32,
    pub max_distance: f32,
    pub current_distance: f32,
    pub variance: f32,
    pub h_fov: f32,
    pub v_fov: f32,
    pub q: [f32; 4usize],
    pub signal_quality: i8,
    pub type_: u8,
    pub orientation: u8,
    pub mode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of distance_sensor_s"][::core::mem::size_of::<distance_sensor_s>() - 56usize];
    ["Alignment of distance_sensor_s"][::core::mem::align_of::<distance_sensor_s>() - 8usize];
    ["Offset of field: distance_sensor_s::timestamp"]
        [::core::mem::offset_of!(distance_sensor_s, timestamp) - 0usize];
    ["Offset of field: distance_sensor_s::device_id"]
        [::core::mem::offset_of!(distance_sensor_s, device_id) - 8usize];
    ["Offset of field: distance_sensor_s::min_distance"]
        [::core::mem::offset_of!(distance_sensor_s, min_distance) - 12usize];
    ["Offset of field: distance_sensor_s::max_distance"]
        [::core::mem::offset_of!(distance_sensor_s, max_distance) - 16usize];
    ["Offset of field: distance_sensor_s::current_distance"]
        [::core::mem::offset_of!(distance_sensor_s, current_distance) - 20usize];
    ["Offset of field: distance_sensor_s::variance"]
        [::core::mem::offset_of!(distance_sensor_s, variance) - 24usize];
    ["Offset of field: distance_sensor_s::h_fov"]
        [::core::mem::offset_of!(distance_sensor_s, h_fov) - 28usize];
    ["Offset of field: distance_sensor_s::v_fov"]
        [::core::mem::offset_of!(distance_sensor_s, v_fov) - 32usize];
    ["Offset of field: distance_sensor_s::q"]
        [::core::mem::offset_of!(distance_sensor_s, q) - 36usize];
    ["Offset of field: distance_sensor_s::signal_quality"]
        [::core::mem::offset_of!(distance_sensor_s, signal_quality) - 52usize];
    ["Offset of field: distance_sensor_s::type_"]
        [::core::mem::offset_of!(distance_sensor_s, type_) - 53usize];
    ["Offset of field: distance_sensor_s::orientation"]
        [::core::mem::offset_of!(distance_sensor_s, orientation) - 54usize];
    ["Offset of field: distance_sensor_s::mode"]
        [::core::mem::offset_of!(distance_sensor_s, mode) - 55usize];
};
unsafe extern "C" {
    pub static __orb_distance_sensor: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensors_status_imu_s {
    pub timestamp: u64,
    pub accel_device_id_primary: u32,
    pub accel_device_ids: [u32; 4usize],
    pub accel_inconsistency_m_s_s: [f32; 4usize],
    pub gyro_device_id_primary: u32,
    pub gyro_device_ids: [u32; 4usize],
    pub gyro_inconsistency_rad_s: [f32; 4usize],
    pub accel_healthy: [bool; 4usize],
    pub accel_priority: [u8; 4usize],
    pub gyro_healthy: [bool; 4usize],
    pub gyro_priority: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensors_status_imu_s"][::core::mem::size_of::<sensors_status_imu_s>() - 96usize];
    ["Alignment of sensors_status_imu_s"][::core::mem::align_of::<sensors_status_imu_s>() - 8usize];
    ["Offset of field: sensors_status_imu_s::timestamp"]
        [::core::mem::offset_of!(sensors_status_imu_s, timestamp) - 0usize];
    ["Offset of field: sensors_status_imu_s::accel_device_id_primary"]
        [::core::mem::offset_of!(sensors_status_imu_s, accel_device_id_primary) - 8usize];
    ["Offset of field: sensors_status_imu_s::accel_device_ids"]
        [::core::mem::offset_of!(sensors_status_imu_s, accel_device_ids) - 12usize];
    ["Offset of field: sensors_status_imu_s::accel_inconsistency_m_s_s"]
        [::core::mem::offset_of!(sensors_status_imu_s, accel_inconsistency_m_s_s) - 28usize];
    ["Offset of field: sensors_status_imu_s::gyro_device_id_primary"]
        [::core::mem::offset_of!(sensors_status_imu_s, gyro_device_id_primary) - 44usize];
    ["Offset of field: sensors_status_imu_s::gyro_device_ids"]
        [::core::mem::offset_of!(sensors_status_imu_s, gyro_device_ids) - 48usize];
    ["Offset of field: sensors_status_imu_s::gyro_inconsistency_rad_s"]
        [::core::mem::offset_of!(sensors_status_imu_s, gyro_inconsistency_rad_s) - 64usize];
    ["Offset of field: sensors_status_imu_s::accel_healthy"]
        [::core::mem::offset_of!(sensors_status_imu_s, accel_healthy) - 80usize];
    ["Offset of field: sensors_status_imu_s::accel_priority"]
        [::core::mem::offset_of!(sensors_status_imu_s, accel_priority) - 84usize];
    ["Offset of field: sensors_status_imu_s::gyro_healthy"]
        [::core::mem::offset_of!(sensors_status_imu_s, gyro_healthy) - 88usize];
    ["Offset of field: sensors_status_imu_s::gyro_priority"]
        [::core::mem::offset_of!(sensors_status_imu_s, gyro_priority) - 92usize];
};
unsafe extern "C" {
    pub static __orb_sensors_status_imu: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct actuator_servos_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub control: [f32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of actuator_servos_s"][::core::mem::size_of::<actuator_servos_s>() - 48usize];
    ["Alignment of actuator_servos_s"][::core::mem::align_of::<actuator_servos_s>() - 8usize];
    ["Offset of field: actuator_servos_s::timestamp"]
        [::core::mem::offset_of!(actuator_servos_s, timestamp) - 0usize];
    ["Offset of field: actuator_servos_s::timestamp_sample"]
        [::core::mem::offset_of!(actuator_servos_s, timestamp_sample) - 8usize];
    ["Offset of field: actuator_servos_s::control"]
        [::core::mem::offset_of!(actuator_servos_s, control) - 16usize];
};
unsafe extern "C" {
    pub static __orb_actuator_servos: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct failure_detector_status_s {
    pub timestamp: u64,
    pub imbalanced_prop_metric: f32,
    pub motor_failure_mask: u16,
    pub fd_roll: bool,
    pub fd_pitch: bool,
    pub fd_alt: bool,
    pub fd_ext: bool,
    pub fd_arm_escs: bool,
    pub fd_battery: bool,
    pub fd_imbalanced_prop: bool,
    pub fd_motor: bool,
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of failure_detector_status_s"]
        [::core::mem::size_of::<failure_detector_status_s>() - 24usize];
    ["Alignment of failure_detector_status_s"]
        [::core::mem::align_of::<failure_detector_status_s>() - 8usize];
    ["Offset of field: failure_detector_status_s::timestamp"]
        [::core::mem::offset_of!(failure_detector_status_s, timestamp) - 0usize];
    ["Offset of field: failure_detector_status_s::imbalanced_prop_metric"]
        [::core::mem::offset_of!(failure_detector_status_s, imbalanced_prop_metric) - 8usize];
    ["Offset of field: failure_detector_status_s::motor_failure_mask"]
        [::core::mem::offset_of!(failure_detector_status_s, motor_failure_mask) - 12usize];
    ["Offset of field: failure_detector_status_s::fd_roll"]
        [::core::mem::offset_of!(failure_detector_status_s, fd_roll) - 14usize];
    ["Offset of field: failure_detector_status_s::fd_pitch"]
        [::core::mem::offset_of!(failure_detector_status_s, fd_pitch) - 15usize];
    ["Offset of field: failure_detector_status_s::fd_alt"]
        [::core::mem::offset_of!(failure_detector_status_s, fd_alt) - 16usize];
    ["Offset of field: failure_detector_status_s::fd_ext"]
        [::core::mem::offset_of!(failure_detector_status_s, fd_ext) - 17usize];
    ["Offset of field: failure_detector_status_s::fd_arm_escs"]
        [::core::mem::offset_of!(failure_detector_status_s, fd_arm_escs) - 18usize];
    ["Offset of field: failure_detector_status_s::fd_battery"]
        [::core::mem::offset_of!(failure_detector_status_s, fd_battery) - 19usize];
    ["Offset of field: failure_detector_status_s::fd_imbalanced_prop"]
        [::core::mem::offset_of!(failure_detector_status_s, fd_imbalanced_prop) - 20usize];
    ["Offset of field: failure_detector_status_s::fd_motor"]
        [::core::mem::offset_of!(failure_detector_status_s, fd_motor) - 21usize];
    ["Offset of field: failure_detector_status_s::_padding0"]
        [::core::mem::offset_of!(failure_detector_status_s, _padding0) - 22usize];
};
unsafe extern "C" {
    pub static __orb_failure_detector_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hover_thrust_estimate_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub hover_thrust: f32,
    pub hover_thrust_var: f32,
    pub accel_innov: f32,
    pub accel_innov_var: f32,
    pub accel_innov_test_ratio: f32,
    pub accel_noise_var: f32,
    pub valid: bool,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hover_thrust_estimate_s"]
        [::core::mem::size_of::<hover_thrust_estimate_s>() - 48usize];
    ["Alignment of hover_thrust_estimate_s"]
        [::core::mem::align_of::<hover_thrust_estimate_s>() - 8usize];
    ["Offset of field: hover_thrust_estimate_s::timestamp"]
        [::core::mem::offset_of!(hover_thrust_estimate_s, timestamp) - 0usize];
    ["Offset of field: hover_thrust_estimate_s::timestamp_sample"]
        [::core::mem::offset_of!(hover_thrust_estimate_s, timestamp_sample) - 8usize];
    ["Offset of field: hover_thrust_estimate_s::hover_thrust"]
        [::core::mem::offset_of!(hover_thrust_estimate_s, hover_thrust) - 16usize];
    ["Offset of field: hover_thrust_estimate_s::hover_thrust_var"]
        [::core::mem::offset_of!(hover_thrust_estimate_s, hover_thrust_var) - 20usize];
    ["Offset of field: hover_thrust_estimate_s::accel_innov"]
        [::core::mem::offset_of!(hover_thrust_estimate_s, accel_innov) - 24usize];
    ["Offset of field: hover_thrust_estimate_s::accel_innov_var"]
        [::core::mem::offset_of!(hover_thrust_estimate_s, accel_innov_var) - 28usize];
    ["Offset of field: hover_thrust_estimate_s::accel_innov_test_ratio"]
        [::core::mem::offset_of!(hover_thrust_estimate_s, accel_innov_test_ratio) - 32usize];
    ["Offset of field: hover_thrust_estimate_s::accel_noise_var"]
        [::core::mem::offset_of!(hover_thrust_estimate_s, accel_noise_var) - 36usize];
    ["Offset of field: hover_thrust_estimate_s::valid"]
        [::core::mem::offset_of!(hover_thrust_estimate_s, valid) - 40usize];
    ["Offset of field: hover_thrust_estimate_s::_padding0"]
        [::core::mem::offset_of!(hover_thrust_estimate_s, _padding0) - 41usize];
};
unsafe extern "C" {
    pub static __orb_hover_thrust_estimate: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_attitude_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub q: [f32; 4usize],
    pub delta_q_reset: [f32; 4usize],
    pub quat_reset_counter: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_attitude_s"][::core::mem::size_of::<vehicle_attitude_s>() - 56usize];
    ["Alignment of vehicle_attitude_s"][::core::mem::align_of::<vehicle_attitude_s>() - 8usize];
    ["Offset of field: vehicle_attitude_s::timestamp"]
        [::core::mem::offset_of!(vehicle_attitude_s, timestamp) - 0usize];
    ["Offset of field: vehicle_attitude_s::timestamp_sample"]
        [::core::mem::offset_of!(vehicle_attitude_s, timestamp_sample) - 8usize];
    ["Offset of field: vehicle_attitude_s::q"]
        [::core::mem::offset_of!(vehicle_attitude_s, q) - 16usize];
    ["Offset of field: vehicle_attitude_s::delta_q_reset"]
        [::core::mem::offset_of!(vehicle_attitude_s, delta_q_reset) - 32usize];
    ["Offset of field: vehicle_attitude_s::quat_reset_counter"]
        [::core::mem::offset_of!(vehicle_attitude_s, quat_reset_counter) - 48usize];
    ["Offset of field: vehicle_attitude_s::_padding0"]
        [::core::mem::offset_of!(vehicle_attitude_s, _padding0) - 49usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_attitude: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_vehicle_attitude_groundtruth: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_external_ins_attitude: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_attitude: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct heater_status_s {
    pub timestamp: u64,
    pub device_id: u32,
    pub temperature_sensor: f32,
    pub temperature_target: f32,
    pub controller_period_usec: u32,
    pub controller_time_on_usec: u32,
    pub proportional_value: f32,
    pub integrator_value: f32,
    pub feed_forward_value: f32,
    pub heater_on: bool,
    pub temperature_target_met: bool,
    pub mode: u8,
    pub _padding0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of heater_status_s"][::core::mem::size_of::<heater_status_s>() - 48usize];
    ["Alignment of heater_status_s"][::core::mem::align_of::<heater_status_s>() - 8usize];
    ["Offset of field: heater_status_s::timestamp"]
        [::core::mem::offset_of!(heater_status_s, timestamp) - 0usize];
    ["Offset of field: heater_status_s::device_id"]
        [::core::mem::offset_of!(heater_status_s, device_id) - 8usize];
    ["Offset of field: heater_status_s::temperature_sensor"]
        [::core::mem::offset_of!(heater_status_s, temperature_sensor) - 12usize];
    ["Offset of field: heater_status_s::temperature_target"]
        [::core::mem::offset_of!(heater_status_s, temperature_target) - 16usize];
    ["Offset of field: heater_status_s::controller_period_usec"]
        [::core::mem::offset_of!(heater_status_s, controller_period_usec) - 20usize];
    ["Offset of field: heater_status_s::controller_time_on_usec"]
        [::core::mem::offset_of!(heater_status_s, controller_time_on_usec) - 24usize];
    ["Offset of field: heater_status_s::proportional_value"]
        [::core::mem::offset_of!(heater_status_s, proportional_value) - 28usize];
    ["Offset of field: heater_status_s::integrator_value"]
        [::core::mem::offset_of!(heater_status_s, integrator_value) - 32usize];
    ["Offset of field: heater_status_s::feed_forward_value"]
        [::core::mem::offset_of!(heater_status_s, feed_forward_value) - 36usize];
    ["Offset of field: heater_status_s::heater_on"]
        [::core::mem::offset_of!(heater_status_s, heater_on) - 40usize];
    ["Offset of field: heater_status_s::temperature_target_met"]
        [::core::mem::offset_of!(heater_status_s, temperature_target_met) - 41usize];
    ["Offset of field: heater_status_s::mode"]
        [::core::mem::offset_of!(heater_status_s, mode) - 42usize];
    ["Offset of field: heater_status_s::_padding0"]
        [::core::mem::offset_of!(heater_status_s, _padding0) - 43usize];
};
unsafe extern "C" {
    pub static __orb_heater_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gimbal_manager_status_s {
    pub timestamp: u64,
    pub flags: u32,
    pub gimbal_device_id: u8,
    pub primary_control_sysid: u8,
    pub primary_control_compid: u8,
    pub secondary_control_sysid: u8,
    pub secondary_control_compid: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gimbal_manager_status_s"]
        [::core::mem::size_of::<gimbal_manager_status_s>() - 24usize];
    ["Alignment of gimbal_manager_status_s"]
        [::core::mem::align_of::<gimbal_manager_status_s>() - 8usize];
    ["Offset of field: gimbal_manager_status_s::timestamp"]
        [::core::mem::offset_of!(gimbal_manager_status_s, timestamp) - 0usize];
    ["Offset of field: gimbal_manager_status_s::flags"]
        [::core::mem::offset_of!(gimbal_manager_status_s, flags) - 8usize];
    ["Offset of field: gimbal_manager_status_s::gimbal_device_id"]
        [::core::mem::offset_of!(gimbal_manager_status_s, gimbal_device_id) - 12usize];
    ["Offset of field: gimbal_manager_status_s::primary_control_sysid"]
        [::core::mem::offset_of!(gimbal_manager_status_s, primary_control_sysid) - 13usize];
    ["Offset of field: gimbal_manager_status_s::primary_control_compid"]
        [::core::mem::offset_of!(gimbal_manager_status_s, primary_control_compid) - 14usize];
    ["Offset of field: gimbal_manager_status_s::secondary_control_sysid"]
        [::core::mem::offset_of!(gimbal_manager_status_s, secondary_control_sysid) - 15usize];
    ["Offset of field: gimbal_manager_status_s::secondary_control_compid"]
        [::core::mem::offset_of!(gimbal_manager_status_s, secondary_control_compid) - 16usize];
    ["Offset of field: gimbal_manager_status_s::_padding0"]
        [::core::mem::offset_of!(gimbal_manager_status_s, _padding0) - 17usize];
};
unsafe extern "C" {
    pub static __orb_gimbal_manager_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gps_dump_s {
    pub timestamp: u64,
    pub instance: u8,
    pub len: u8,
    pub data: [u8; 79usize],
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gps_dump_s"][::core::mem::size_of::<gps_dump_s>() - 96usize];
    ["Alignment of gps_dump_s"][::core::mem::align_of::<gps_dump_s>() - 8usize];
    ["Offset of field: gps_dump_s::timestamp"]
        [::core::mem::offset_of!(gps_dump_s, timestamp) - 0usize];
    ["Offset of field: gps_dump_s::instance"]
        [::core::mem::offset_of!(gps_dump_s, instance) - 8usize];
    ["Offset of field: gps_dump_s::len"][::core::mem::offset_of!(gps_dump_s, len) - 9usize];
    ["Offset of field: gps_dump_s::data"][::core::mem::offset_of!(gps_dump_s, data) - 10usize];
    ["Offset of field: gps_dump_s::_padding0"]
        [::core::mem::offset_of!(gps_dump_s, _padding0) - 89usize];
};
unsafe extern "C" {
    pub static __orb_gps_dump: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct figure_eight_status_s {
    pub timestamp: u64,
    pub major_radius: f32,
    pub minor_radius: f32,
    pub orientation: f32,
    pub x: i32,
    pub y: i32,
    pub z: f32,
    pub frame: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of figure_eight_status_s"][::core::mem::size_of::<figure_eight_status_s>() - 40usize];
    ["Alignment of figure_eight_status_s"]
        [::core::mem::align_of::<figure_eight_status_s>() - 8usize];
    ["Offset of field: figure_eight_status_s::timestamp"]
        [::core::mem::offset_of!(figure_eight_status_s, timestamp) - 0usize];
    ["Offset of field: figure_eight_status_s::major_radius"]
        [::core::mem::offset_of!(figure_eight_status_s, major_radius) - 8usize];
    ["Offset of field: figure_eight_status_s::minor_radius"]
        [::core::mem::offset_of!(figure_eight_status_s, minor_radius) - 12usize];
    ["Offset of field: figure_eight_status_s::orientation"]
        [::core::mem::offset_of!(figure_eight_status_s, orientation) - 16usize];
    ["Offset of field: figure_eight_status_s::x"]
        [::core::mem::offset_of!(figure_eight_status_s, x) - 20usize];
    ["Offset of field: figure_eight_status_s::y"]
        [::core::mem::offset_of!(figure_eight_status_s, y) - 24usize];
    ["Offset of field: figure_eight_status_s::z"]
        [::core::mem::offset_of!(figure_eight_status_s, z) - 28usize];
    ["Offset of field: figure_eight_status_s::frame"]
        [::core::mem::offset_of!(figure_eight_status_s, frame) - 32usize];
    ["Offset of field: figure_eight_status_s::_padding0"]
        [::core::mem::offset_of!(figure_eight_status_s, _padding0) - 33usize];
};
unsafe extern "C" {
    pub static __orb_figure_eight_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct offboard_control_mode_s {
    pub timestamp: u64,
    pub position: bool,
    pub velocity: bool,
    pub acceleration: bool,
    pub attitude: bool,
    pub body_rate: bool,
    pub thrust_and_torque: bool,
    pub direct_actuator: bool,
    pub _padding0: [u8; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of offboard_control_mode_s"]
        [::core::mem::size_of::<offboard_control_mode_s>() - 16usize];
    ["Alignment of offboard_control_mode_s"]
        [::core::mem::align_of::<offboard_control_mode_s>() - 8usize];
    ["Offset of field: offboard_control_mode_s::timestamp"]
        [::core::mem::offset_of!(offboard_control_mode_s, timestamp) - 0usize];
    ["Offset of field: offboard_control_mode_s::position"]
        [::core::mem::offset_of!(offboard_control_mode_s, position) - 8usize];
    ["Offset of field: offboard_control_mode_s::velocity"]
        [::core::mem::offset_of!(offboard_control_mode_s, velocity) - 9usize];
    ["Offset of field: offboard_control_mode_s::acceleration"]
        [::core::mem::offset_of!(offboard_control_mode_s, acceleration) - 10usize];
    ["Offset of field: offboard_control_mode_s::attitude"]
        [::core::mem::offset_of!(offboard_control_mode_s, attitude) - 11usize];
    ["Offset of field: offboard_control_mode_s::body_rate"]
        [::core::mem::offset_of!(offboard_control_mode_s, body_rate) - 12usize];
    ["Offset of field: offboard_control_mode_s::thrust_and_torque"]
        [::core::mem::offset_of!(offboard_control_mode_s, thrust_and_torque) - 13usize];
    ["Offset of field: offboard_control_mode_s::direct_actuator"]
        [::core::mem::offset_of!(offboard_control_mode_s, direct_actuator) - 14usize];
    ["Offset of field: offboard_control_mode_s::_padding0"]
        [::core::mem::offset_of!(offboard_control_mode_s, _padding0) - 15usize];
};
unsafe extern "C" {
    pub static __orb_offboard_control_mode: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_baro_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub device_id: u32,
    pub pressure: f32,
    pub temperature: f32,
    pub error_count: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_baro_s"][::core::mem::size_of::<sensor_baro_s>() - 32usize];
    ["Alignment of sensor_baro_s"][::core::mem::align_of::<sensor_baro_s>() - 8usize];
    ["Offset of field: sensor_baro_s::timestamp"]
        [::core::mem::offset_of!(sensor_baro_s, timestamp) - 0usize];
    ["Offset of field: sensor_baro_s::timestamp_sample"]
        [::core::mem::offset_of!(sensor_baro_s, timestamp_sample) - 8usize];
    ["Offset of field: sensor_baro_s::device_id"]
        [::core::mem::offset_of!(sensor_baro_s, device_id) - 16usize];
    ["Offset of field: sensor_baro_s::pressure"]
        [::core::mem::offset_of!(sensor_baro_s, pressure) - 20usize];
    ["Offset of field: sensor_baro_s::temperature"]
        [::core::mem::offset_of!(sensor_baro_s, temperature) - 24usize];
    ["Offset of field: sensor_baro_s::error_count"]
        [::core::mem::offset_of!(sensor_baro_s, error_count) - 28usize];
};
unsafe extern "C" {
    pub static __orb_sensor_baro: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gpio_request_s {
    pub timestamp: u64,
    pub device_id: u32,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpio_request_s"][::core::mem::size_of::<gpio_request_s>() - 16usize];
    ["Alignment of gpio_request_s"][::core::mem::align_of::<gpio_request_s>() - 8usize];
    ["Offset of field: gpio_request_s::timestamp"]
        [::core::mem::offset_of!(gpio_request_s, timestamp) - 0usize];
    ["Offset of field: gpio_request_s::device_id"]
        [::core::mem::offset_of!(gpio_request_s, device_id) - 8usize];
    ["Offset of field: gpio_request_s::_padding0"]
        [::core::mem::offset_of!(gpio_request_s, _padding0) - 12usize];
};
unsafe extern "C" {
    pub static __orb_gpio_request: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esc_report_s {
    pub timestamp: u64,
    pub esc_errorcount: u32,
    pub esc_rpm: i32,
    pub esc_voltage: f32,
    pub esc_current: f32,
    pub esc_temperature: f32,
    pub failures: u16,
    pub esc_address: u8,
    pub esc_cmdcount: u8,
    pub esc_state: u8,
    pub actuator_function: u8,
    pub esc_power: i8,
    pub _padding0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of esc_report_s"][::core::mem::size_of::<esc_report_s>() - 40usize];
    ["Alignment of esc_report_s"][::core::mem::align_of::<esc_report_s>() - 8usize];
    ["Offset of field: esc_report_s::timestamp"]
        [::core::mem::offset_of!(esc_report_s, timestamp) - 0usize];
    ["Offset of field: esc_report_s::esc_errorcount"]
        [::core::mem::offset_of!(esc_report_s, esc_errorcount) - 8usize];
    ["Offset of field: esc_report_s::esc_rpm"]
        [::core::mem::offset_of!(esc_report_s, esc_rpm) - 12usize];
    ["Offset of field: esc_report_s::esc_voltage"]
        [::core::mem::offset_of!(esc_report_s, esc_voltage) - 16usize];
    ["Offset of field: esc_report_s::esc_current"]
        [::core::mem::offset_of!(esc_report_s, esc_current) - 20usize];
    ["Offset of field: esc_report_s::esc_temperature"]
        [::core::mem::offset_of!(esc_report_s, esc_temperature) - 24usize];
    ["Offset of field: esc_report_s::failures"]
        [::core::mem::offset_of!(esc_report_s, failures) - 28usize];
    ["Offset of field: esc_report_s::esc_address"]
        [::core::mem::offset_of!(esc_report_s, esc_address) - 30usize];
    ["Offset of field: esc_report_s::esc_cmdcount"]
        [::core::mem::offset_of!(esc_report_s, esc_cmdcount) - 31usize];
    ["Offset of field: esc_report_s::esc_state"]
        [::core::mem::offset_of!(esc_report_s, esc_state) - 32usize];
    ["Offset of field: esc_report_s::actuator_function"]
        [::core::mem::offset_of!(esc_report_s, actuator_function) - 33usize];
    ["Offset of field: esc_report_s::esc_power"]
        [::core::mem::offset_of!(esc_report_s, esc_power) - 34usize];
    ["Offset of field: esc_report_s::_padding0"]
        [::core::mem::offset_of!(esc_report_s, _padding0) - 35usize];
};
unsafe extern "C" {
    pub static __orb_esc_report: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esc_status_s {
    pub timestamp: u64,
    pub counter: u16,
    pub esc_count: u8,
    pub esc_connectiontype: u8,
    pub esc_online_flags: u8,
    pub esc_armed_flags: u8,
    pub _padding0: [u8; 2usize],
    pub esc: [esc_report_s; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of esc_status_s"][::core::mem::size_of::<esc_status_s>() - 336usize];
    ["Alignment of esc_status_s"][::core::mem::align_of::<esc_status_s>() - 8usize];
    ["Offset of field: esc_status_s::timestamp"]
        [::core::mem::offset_of!(esc_status_s, timestamp) - 0usize];
    ["Offset of field: esc_status_s::counter"]
        [::core::mem::offset_of!(esc_status_s, counter) - 8usize];
    ["Offset of field: esc_status_s::esc_count"]
        [::core::mem::offset_of!(esc_status_s, esc_count) - 10usize];
    ["Offset of field: esc_status_s::esc_connectiontype"]
        [::core::mem::offset_of!(esc_status_s, esc_connectiontype) - 11usize];
    ["Offset of field: esc_status_s::esc_online_flags"]
        [::core::mem::offset_of!(esc_status_s, esc_online_flags) - 12usize];
    ["Offset of field: esc_status_s::esc_armed_flags"]
        [::core::mem::offset_of!(esc_status_s, esc_armed_flags) - 13usize];
    ["Offset of field: esc_status_s::_padding0"]
        [::core::mem::offset_of!(esc_status_s, _padding0) - 14usize];
    ["Offset of field: esc_status_s::esc"][::core::mem::offset_of!(esc_status_s, esc) - 16usize];
};
unsafe extern "C" {
    pub static __orb_esc_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rate_ctrl_status_s {
    pub timestamp: u64,
    pub rollspeed_integ: f32,
    pub pitchspeed_integ: f32,
    pub yawspeed_integ: f32,
    pub wheel_rate_integ: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rate_ctrl_status_s"][::core::mem::size_of::<rate_ctrl_status_s>() - 24usize];
    ["Alignment of rate_ctrl_status_s"][::core::mem::align_of::<rate_ctrl_status_s>() - 8usize];
    ["Offset of field: rate_ctrl_status_s::timestamp"]
        [::core::mem::offset_of!(rate_ctrl_status_s, timestamp) - 0usize];
    ["Offset of field: rate_ctrl_status_s::rollspeed_integ"]
        [::core::mem::offset_of!(rate_ctrl_status_s, rollspeed_integ) - 8usize];
    ["Offset of field: rate_ctrl_status_s::pitchspeed_integ"]
        [::core::mem::offset_of!(rate_ctrl_status_s, pitchspeed_integ) - 12usize];
    ["Offset of field: rate_ctrl_status_s::yawspeed_integ"]
        [::core::mem::offset_of!(rate_ctrl_status_s, yawspeed_integ) - 16usize];
    ["Offset of field: rate_ctrl_status_s::wheel_rate_integ"]
        [::core::mem::offset_of!(rate_ctrl_status_s, wheel_rate_integ) - 20usize];
};
unsafe extern "C" {
    pub static __orb_rate_ctrl_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct register_ext_component_reply_s {
    pub timestamp: u64,
    pub request_id: u64,
    pub px4_ros2_api_version: u16,
    pub name: [::core::ffi::c_char; 25usize],
    pub success: bool,
    pub arming_check_id: i8,
    pub mode_id: i8,
    pub mode_executor_id: i8,
    pub _padding0: [u8; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of register_ext_component_reply_s"]
        [::core::mem::size_of::<register_ext_component_reply_s>() - 48usize];
    ["Alignment of register_ext_component_reply_s"]
        [::core::mem::align_of::<register_ext_component_reply_s>() - 8usize];
    ["Offset of field: register_ext_component_reply_s::timestamp"]
        [::core::mem::offset_of!(register_ext_component_reply_s, timestamp) - 0usize];
    ["Offset of field: register_ext_component_reply_s::request_id"]
        [::core::mem::offset_of!(register_ext_component_reply_s, request_id) - 8usize];
    ["Offset of field: register_ext_component_reply_s::px4_ros2_api_version"]
        [::core::mem::offset_of!(register_ext_component_reply_s, px4_ros2_api_version) - 16usize];
    ["Offset of field: register_ext_component_reply_s::name"]
        [::core::mem::offset_of!(register_ext_component_reply_s, name) - 18usize];
    ["Offset of field: register_ext_component_reply_s::success"]
        [::core::mem::offset_of!(register_ext_component_reply_s, success) - 43usize];
    ["Offset of field: register_ext_component_reply_s::arming_check_id"]
        [::core::mem::offset_of!(register_ext_component_reply_s, arming_check_id) - 44usize];
    ["Offset of field: register_ext_component_reply_s::mode_id"]
        [::core::mem::offset_of!(register_ext_component_reply_s, mode_id) - 45usize];
    ["Offset of field: register_ext_component_reply_s::mode_executor_id"]
        [::core::mem::offset_of!(register_ext_component_reply_s, mode_executor_id) - 46usize];
    ["Offset of field: register_ext_component_reply_s::_padding0"]
        [::core::mem::offset_of!(register_ext_component_reply_s, _padding0) - 47usize];
};
unsafe extern "C" {
    pub static __orb_register_ext_component_reply: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct input_rc_s {
    pub timestamp: u64,
    pub timestamp_last_signal: u64,
    pub rssi: i32,
    pub rssi_dbm: f32,
    pub rc_lost_frame_count: u16,
    pub rc_total_frame_count: u16,
    pub rc_ppm_frame_length: u16,
    pub values: [u16; 18usize],
    pub channel_count: u8,
    pub rc_failsafe: bool,
    pub rc_lost: bool,
    pub input_source: u8,
    pub link_quality: i8,
    pub _padding0: [u8; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of input_rc_s"][::core::mem::size_of::<input_rc_s>() - 72usize];
    ["Alignment of input_rc_s"][::core::mem::align_of::<input_rc_s>() - 8usize];
    ["Offset of field: input_rc_s::timestamp"]
        [::core::mem::offset_of!(input_rc_s, timestamp) - 0usize];
    ["Offset of field: input_rc_s::timestamp_last_signal"]
        [::core::mem::offset_of!(input_rc_s, timestamp_last_signal) - 8usize];
    ["Offset of field: input_rc_s::rssi"][::core::mem::offset_of!(input_rc_s, rssi) - 16usize];
    ["Offset of field: input_rc_s::rssi_dbm"]
        [::core::mem::offset_of!(input_rc_s, rssi_dbm) - 20usize];
    ["Offset of field: input_rc_s::rc_lost_frame_count"]
        [::core::mem::offset_of!(input_rc_s, rc_lost_frame_count) - 24usize];
    ["Offset of field: input_rc_s::rc_total_frame_count"]
        [::core::mem::offset_of!(input_rc_s, rc_total_frame_count) - 26usize];
    ["Offset of field: input_rc_s::rc_ppm_frame_length"]
        [::core::mem::offset_of!(input_rc_s, rc_ppm_frame_length) - 28usize];
    ["Offset of field: input_rc_s::values"][::core::mem::offset_of!(input_rc_s, values) - 30usize];
    ["Offset of field: input_rc_s::channel_count"]
        [::core::mem::offset_of!(input_rc_s, channel_count) - 66usize];
    ["Offset of field: input_rc_s::rc_failsafe"]
        [::core::mem::offset_of!(input_rc_s, rc_failsafe) - 67usize];
    ["Offset of field: input_rc_s::rc_lost"]
        [::core::mem::offset_of!(input_rc_s, rc_lost) - 68usize];
    ["Offset of field: input_rc_s::input_source"]
        [::core::mem::offset_of!(input_rc_s, input_source) - 69usize];
    ["Offset of field: input_rc_s::link_quality"]
        [::core::mem::offset_of!(input_rc_s, link_quality) - 70usize];
    ["Offset of field: input_rc_s::_padding0"]
        [::core::mem::offset_of!(input_rc_s, _padding0) - 71usize];
};
unsafe extern "C" {
    pub static __orb_input_rc: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iridiumsbd_status_s {
    pub timestamp: u64,
    pub last_at_ok_timestamp: u64,
    pub tx_buf_write_index: u16,
    pub rx_buf_read_index: u16,
    pub rx_buf_end_index: u16,
    pub failed_sbd_sessions: u16,
    pub successful_sbd_sessions: u16,
    pub num_tx_buf_reset: u16,
    pub signal_quality: u8,
    pub state: u8,
    pub ring_pending: bool,
    pub tx_buf_write_pending: bool,
    pub tx_session_pending: bool,
    pub rx_read_pending: bool,
    pub rx_session_pending: bool,
    pub _padding0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iridiumsbd_status_s"][::core::mem::size_of::<iridiumsbd_status_s>() - 40usize];
    ["Alignment of iridiumsbd_status_s"][::core::mem::align_of::<iridiumsbd_status_s>() - 8usize];
    ["Offset of field: iridiumsbd_status_s::timestamp"]
        [::core::mem::offset_of!(iridiumsbd_status_s, timestamp) - 0usize];
    ["Offset of field: iridiumsbd_status_s::last_at_ok_timestamp"]
        [::core::mem::offset_of!(iridiumsbd_status_s, last_at_ok_timestamp) - 8usize];
    ["Offset of field: iridiumsbd_status_s::tx_buf_write_index"]
        [::core::mem::offset_of!(iridiumsbd_status_s, tx_buf_write_index) - 16usize];
    ["Offset of field: iridiumsbd_status_s::rx_buf_read_index"]
        [::core::mem::offset_of!(iridiumsbd_status_s, rx_buf_read_index) - 18usize];
    ["Offset of field: iridiumsbd_status_s::rx_buf_end_index"]
        [::core::mem::offset_of!(iridiumsbd_status_s, rx_buf_end_index) - 20usize];
    ["Offset of field: iridiumsbd_status_s::failed_sbd_sessions"]
        [::core::mem::offset_of!(iridiumsbd_status_s, failed_sbd_sessions) - 22usize];
    ["Offset of field: iridiumsbd_status_s::successful_sbd_sessions"]
        [::core::mem::offset_of!(iridiumsbd_status_s, successful_sbd_sessions) - 24usize];
    ["Offset of field: iridiumsbd_status_s::num_tx_buf_reset"]
        [::core::mem::offset_of!(iridiumsbd_status_s, num_tx_buf_reset) - 26usize];
    ["Offset of field: iridiumsbd_status_s::signal_quality"]
        [::core::mem::offset_of!(iridiumsbd_status_s, signal_quality) - 28usize];
    ["Offset of field: iridiumsbd_status_s::state"]
        [::core::mem::offset_of!(iridiumsbd_status_s, state) - 29usize];
    ["Offset of field: iridiumsbd_status_s::ring_pending"]
        [::core::mem::offset_of!(iridiumsbd_status_s, ring_pending) - 30usize];
    ["Offset of field: iridiumsbd_status_s::tx_buf_write_pending"]
        [::core::mem::offset_of!(iridiumsbd_status_s, tx_buf_write_pending) - 31usize];
    ["Offset of field: iridiumsbd_status_s::tx_session_pending"]
        [::core::mem::offset_of!(iridiumsbd_status_s, tx_session_pending) - 32usize];
    ["Offset of field: iridiumsbd_status_s::rx_read_pending"]
        [::core::mem::offset_of!(iridiumsbd_status_s, rx_read_pending) - 33usize];
    ["Offset of field: iridiumsbd_status_s::rx_session_pending"]
        [::core::mem::offset_of!(iridiumsbd_status_s, rx_session_pending) - 34usize];
    ["Offset of field: iridiumsbd_status_s::_padding0"]
        [::core::mem::offset_of!(iridiumsbd_status_s, _padding0) - 35usize];
};
unsafe extern "C" {
    pub static __orb_iridiumsbd_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rc_channels_s {
    pub timestamp: u64,
    pub timestamp_last_valid: u64,
    pub channels: [f32; 18usize],
    pub frame_drop_count: u32,
    pub channel_count: u8,
    pub function: [i8; 29usize],
    pub rssi: u8,
    pub signal_lost: bool,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rc_channels_s"][::core::mem::size_of::<rc_channels_s>() - 128usize];
    ["Alignment of rc_channels_s"][::core::mem::align_of::<rc_channels_s>() - 8usize];
    ["Offset of field: rc_channels_s::timestamp"]
        [::core::mem::offset_of!(rc_channels_s, timestamp) - 0usize];
    ["Offset of field: rc_channels_s::timestamp_last_valid"]
        [::core::mem::offset_of!(rc_channels_s, timestamp_last_valid) - 8usize];
    ["Offset of field: rc_channels_s::channels"]
        [::core::mem::offset_of!(rc_channels_s, channels) - 16usize];
    ["Offset of field: rc_channels_s::frame_drop_count"]
        [::core::mem::offset_of!(rc_channels_s, frame_drop_count) - 88usize];
    ["Offset of field: rc_channels_s::channel_count"]
        [::core::mem::offset_of!(rc_channels_s, channel_count) - 92usize];
    ["Offset of field: rc_channels_s::function"]
        [::core::mem::offset_of!(rc_channels_s, function) - 93usize];
    ["Offset of field: rc_channels_s::rssi"]
        [::core::mem::offset_of!(rc_channels_s, rssi) - 122usize];
    ["Offset of field: rc_channels_s::signal_lost"]
        [::core::mem::offset_of!(rc_channels_s, signal_lost) - 123usize];
    ["Offset of field: rc_channels_s::_padding0"]
        [::core::mem::offset_of!(rc_channels_s, _padding0) - 124usize];
};
unsafe extern "C" {
    pub static __orb_rc_channels: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_imu_status_s {
    pub timestamp: u64,
    pub accel_device_id: u32,
    pub gyro_device_id: u32,
    pub accel_clipping: [u32; 3usize],
    pub gyro_clipping: [u32; 3usize],
    pub accel_error_count: u32,
    pub gyro_error_count: u32,
    pub accel_rate_hz: f32,
    pub gyro_rate_hz: f32,
    pub accel_raw_rate_hz: f32,
    pub gyro_raw_rate_hz: f32,
    pub accel_vibration_metric: f32,
    pub gyro_vibration_metric: f32,
    pub delta_angle_coning_metric: f32,
    pub mean_accel: [f32; 3usize],
    pub mean_gyro: [f32; 3usize],
    pub var_accel: [f32; 3usize],
    pub var_gyro: [f32; 3usize],
    pub temperature_accel: f32,
    pub temperature_gyro: f32,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_imu_status_s"][::core::mem::size_of::<vehicle_imu_status_s>() - 136usize];
    ["Alignment of vehicle_imu_status_s"][::core::mem::align_of::<vehicle_imu_status_s>() - 8usize];
    ["Offset of field: vehicle_imu_status_s::timestamp"]
        [::core::mem::offset_of!(vehicle_imu_status_s, timestamp) - 0usize];
    ["Offset of field: vehicle_imu_status_s::accel_device_id"]
        [::core::mem::offset_of!(vehicle_imu_status_s, accel_device_id) - 8usize];
    ["Offset of field: vehicle_imu_status_s::gyro_device_id"]
        [::core::mem::offset_of!(vehicle_imu_status_s, gyro_device_id) - 12usize];
    ["Offset of field: vehicle_imu_status_s::accel_clipping"]
        [::core::mem::offset_of!(vehicle_imu_status_s, accel_clipping) - 16usize];
    ["Offset of field: vehicle_imu_status_s::gyro_clipping"]
        [::core::mem::offset_of!(vehicle_imu_status_s, gyro_clipping) - 28usize];
    ["Offset of field: vehicle_imu_status_s::accel_error_count"]
        [::core::mem::offset_of!(vehicle_imu_status_s, accel_error_count) - 40usize];
    ["Offset of field: vehicle_imu_status_s::gyro_error_count"]
        [::core::mem::offset_of!(vehicle_imu_status_s, gyro_error_count) - 44usize];
    ["Offset of field: vehicle_imu_status_s::accel_rate_hz"]
        [::core::mem::offset_of!(vehicle_imu_status_s, accel_rate_hz) - 48usize];
    ["Offset of field: vehicle_imu_status_s::gyro_rate_hz"]
        [::core::mem::offset_of!(vehicle_imu_status_s, gyro_rate_hz) - 52usize];
    ["Offset of field: vehicle_imu_status_s::accel_raw_rate_hz"]
        [::core::mem::offset_of!(vehicle_imu_status_s, accel_raw_rate_hz) - 56usize];
    ["Offset of field: vehicle_imu_status_s::gyro_raw_rate_hz"]
        [::core::mem::offset_of!(vehicle_imu_status_s, gyro_raw_rate_hz) - 60usize];
    ["Offset of field: vehicle_imu_status_s::accel_vibration_metric"]
        [::core::mem::offset_of!(vehicle_imu_status_s, accel_vibration_metric) - 64usize];
    ["Offset of field: vehicle_imu_status_s::gyro_vibration_metric"]
        [::core::mem::offset_of!(vehicle_imu_status_s, gyro_vibration_metric) - 68usize];
    ["Offset of field: vehicle_imu_status_s::delta_angle_coning_metric"]
        [::core::mem::offset_of!(vehicle_imu_status_s, delta_angle_coning_metric) - 72usize];
    ["Offset of field: vehicle_imu_status_s::mean_accel"]
        [::core::mem::offset_of!(vehicle_imu_status_s, mean_accel) - 76usize];
    ["Offset of field: vehicle_imu_status_s::mean_gyro"]
        [::core::mem::offset_of!(vehicle_imu_status_s, mean_gyro) - 88usize];
    ["Offset of field: vehicle_imu_status_s::var_accel"]
        [::core::mem::offset_of!(vehicle_imu_status_s, var_accel) - 100usize];
    ["Offset of field: vehicle_imu_status_s::var_gyro"]
        [::core::mem::offset_of!(vehicle_imu_status_s, var_gyro) - 112usize];
    ["Offset of field: vehicle_imu_status_s::temperature_accel"]
        [::core::mem::offset_of!(vehicle_imu_status_s, temperature_accel) - 124usize];
    ["Offset of field: vehicle_imu_status_s::temperature_gyro"]
        [::core::mem::offset_of!(vehicle_imu_status_s, temperature_gyro) - 128usize];
    ["Offset of field: vehicle_imu_status_s::_padding0"]
        [::core::mem::offset_of!(vehicle_imu_status_s, _padding0) - 132usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_imu_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct follow_target_s {
    pub timestamp: u64,
    pub lat: f64,
    pub lon: f64,
    pub alt: f32,
    pub vy: f32,
    pub vx: f32,
    pub vz: f32,
    pub est_cap: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of follow_target_s"][::core::mem::size_of::<follow_target_s>() - 48usize];
    ["Alignment of follow_target_s"][::core::mem::align_of::<follow_target_s>() - 8usize];
    ["Offset of field: follow_target_s::timestamp"]
        [::core::mem::offset_of!(follow_target_s, timestamp) - 0usize];
    ["Offset of field: follow_target_s::lat"]
        [::core::mem::offset_of!(follow_target_s, lat) - 8usize];
    ["Offset of field: follow_target_s::lon"]
        [::core::mem::offset_of!(follow_target_s, lon) - 16usize];
    ["Offset of field: follow_target_s::alt"]
        [::core::mem::offset_of!(follow_target_s, alt) - 24usize];
    ["Offset of field: follow_target_s::vy"]
        [::core::mem::offset_of!(follow_target_s, vy) - 28usize];
    ["Offset of field: follow_target_s::vx"]
        [::core::mem::offset_of!(follow_target_s, vx) - 32usize];
    ["Offset of field: follow_target_s::vz"]
        [::core::mem::offset_of!(follow_target_s, vz) - 36usize];
    ["Offset of field: follow_target_s::est_cap"]
        [::core::mem::offset_of!(follow_target_s, est_cap) - 40usize];
    ["Offset of field: follow_target_s::_padding0"]
        [::core::mem::offset_of!(follow_target_s, _padding0) - 41usize];
};
unsafe extern "C" {
    pub static __orb_follow_target: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct satellite_info_s {
    pub timestamp: u64,
    pub count: u8,
    pub svid: [u8; 20usize],
    pub used: [u8; 20usize],
    pub elevation: [u8; 20usize],
    pub azimuth: [u8; 20usize],
    pub snr: [u8; 20usize],
    pub prn: [u8; 20usize],
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of satellite_info_s"][::core::mem::size_of::<satellite_info_s>() - 136usize];
    ["Alignment of satellite_info_s"][::core::mem::align_of::<satellite_info_s>() - 8usize];
    ["Offset of field: satellite_info_s::timestamp"]
        [::core::mem::offset_of!(satellite_info_s, timestamp) - 0usize];
    ["Offset of field: satellite_info_s::count"]
        [::core::mem::offset_of!(satellite_info_s, count) - 8usize];
    ["Offset of field: satellite_info_s::svid"]
        [::core::mem::offset_of!(satellite_info_s, svid) - 9usize];
    ["Offset of field: satellite_info_s::used"]
        [::core::mem::offset_of!(satellite_info_s, used) - 29usize];
    ["Offset of field: satellite_info_s::elevation"]
        [::core::mem::offset_of!(satellite_info_s, elevation) - 49usize];
    ["Offset of field: satellite_info_s::azimuth"]
        [::core::mem::offset_of!(satellite_info_s, azimuth) - 69usize];
    ["Offset of field: satellite_info_s::snr"]
        [::core::mem::offset_of!(satellite_info_s, snr) - 89usize];
    ["Offset of field: satellite_info_s::prn"]
        [::core::mem::offset_of!(satellite_info_s, prn) - 109usize];
    ["Offset of field: satellite_info_s::_padding0"]
        [::core::mem::offset_of!(satellite_info_s, _padding0) - 129usize];
};
unsafe extern "C" {
    pub static __orb_satellite_info: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct transponder_report_s {
    pub timestamp: u64,
    pub lat: f64,
    pub lon: f64,
    pub icao_address: u32,
    pub altitude: f32,
    pub heading: f32,
    pub hor_velocity: f32,
    pub ver_velocity: f32,
    pub flags: u16,
    pub squawk: u16,
    pub altitude_type: u8,
    pub callsign: [::core::ffi::c_char; 9usize],
    pub emitter_type: u8,
    pub tslc: u8,
    pub uas_id: [u8; 18usize],
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of transponder_report_s"][::core::mem::size_of::<transponder_report_s>() - 80usize];
    ["Alignment of transponder_report_s"][::core::mem::align_of::<transponder_report_s>() - 8usize];
    ["Offset of field: transponder_report_s::timestamp"]
        [::core::mem::offset_of!(transponder_report_s, timestamp) - 0usize];
    ["Offset of field: transponder_report_s::lat"]
        [::core::mem::offset_of!(transponder_report_s, lat) - 8usize];
    ["Offset of field: transponder_report_s::lon"]
        [::core::mem::offset_of!(transponder_report_s, lon) - 16usize];
    ["Offset of field: transponder_report_s::icao_address"]
        [::core::mem::offset_of!(transponder_report_s, icao_address) - 24usize];
    ["Offset of field: transponder_report_s::altitude"]
        [::core::mem::offset_of!(transponder_report_s, altitude) - 28usize];
    ["Offset of field: transponder_report_s::heading"]
        [::core::mem::offset_of!(transponder_report_s, heading) - 32usize];
    ["Offset of field: transponder_report_s::hor_velocity"]
        [::core::mem::offset_of!(transponder_report_s, hor_velocity) - 36usize];
    ["Offset of field: transponder_report_s::ver_velocity"]
        [::core::mem::offset_of!(transponder_report_s, ver_velocity) - 40usize];
    ["Offset of field: transponder_report_s::flags"]
        [::core::mem::offset_of!(transponder_report_s, flags) - 44usize];
    ["Offset of field: transponder_report_s::squawk"]
        [::core::mem::offset_of!(transponder_report_s, squawk) - 46usize];
    ["Offset of field: transponder_report_s::altitude_type"]
        [::core::mem::offset_of!(transponder_report_s, altitude_type) - 48usize];
    ["Offset of field: transponder_report_s::callsign"]
        [::core::mem::offset_of!(transponder_report_s, callsign) - 49usize];
    ["Offset of field: transponder_report_s::emitter_type"]
        [::core::mem::offset_of!(transponder_report_s, emitter_type) - 58usize];
    ["Offset of field: transponder_report_s::tslc"]
        [::core::mem::offset_of!(transponder_report_s, tslc) - 59usize];
    ["Offset of field: transponder_report_s::uas_id"]
        [::core::mem::offset_of!(transponder_report_s, uas_id) - 60usize];
    ["Offset of field: transponder_report_s::_padding0"]
        [::core::mem::offset_of!(transponder_report_s, _padding0) - 78usize];
};
unsafe extern "C" {
    pub static __orb_transponder_report: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_optical_flow_vel_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub vel_body: [f32; 2usize],
    pub vel_ne: [f32; 2usize],
    pub vel_body_filtered: [f32; 2usize],
    pub vel_ne_filtered: [f32; 2usize],
    pub flow_rate_uncompensated: [f32; 2usize],
    pub flow_rate_compensated: [f32; 2usize],
    pub gyro_rate: [f32; 3usize],
    pub gyro_bias: [f32; 3usize],
    pub ref_gyro: [f32; 3usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_optical_flow_vel_s"]
        [::core::mem::size_of::<vehicle_optical_flow_vel_s>() - 104usize];
    ["Alignment of vehicle_optical_flow_vel_s"]
        [::core::mem::align_of::<vehicle_optical_flow_vel_s>() - 8usize];
    ["Offset of field: vehicle_optical_flow_vel_s::timestamp"]
        [::core::mem::offset_of!(vehicle_optical_flow_vel_s, timestamp) - 0usize];
    ["Offset of field: vehicle_optical_flow_vel_s::timestamp_sample"]
        [::core::mem::offset_of!(vehicle_optical_flow_vel_s, timestamp_sample) - 8usize];
    ["Offset of field: vehicle_optical_flow_vel_s::vel_body"]
        [::core::mem::offset_of!(vehicle_optical_flow_vel_s, vel_body) - 16usize];
    ["Offset of field: vehicle_optical_flow_vel_s::vel_ne"]
        [::core::mem::offset_of!(vehicle_optical_flow_vel_s, vel_ne) - 24usize];
    ["Offset of field: vehicle_optical_flow_vel_s::vel_body_filtered"]
        [::core::mem::offset_of!(vehicle_optical_flow_vel_s, vel_body_filtered) - 32usize];
    ["Offset of field: vehicle_optical_flow_vel_s::vel_ne_filtered"]
        [::core::mem::offset_of!(vehicle_optical_flow_vel_s, vel_ne_filtered) - 40usize];
    ["Offset of field: vehicle_optical_flow_vel_s::flow_rate_uncompensated"]
        [::core::mem::offset_of!(vehicle_optical_flow_vel_s, flow_rate_uncompensated) - 48usize];
    ["Offset of field: vehicle_optical_flow_vel_s::flow_rate_compensated"]
        [::core::mem::offset_of!(vehicle_optical_flow_vel_s, flow_rate_compensated) - 56usize];
    ["Offset of field: vehicle_optical_flow_vel_s::gyro_rate"]
        [::core::mem::offset_of!(vehicle_optical_flow_vel_s, gyro_rate) - 64usize];
    ["Offset of field: vehicle_optical_flow_vel_s::gyro_bias"]
        [::core::mem::offset_of!(vehicle_optical_flow_vel_s, gyro_bias) - 76usize];
    ["Offset of field: vehicle_optical_flow_vel_s::ref_gyro"]
        [::core::mem::offset_of!(vehicle_optical_flow_vel_s, ref_gyro) - 88usize];
    ["Offset of field: vehicle_optical_flow_vel_s::_padding0"]
        [::core::mem::offset_of!(vehicle_optical_flow_vel_s, _padding0) - 100usize];
};
unsafe extern "C" {
    pub static __orb_estimator_optical_flow_vel: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_vehicle_optical_flow_vel: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_angular_acceleration_setpoint_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub xyz: [f32; 3usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_angular_acceleration_setpoint_s"]
        [::core::mem::size_of::<vehicle_angular_acceleration_setpoint_s>() - 32usize];
    ["Alignment of vehicle_angular_acceleration_setpoint_s"]
        [::core::mem::align_of::<vehicle_angular_acceleration_setpoint_s>() - 8usize];
    ["Offset of field: vehicle_angular_acceleration_setpoint_s::timestamp"]
        [::core::mem::offset_of!(vehicle_angular_acceleration_setpoint_s, timestamp) - 0usize];
    ["Offset of field: vehicle_angular_acceleration_setpoint_s::timestamp_sample"][::core::mem::offset_of!(
        vehicle_angular_acceleration_setpoint_s,
        timestamp_sample
    ) - 8usize];
    ["Offset of field: vehicle_angular_acceleration_setpoint_s::xyz"]
        [::core::mem::offset_of!(vehicle_angular_acceleration_setpoint_s, xyz) - 16usize];
    ["Offset of field: vehicle_angular_acceleration_setpoint_s::_padding0"]
        [::core::mem::offset_of!(vehicle_angular_acceleration_setpoint_s, _padding0) - 28usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_angular_acceleration_setpoint: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dataman_response_s {
    pub timestamp: u64,
    pub index: u32,
    pub client_id: u8,
    pub request_type: u8,
    pub item: u8,
    pub data: [u8; 56usize],
    pub status: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dataman_response_s"][::core::mem::size_of::<dataman_response_s>() - 72usize];
    ["Alignment of dataman_response_s"][::core::mem::align_of::<dataman_response_s>() - 8usize];
    ["Offset of field: dataman_response_s::timestamp"]
        [::core::mem::offset_of!(dataman_response_s, timestamp) - 0usize];
    ["Offset of field: dataman_response_s::index"]
        [::core::mem::offset_of!(dataman_response_s, index) - 8usize];
    ["Offset of field: dataman_response_s::client_id"]
        [::core::mem::offset_of!(dataman_response_s, client_id) - 12usize];
    ["Offset of field: dataman_response_s::request_type"]
        [::core::mem::offset_of!(dataman_response_s, request_type) - 13usize];
    ["Offset of field: dataman_response_s::item"]
        [::core::mem::offset_of!(dataman_response_s, item) - 14usize];
    ["Offset of field: dataman_response_s::data"]
        [::core::mem::offset_of!(dataman_response_s, data) - 15usize];
    ["Offset of field: dataman_response_s::status"]
        [::core::mem::offset_of!(dataman_response_s, status) - 71usize];
};
unsafe extern "C" {
    pub static __orb_dataman_response: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_optical_flow_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub device_id: u32,
    pub pixel_flow: [f32; 2usize],
    pub delta_angle: [f32; 3usize],
    pub distance_m: f32,
    pub integration_timespan_us: u32,
    pub error_count: u32,
    pub max_flow_rate: f32,
    pub min_ground_distance: f32,
    pub max_ground_distance: f32,
    pub delta_angle_available: bool,
    pub distance_available: bool,
    pub quality: u8,
    pub mode: u8,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_optical_flow_s"][::core::mem::size_of::<sensor_optical_flow_s>() - 72usize];
    ["Alignment of sensor_optical_flow_s"]
        [::core::mem::align_of::<sensor_optical_flow_s>() - 8usize];
    ["Offset of field: sensor_optical_flow_s::timestamp"]
        [::core::mem::offset_of!(sensor_optical_flow_s, timestamp) - 0usize];
    ["Offset of field: sensor_optical_flow_s::timestamp_sample"]
        [::core::mem::offset_of!(sensor_optical_flow_s, timestamp_sample) - 8usize];
    ["Offset of field: sensor_optical_flow_s::device_id"]
        [::core::mem::offset_of!(sensor_optical_flow_s, device_id) - 16usize];
    ["Offset of field: sensor_optical_flow_s::pixel_flow"]
        [::core::mem::offset_of!(sensor_optical_flow_s, pixel_flow) - 20usize];
    ["Offset of field: sensor_optical_flow_s::delta_angle"]
        [::core::mem::offset_of!(sensor_optical_flow_s, delta_angle) - 28usize];
    ["Offset of field: sensor_optical_flow_s::distance_m"]
        [::core::mem::offset_of!(sensor_optical_flow_s, distance_m) - 40usize];
    ["Offset of field: sensor_optical_flow_s::integration_timespan_us"]
        [::core::mem::offset_of!(sensor_optical_flow_s, integration_timespan_us) - 44usize];
    ["Offset of field: sensor_optical_flow_s::error_count"]
        [::core::mem::offset_of!(sensor_optical_flow_s, error_count) - 48usize];
    ["Offset of field: sensor_optical_flow_s::max_flow_rate"]
        [::core::mem::offset_of!(sensor_optical_flow_s, max_flow_rate) - 52usize];
    ["Offset of field: sensor_optical_flow_s::min_ground_distance"]
        [::core::mem::offset_of!(sensor_optical_flow_s, min_ground_distance) - 56usize];
    ["Offset of field: sensor_optical_flow_s::max_ground_distance"]
        [::core::mem::offset_of!(sensor_optical_flow_s, max_ground_distance) - 60usize];
    ["Offset of field: sensor_optical_flow_s::delta_angle_available"]
        [::core::mem::offset_of!(sensor_optical_flow_s, delta_angle_available) - 64usize];
    ["Offset of field: sensor_optical_flow_s::distance_available"]
        [::core::mem::offset_of!(sensor_optical_flow_s, distance_available) - 65usize];
    ["Offset of field: sensor_optical_flow_s::quality"]
        [::core::mem::offset_of!(sensor_optical_flow_s, quality) - 66usize];
    ["Offset of field: sensor_optical_flow_s::mode"]
        [::core::mem::offset_of!(sensor_optical_flow_s, mode) - 67usize];
    ["Offset of field: sensor_optical_flow_s::_padding0"]
        [::core::mem::offset_of!(sensor_optical_flow_s, _padding0) - 68usize];
};
unsafe extern "C" {
    pub static __orb_sensor_optical_flow: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mission_s {
    pub timestamp: u64,
    pub current_seq: i32,
    pub land_start_index: i32,
    pub land_index: i32,
    pub mission_id: u32,
    pub geofence_id: u32,
    pub safe_points_id: u32,
    pub count: u16,
    pub mission_dataman_id: u8,
    pub fence_dataman_id: u8,
    pub safepoint_dataman_id: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mission_s"][::core::mem::size_of::<mission_s>() - 40usize];
    ["Alignment of mission_s"][::core::mem::align_of::<mission_s>() - 8usize];
    ["Offset of field: mission_s::timestamp"]
        [::core::mem::offset_of!(mission_s, timestamp) - 0usize];
    ["Offset of field: mission_s::current_seq"]
        [::core::mem::offset_of!(mission_s, current_seq) - 8usize];
    ["Offset of field: mission_s::land_start_index"]
        [::core::mem::offset_of!(mission_s, land_start_index) - 12usize];
    ["Offset of field: mission_s::land_index"]
        [::core::mem::offset_of!(mission_s, land_index) - 16usize];
    ["Offset of field: mission_s::mission_id"]
        [::core::mem::offset_of!(mission_s, mission_id) - 20usize];
    ["Offset of field: mission_s::geofence_id"]
        [::core::mem::offset_of!(mission_s, geofence_id) - 24usize];
    ["Offset of field: mission_s::safe_points_id"]
        [::core::mem::offset_of!(mission_s, safe_points_id) - 28usize];
    ["Offset of field: mission_s::count"][::core::mem::offset_of!(mission_s, count) - 32usize];
    ["Offset of field: mission_s::mission_dataman_id"]
        [::core::mem::offset_of!(mission_s, mission_dataman_id) - 34usize];
    ["Offset of field: mission_s::fence_dataman_id"]
        [::core::mem::offset_of!(mission_s, fence_dataman_id) - 35usize];
    ["Offset of field: mission_s::safepoint_dataman_id"]
        [::core::mem::offset_of!(mission_s, safepoint_dataman_id) - 36usize];
    ["Offset of field: mission_s::_padding0"]
        [::core::mem::offset_of!(mission_s, _padding0) - 37usize];
};
unsafe extern "C" {
    pub static __orb_mission: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct actuator_outputs_s {
    pub timestamp: u64,
    pub noutputs: u32,
    pub output: [f32; 16usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of actuator_outputs_s"][::core::mem::size_of::<actuator_outputs_s>() - 80usize];
    ["Alignment of actuator_outputs_s"][::core::mem::align_of::<actuator_outputs_s>() - 8usize];
    ["Offset of field: actuator_outputs_s::timestamp"]
        [::core::mem::offset_of!(actuator_outputs_s, timestamp) - 0usize];
    ["Offset of field: actuator_outputs_s::noutputs"]
        [::core::mem::offset_of!(actuator_outputs_s, noutputs) - 8usize];
    ["Offset of field: actuator_outputs_s::output"]
        [::core::mem::offset_of!(actuator_outputs_s, output) - 12usize];
    ["Offset of field: actuator_outputs_s::_padding0"]
        [::core::mem::offset_of!(actuator_outputs_s, _padding0) - 76usize];
};
unsafe extern "C" {
    pub static __orb_actuator_outputs: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_actuator_outputs_sim: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_actuator_outputs_debug: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_gyro_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub device_id: u32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub temperature: f32,
    pub error_count: u32,
    pub clip_counter: [u8; 3usize],
    pub samples: u8,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_gyro_s"][::core::mem::size_of::<sensor_gyro_s>() - 48usize];
    ["Alignment of sensor_gyro_s"][::core::mem::align_of::<sensor_gyro_s>() - 8usize];
    ["Offset of field: sensor_gyro_s::timestamp"]
        [::core::mem::offset_of!(sensor_gyro_s, timestamp) - 0usize];
    ["Offset of field: sensor_gyro_s::timestamp_sample"]
        [::core::mem::offset_of!(sensor_gyro_s, timestamp_sample) - 8usize];
    ["Offset of field: sensor_gyro_s::device_id"]
        [::core::mem::offset_of!(sensor_gyro_s, device_id) - 16usize];
    ["Offset of field: sensor_gyro_s::x"][::core::mem::offset_of!(sensor_gyro_s, x) - 20usize];
    ["Offset of field: sensor_gyro_s::y"][::core::mem::offset_of!(sensor_gyro_s, y) - 24usize];
    ["Offset of field: sensor_gyro_s::z"][::core::mem::offset_of!(sensor_gyro_s, z) - 28usize];
    ["Offset of field: sensor_gyro_s::temperature"]
        [::core::mem::offset_of!(sensor_gyro_s, temperature) - 32usize];
    ["Offset of field: sensor_gyro_s::error_count"]
        [::core::mem::offset_of!(sensor_gyro_s, error_count) - 36usize];
    ["Offset of field: sensor_gyro_s::clip_counter"]
        [::core::mem::offset_of!(sensor_gyro_s, clip_counter) - 40usize];
    ["Offset of field: sensor_gyro_s::samples"]
        [::core::mem::offset_of!(sensor_gyro_s, samples) - 43usize];
    ["Offset of field: sensor_gyro_s::_padding0"]
        [::core::mem::offset_of!(sensor_gyro_s, _padding0) - 44usize];
};
unsafe extern "C" {
    pub static __orb_sensor_gyro: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct debug_key_value_s {
    pub timestamp: u64,
    pub value: f32,
    pub key: [::core::ffi::c_char; 10usize],
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of debug_key_value_s"][::core::mem::size_of::<debug_key_value_s>() - 24usize];
    ["Alignment of debug_key_value_s"][::core::mem::align_of::<debug_key_value_s>() - 8usize];
    ["Offset of field: debug_key_value_s::timestamp"]
        [::core::mem::offset_of!(debug_key_value_s, timestamp) - 0usize];
    ["Offset of field: debug_key_value_s::value"]
        [::core::mem::offset_of!(debug_key_value_s, value) - 8usize];
    ["Offset of field: debug_key_value_s::key"]
        [::core::mem::offset_of!(debug_key_value_s, key) - 12usize];
    ["Offset of field: debug_key_value_s::_padding0"]
        [::core::mem::offset_of!(debug_key_value_s, _padding0) - 22usize];
};
unsafe extern "C" {
    pub static __orb_debug_key_value: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct action_request_s {
    pub timestamp: u64,
    pub action: u8,
    pub source: u8,
    pub mode: u8,
    pub _padding0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of action_request_s"][::core::mem::size_of::<action_request_s>() - 16usize];
    ["Alignment of action_request_s"][::core::mem::align_of::<action_request_s>() - 8usize];
    ["Offset of field: action_request_s::timestamp"]
        [::core::mem::offset_of!(action_request_s, timestamp) - 0usize];
    ["Offset of field: action_request_s::action"]
        [::core::mem::offset_of!(action_request_s, action) - 8usize];
    ["Offset of field: action_request_s::source"]
        [::core::mem::offset_of!(action_request_s, source) - 9usize];
    ["Offset of field: action_request_s::mode"]
        [::core::mem::offset_of!(action_request_s, mode) - 10usize];
    ["Offset of field: action_request_s::_padding0"]
        [::core::mem::offset_of!(action_request_s, _padding0) - 11usize];
};
unsafe extern "C" {
    pub static __orb_action_request: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_land_detected_s {
    pub timestamp: u64,
    pub freefall: bool,
    pub ground_contact: bool,
    pub maybe_landed: bool,
    pub landed: bool,
    pub in_ground_effect: bool,
    pub in_descend: bool,
    pub has_low_throttle: bool,
    pub vertical_movement: bool,
    pub horizontal_movement: bool,
    pub rotational_movement: bool,
    pub close_to_ground_or_skipped_check: bool,
    pub at_rest: bool,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_land_detected_s"]
        [::core::mem::size_of::<vehicle_land_detected_s>() - 24usize];
    ["Alignment of vehicle_land_detected_s"]
        [::core::mem::align_of::<vehicle_land_detected_s>() - 8usize];
    ["Offset of field: vehicle_land_detected_s::timestamp"]
        [::core::mem::offset_of!(vehicle_land_detected_s, timestamp) - 0usize];
    ["Offset of field: vehicle_land_detected_s::freefall"]
        [::core::mem::offset_of!(vehicle_land_detected_s, freefall) - 8usize];
    ["Offset of field: vehicle_land_detected_s::ground_contact"]
        [::core::mem::offset_of!(vehicle_land_detected_s, ground_contact) - 9usize];
    ["Offset of field: vehicle_land_detected_s::maybe_landed"]
        [::core::mem::offset_of!(vehicle_land_detected_s, maybe_landed) - 10usize];
    ["Offset of field: vehicle_land_detected_s::landed"]
        [::core::mem::offset_of!(vehicle_land_detected_s, landed) - 11usize];
    ["Offset of field: vehicle_land_detected_s::in_ground_effect"]
        [::core::mem::offset_of!(vehicle_land_detected_s, in_ground_effect) - 12usize];
    ["Offset of field: vehicle_land_detected_s::in_descend"]
        [::core::mem::offset_of!(vehicle_land_detected_s, in_descend) - 13usize];
    ["Offset of field: vehicle_land_detected_s::has_low_throttle"]
        [::core::mem::offset_of!(vehicle_land_detected_s, has_low_throttle) - 14usize];
    ["Offset of field: vehicle_land_detected_s::vertical_movement"]
        [::core::mem::offset_of!(vehicle_land_detected_s, vertical_movement) - 15usize];
    ["Offset of field: vehicle_land_detected_s::horizontal_movement"]
        [::core::mem::offset_of!(vehicle_land_detected_s, horizontal_movement) - 16usize];
    ["Offset of field: vehicle_land_detected_s::rotational_movement"]
        [::core::mem::offset_of!(vehicle_land_detected_s, rotational_movement) - 17usize];
    ["Offset of field: vehicle_land_detected_s::close_to_ground_or_skipped_check"][::core::mem::offset_of!(
        vehicle_land_detected_s,
        close_to_ground_or_skipped_check
    ) - 18usize];
    ["Offset of field: vehicle_land_detected_s::at_rest"]
        [::core::mem::offset_of!(vehicle_land_detected_s, at_rest) - 19usize];
    ["Offset of field: vehicle_land_detected_s::_padding0"]
        [::core::mem::offset_of!(vehicle_land_detected_s, _padding0) - 20usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_land_detected: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensors_status_s {
    pub timestamp: u64,
    pub device_id_primary: u32,
    pub device_ids: [u32; 4usize],
    pub inconsistency: [f32; 4usize],
    pub healthy: [bool; 4usize],
    pub priority: [u8; 4usize],
    pub enabled: [bool; 4usize],
    pub external: [bool; 4usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensors_status_s"][::core::mem::size_of::<sensors_status_s>() - 64usize];
    ["Alignment of sensors_status_s"][::core::mem::align_of::<sensors_status_s>() - 8usize];
    ["Offset of field: sensors_status_s::timestamp"]
        [::core::mem::offset_of!(sensors_status_s, timestamp) - 0usize];
    ["Offset of field: sensors_status_s::device_id_primary"]
        [::core::mem::offset_of!(sensors_status_s, device_id_primary) - 8usize];
    ["Offset of field: sensors_status_s::device_ids"]
        [::core::mem::offset_of!(sensors_status_s, device_ids) - 12usize];
    ["Offset of field: sensors_status_s::inconsistency"]
        [::core::mem::offset_of!(sensors_status_s, inconsistency) - 28usize];
    ["Offset of field: sensors_status_s::healthy"]
        [::core::mem::offset_of!(sensors_status_s, healthy) - 44usize];
    ["Offset of field: sensors_status_s::priority"]
        [::core::mem::offset_of!(sensors_status_s, priority) - 48usize];
    ["Offset of field: sensors_status_s::enabled"]
        [::core::mem::offset_of!(sensors_status_s, enabled) - 52usize];
    ["Offset of field: sensors_status_s::external"]
        [::core::mem::offset_of!(sensors_status_s, external) - 56usize];
    ["Offset of field: sensors_status_s::_padding0"]
        [::core::mem::offset_of!(sensors_status_s, _padding0) - 60usize];
};
unsafe extern "C" {
    pub static __orb_sensors_status_baro: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_sensors_status_mag: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_torque_setpoint_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub xyz: [f32; 3usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_torque_setpoint_s"]
        [::core::mem::size_of::<vehicle_torque_setpoint_s>() - 32usize];
    ["Alignment of vehicle_torque_setpoint_s"]
        [::core::mem::align_of::<vehicle_torque_setpoint_s>() - 8usize];
    ["Offset of field: vehicle_torque_setpoint_s::timestamp"]
        [::core::mem::offset_of!(vehicle_torque_setpoint_s, timestamp) - 0usize];
    ["Offset of field: vehicle_torque_setpoint_s::timestamp_sample"]
        [::core::mem::offset_of!(vehicle_torque_setpoint_s, timestamp_sample) - 8usize];
    ["Offset of field: vehicle_torque_setpoint_s::xyz"]
        [::core::mem::offset_of!(vehicle_torque_setpoint_s, xyz) - 16usize];
    ["Offset of field: vehicle_torque_setpoint_s::_padding0"]
        [::core::mem::offset_of!(vehicle_torque_setpoint_s, _padding0) - 28usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_torque_setpoint: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_vehicle_torque_setpoint_virtual_fw: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_vehicle_torque_setpoint_virtual_mc: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_global_position_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub lat: f64,
    pub lon: f64,
    pub alt: f32,
    pub alt_ellipsoid: f32,
    pub delta_alt: f32,
    pub delta_terrain: f32,
    pub eph: f32,
    pub epv: f32,
    pub terrain_alt: f32,
    pub lat_lon_valid: bool,
    pub alt_valid: bool,
    pub lat_lon_reset_counter: u8,
    pub alt_reset_counter: u8,
    pub terrain_reset_counter: u8,
    pub terrain_alt_valid: bool,
    pub dead_reckoning: bool,
    pub _padding0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_global_position_s"]
        [::core::mem::size_of::<vehicle_global_position_s>() - 72usize];
    ["Alignment of vehicle_global_position_s"]
        [::core::mem::align_of::<vehicle_global_position_s>() - 8usize];
    ["Offset of field: vehicle_global_position_s::timestamp"]
        [::core::mem::offset_of!(vehicle_global_position_s, timestamp) - 0usize];
    ["Offset of field: vehicle_global_position_s::timestamp_sample"]
        [::core::mem::offset_of!(vehicle_global_position_s, timestamp_sample) - 8usize];
    ["Offset of field: vehicle_global_position_s::lat"]
        [::core::mem::offset_of!(vehicle_global_position_s, lat) - 16usize];
    ["Offset of field: vehicle_global_position_s::lon"]
        [::core::mem::offset_of!(vehicle_global_position_s, lon) - 24usize];
    ["Offset of field: vehicle_global_position_s::alt"]
        [::core::mem::offset_of!(vehicle_global_position_s, alt) - 32usize];
    ["Offset of field: vehicle_global_position_s::alt_ellipsoid"]
        [::core::mem::offset_of!(vehicle_global_position_s, alt_ellipsoid) - 36usize];
    ["Offset of field: vehicle_global_position_s::delta_alt"]
        [::core::mem::offset_of!(vehicle_global_position_s, delta_alt) - 40usize];
    ["Offset of field: vehicle_global_position_s::delta_terrain"]
        [::core::mem::offset_of!(vehicle_global_position_s, delta_terrain) - 44usize];
    ["Offset of field: vehicle_global_position_s::eph"]
        [::core::mem::offset_of!(vehicle_global_position_s, eph) - 48usize];
    ["Offset of field: vehicle_global_position_s::epv"]
        [::core::mem::offset_of!(vehicle_global_position_s, epv) - 52usize];
    ["Offset of field: vehicle_global_position_s::terrain_alt"]
        [::core::mem::offset_of!(vehicle_global_position_s, terrain_alt) - 56usize];
    ["Offset of field: vehicle_global_position_s::lat_lon_valid"]
        [::core::mem::offset_of!(vehicle_global_position_s, lat_lon_valid) - 60usize];
    ["Offset of field: vehicle_global_position_s::alt_valid"]
        [::core::mem::offset_of!(vehicle_global_position_s, alt_valid) - 61usize];
    ["Offset of field: vehicle_global_position_s::lat_lon_reset_counter"]
        [::core::mem::offset_of!(vehicle_global_position_s, lat_lon_reset_counter) - 62usize];
    ["Offset of field: vehicle_global_position_s::alt_reset_counter"]
        [::core::mem::offset_of!(vehicle_global_position_s, alt_reset_counter) - 63usize];
    ["Offset of field: vehicle_global_position_s::terrain_reset_counter"]
        [::core::mem::offset_of!(vehicle_global_position_s, terrain_reset_counter) - 64usize];
    ["Offset of field: vehicle_global_position_s::terrain_alt_valid"]
        [::core::mem::offset_of!(vehicle_global_position_s, terrain_alt_valid) - 65usize];
    ["Offset of field: vehicle_global_position_s::dead_reckoning"]
        [::core::mem::offset_of!(vehicle_global_position_s, dead_reckoning) - 66usize];
    ["Offset of field: vehicle_global_position_s::_padding0"]
        [::core::mem::offset_of!(vehicle_global_position_s, _padding0) - 67usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_global_position: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_vehicle_global_position_groundtruth: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_external_ins_global_position: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_global_position: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_aux_global_position: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_odometry_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub position: [f32; 3usize],
    pub q: [f32; 4usize],
    pub velocity: [f32; 3usize],
    pub angular_velocity: [f32; 3usize],
    pub position_variance: [f32; 3usize],
    pub orientation_variance: [f32; 3usize],
    pub velocity_variance: [f32; 3usize],
    pub pose_frame: u8,
    pub velocity_frame: u8,
    pub reset_counter: u8,
    pub quality: i8,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_odometry_s"][::core::mem::size_of::<vehicle_odometry_s>() - 112usize];
    ["Alignment of vehicle_odometry_s"][::core::mem::align_of::<vehicle_odometry_s>() - 8usize];
    ["Offset of field: vehicle_odometry_s::timestamp"]
        [::core::mem::offset_of!(vehicle_odometry_s, timestamp) - 0usize];
    ["Offset of field: vehicle_odometry_s::timestamp_sample"]
        [::core::mem::offset_of!(vehicle_odometry_s, timestamp_sample) - 8usize];
    ["Offset of field: vehicle_odometry_s::position"]
        [::core::mem::offset_of!(vehicle_odometry_s, position) - 16usize];
    ["Offset of field: vehicle_odometry_s::q"]
        [::core::mem::offset_of!(vehicle_odometry_s, q) - 28usize];
    ["Offset of field: vehicle_odometry_s::velocity"]
        [::core::mem::offset_of!(vehicle_odometry_s, velocity) - 44usize];
    ["Offset of field: vehicle_odometry_s::angular_velocity"]
        [::core::mem::offset_of!(vehicle_odometry_s, angular_velocity) - 56usize];
    ["Offset of field: vehicle_odometry_s::position_variance"]
        [::core::mem::offset_of!(vehicle_odometry_s, position_variance) - 68usize];
    ["Offset of field: vehicle_odometry_s::orientation_variance"]
        [::core::mem::offset_of!(vehicle_odometry_s, orientation_variance) - 80usize];
    ["Offset of field: vehicle_odometry_s::velocity_variance"]
        [::core::mem::offset_of!(vehicle_odometry_s, velocity_variance) - 92usize];
    ["Offset of field: vehicle_odometry_s::pose_frame"]
        [::core::mem::offset_of!(vehicle_odometry_s, pose_frame) - 104usize];
    ["Offset of field: vehicle_odometry_s::velocity_frame"]
        [::core::mem::offset_of!(vehicle_odometry_s, velocity_frame) - 105usize];
    ["Offset of field: vehicle_odometry_s::reset_counter"]
        [::core::mem::offset_of!(vehicle_odometry_s, reset_counter) - 106usize];
    ["Offset of field: vehicle_odometry_s::quality"]
        [::core::mem::offset_of!(vehicle_odometry_s, quality) - 107usize];
    ["Offset of field: vehicle_odometry_s::_padding0"]
        [::core::mem::offset_of!(vehicle_odometry_s, _padding0) - 108usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_odometry: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_vehicle_mocap_odometry: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_vehicle_visual_odometry: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_odometry: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dataman_request_s {
    pub timestamp: u64,
    pub index: u32,
    pub data_length: u32,
    pub client_id: u8,
    pub request_type: u8,
    pub item: u8,
    pub data: [u8; 56usize],
    pub _padding0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dataman_request_s"][::core::mem::size_of::<dataman_request_s>() - 80usize];
    ["Alignment of dataman_request_s"][::core::mem::align_of::<dataman_request_s>() - 8usize];
    ["Offset of field: dataman_request_s::timestamp"]
        [::core::mem::offset_of!(dataman_request_s, timestamp) - 0usize];
    ["Offset of field: dataman_request_s::index"]
        [::core::mem::offset_of!(dataman_request_s, index) - 8usize];
    ["Offset of field: dataman_request_s::data_length"]
        [::core::mem::offset_of!(dataman_request_s, data_length) - 12usize];
    ["Offset of field: dataman_request_s::client_id"]
        [::core::mem::offset_of!(dataman_request_s, client_id) - 16usize];
    ["Offset of field: dataman_request_s::request_type"]
        [::core::mem::offset_of!(dataman_request_s, request_type) - 17usize];
    ["Offset of field: dataman_request_s::item"]
        [::core::mem::offset_of!(dataman_request_s, item) - 18usize];
    ["Offset of field: dataman_request_s::data"]
        [::core::mem::offset_of!(dataman_request_s, data) - 19usize];
    ["Offset of field: dataman_request_s::_padding0"]
        [::core::mem::offset_of!(dataman_request_s, _padding0) - 75usize];
};
unsafe extern "C" {
    pub static __orb_dataman_request: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rover_rate_setpoint_s {
    pub timestamp: u64,
    pub yaw_rate_setpoint: f32,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rover_rate_setpoint_s"][::core::mem::size_of::<rover_rate_setpoint_s>() - 16usize];
    ["Alignment of rover_rate_setpoint_s"]
        [::core::mem::align_of::<rover_rate_setpoint_s>() - 8usize];
    ["Offset of field: rover_rate_setpoint_s::timestamp"]
        [::core::mem::offset_of!(rover_rate_setpoint_s, timestamp) - 0usize];
    ["Offset of field: rover_rate_setpoint_s::yaw_rate_setpoint"]
        [::core::mem::offset_of!(rover_rate_setpoint_s, yaw_rate_setpoint) - 8usize];
    ["Offset of field: rover_rate_setpoint_s::_padding0"]
        [::core::mem::offset_of!(rover_rate_setpoint_s, _padding0) - 12usize];
};
unsafe extern "C" {
    pub static __orb_rover_rate_setpoint: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_thrust_setpoint_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub xyz: [f32; 3usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_thrust_setpoint_s"]
        [::core::mem::size_of::<vehicle_thrust_setpoint_s>() - 32usize];
    ["Alignment of vehicle_thrust_setpoint_s"]
        [::core::mem::align_of::<vehicle_thrust_setpoint_s>() - 8usize];
    ["Offset of field: vehicle_thrust_setpoint_s::timestamp"]
        [::core::mem::offset_of!(vehicle_thrust_setpoint_s, timestamp) - 0usize];
    ["Offset of field: vehicle_thrust_setpoint_s::timestamp_sample"]
        [::core::mem::offset_of!(vehicle_thrust_setpoint_s, timestamp_sample) - 8usize];
    ["Offset of field: vehicle_thrust_setpoint_s::xyz"]
        [::core::mem::offset_of!(vehicle_thrust_setpoint_s, xyz) - 16usize];
    ["Offset of field: vehicle_thrust_setpoint_s::_padding0"]
        [::core::mem::offset_of!(vehicle_thrust_setpoint_s, _padding0) - 28usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_thrust_setpoint: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_vehicle_thrust_setpoint_virtual_fw: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_vehicle_thrust_setpoint_virtual_mc: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mission_result_s {
    pub timestamp: u64,
    pub mission_id: u32,
    pub geofence_id: u32,
    pub home_position_counter: u32,
    pub seq_reached: i32,
    pub seq_current: u16,
    pub seq_total: u16,
    pub item_changed_index: u16,
    pub item_do_jump_remaining: u16,
    pub valid: bool,
    pub warning: bool,
    pub finished: bool,
    pub failure: bool,
    pub item_do_jump_changed: bool,
    pub execution_mode: u8,
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mission_result_s"][::core::mem::size_of::<mission_result_s>() - 40usize];
    ["Alignment of mission_result_s"][::core::mem::align_of::<mission_result_s>() - 8usize];
    ["Offset of field: mission_result_s::timestamp"]
        [::core::mem::offset_of!(mission_result_s, timestamp) - 0usize];
    ["Offset of field: mission_result_s::mission_id"]
        [::core::mem::offset_of!(mission_result_s, mission_id) - 8usize];
    ["Offset of field: mission_result_s::geofence_id"]
        [::core::mem::offset_of!(mission_result_s, geofence_id) - 12usize];
    ["Offset of field: mission_result_s::home_position_counter"]
        [::core::mem::offset_of!(mission_result_s, home_position_counter) - 16usize];
    ["Offset of field: mission_result_s::seq_reached"]
        [::core::mem::offset_of!(mission_result_s, seq_reached) - 20usize];
    ["Offset of field: mission_result_s::seq_current"]
        [::core::mem::offset_of!(mission_result_s, seq_current) - 24usize];
    ["Offset of field: mission_result_s::seq_total"]
        [::core::mem::offset_of!(mission_result_s, seq_total) - 26usize];
    ["Offset of field: mission_result_s::item_changed_index"]
        [::core::mem::offset_of!(mission_result_s, item_changed_index) - 28usize];
    ["Offset of field: mission_result_s::item_do_jump_remaining"]
        [::core::mem::offset_of!(mission_result_s, item_do_jump_remaining) - 30usize];
    ["Offset of field: mission_result_s::valid"]
        [::core::mem::offset_of!(mission_result_s, valid) - 32usize];
    ["Offset of field: mission_result_s::warning"]
        [::core::mem::offset_of!(mission_result_s, warning) - 33usize];
    ["Offset of field: mission_result_s::finished"]
        [::core::mem::offset_of!(mission_result_s, finished) - 34usize];
    ["Offset of field: mission_result_s::failure"]
        [::core::mem::offset_of!(mission_result_s, failure) - 35usize];
    ["Offset of field: mission_result_s::item_do_jump_changed"]
        [::core::mem::offset_of!(mission_result_s, item_do_jump_changed) - 36usize];
    ["Offset of field: mission_result_s::execution_mode"]
        [::core::mem::offset_of!(mission_result_s, execution_mode) - 37usize];
    ["Offset of field: mission_result_s::_padding0"]
        [::core::mem::offset_of!(mission_result_s, _padding0) - 38usize];
};
unsafe extern "C" {
    pub static __orb_mission_result: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parameter_reset_request_s {
    pub timestamp: u64,
    pub parameter_index: u16,
    pub reset_all: bool,
    pub _padding0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of parameter_reset_request_s"]
        [::core::mem::size_of::<parameter_reset_request_s>() - 16usize];
    ["Alignment of parameter_reset_request_s"]
        [::core::mem::align_of::<parameter_reset_request_s>() - 8usize];
    ["Offset of field: parameter_reset_request_s::timestamp"]
        [::core::mem::offset_of!(parameter_reset_request_s, timestamp) - 0usize];
    ["Offset of field: parameter_reset_request_s::parameter_index"]
        [::core::mem::offset_of!(parameter_reset_request_s, parameter_index) - 8usize];
    ["Offset of field: parameter_reset_request_s::reset_all"]
        [::core::mem::offset_of!(parameter_reset_request_s, reset_all) - 10usize];
    ["Offset of field: parameter_reset_request_s::_padding0"]
        [::core::mem::offset_of!(parameter_reset_request_s, _padding0) - 11usize];
};
unsafe extern "C" {
    pub static __orb_parameter_reset_request: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct estimator_sensor_bias_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub gyro_device_id: u32,
    pub gyro_bias: [f32; 3usize],
    pub gyro_bias_limit: f32,
    pub gyro_bias_variance: [f32; 3usize],
    pub accel_device_id: u32,
    pub accel_bias: [f32; 3usize],
    pub accel_bias_limit: f32,
    pub accel_bias_variance: [f32; 3usize],
    pub mag_device_id: u32,
    pub mag_bias: [f32; 3usize],
    pub mag_bias_limit: f32,
    pub mag_bias_variance: [f32; 3usize],
    pub gyro_bias_valid: bool,
    pub gyro_bias_stable: bool,
    pub accel_bias_valid: bool,
    pub accel_bias_stable: bool,
    pub mag_bias_valid: bool,
    pub mag_bias_stable: bool,
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of estimator_sensor_bias_s"]
        [::core::mem::size_of::<estimator_sensor_bias_s>() - 120usize];
    ["Alignment of estimator_sensor_bias_s"]
        [::core::mem::align_of::<estimator_sensor_bias_s>() - 8usize];
    ["Offset of field: estimator_sensor_bias_s::timestamp"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, timestamp) - 0usize];
    ["Offset of field: estimator_sensor_bias_s::timestamp_sample"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, timestamp_sample) - 8usize];
    ["Offset of field: estimator_sensor_bias_s::gyro_device_id"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, gyro_device_id) - 16usize];
    ["Offset of field: estimator_sensor_bias_s::gyro_bias"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, gyro_bias) - 20usize];
    ["Offset of field: estimator_sensor_bias_s::gyro_bias_limit"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, gyro_bias_limit) - 32usize];
    ["Offset of field: estimator_sensor_bias_s::gyro_bias_variance"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, gyro_bias_variance) - 36usize];
    ["Offset of field: estimator_sensor_bias_s::accel_device_id"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, accel_device_id) - 48usize];
    ["Offset of field: estimator_sensor_bias_s::accel_bias"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, accel_bias) - 52usize];
    ["Offset of field: estimator_sensor_bias_s::accel_bias_limit"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, accel_bias_limit) - 64usize];
    ["Offset of field: estimator_sensor_bias_s::accel_bias_variance"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, accel_bias_variance) - 68usize];
    ["Offset of field: estimator_sensor_bias_s::mag_device_id"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, mag_device_id) - 80usize];
    ["Offset of field: estimator_sensor_bias_s::mag_bias"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, mag_bias) - 84usize];
    ["Offset of field: estimator_sensor_bias_s::mag_bias_limit"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, mag_bias_limit) - 96usize];
    ["Offset of field: estimator_sensor_bias_s::mag_bias_variance"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, mag_bias_variance) - 100usize];
    ["Offset of field: estimator_sensor_bias_s::gyro_bias_valid"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, gyro_bias_valid) - 112usize];
    ["Offset of field: estimator_sensor_bias_s::gyro_bias_stable"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, gyro_bias_stable) - 113usize];
    ["Offset of field: estimator_sensor_bias_s::accel_bias_valid"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, accel_bias_valid) - 114usize];
    ["Offset of field: estimator_sensor_bias_s::accel_bias_stable"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, accel_bias_stable) - 115usize];
    ["Offset of field: estimator_sensor_bias_s::mag_bias_valid"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, mag_bias_valid) - 116usize];
    ["Offset of field: estimator_sensor_bias_s::mag_bias_stable"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, mag_bias_stable) - 117usize];
    ["Offset of field: estimator_sensor_bias_s::_padding0"]
        [::core::mem::offset_of!(estimator_sensor_bias_s, _padding0) - 118usize];
};
unsafe extern "C" {
    pub static __orb_estimator_sensor_bias: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tune_control_s {
    pub timestamp: u64,
    pub duration: u32,
    pub silence: u32,
    pub frequency: u16,
    pub tune_id: u8,
    pub tune_override: bool,
    pub volume: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tune_control_s"][::core::mem::size_of::<tune_control_s>() - 24usize];
    ["Alignment of tune_control_s"][::core::mem::align_of::<tune_control_s>() - 8usize];
    ["Offset of field: tune_control_s::timestamp"]
        [::core::mem::offset_of!(tune_control_s, timestamp) - 0usize];
    ["Offset of field: tune_control_s::duration"]
        [::core::mem::offset_of!(tune_control_s, duration) - 8usize];
    ["Offset of field: tune_control_s::silence"]
        [::core::mem::offset_of!(tune_control_s, silence) - 12usize];
    ["Offset of field: tune_control_s::frequency"]
        [::core::mem::offset_of!(tune_control_s, frequency) - 16usize];
    ["Offset of field: tune_control_s::tune_id"]
        [::core::mem::offset_of!(tune_control_s, tune_id) - 18usize];
    ["Offset of field: tune_control_s::tune_override"]
        [::core::mem::offset_of!(tune_control_s, tune_override) - 19usize];
    ["Offset of field: tune_control_s::volume"]
        [::core::mem::offset_of!(tune_control_s, volume) - 20usize];
    ["Offset of field: tune_control_s::_padding0"]
        [::core::mem::offset_of!(tune_control_s, _padding0) - 21usize];
};
unsafe extern "C" {
    pub static __orb_tune_control: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_preflight_mag_s {
    pub timestamp: u64,
    pub mag_inconsistency_angle: f32,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_preflight_mag_s"][::core::mem::size_of::<sensor_preflight_mag_s>() - 16usize];
    ["Alignment of sensor_preflight_mag_s"]
        [::core::mem::align_of::<sensor_preflight_mag_s>() - 8usize];
    ["Offset of field: sensor_preflight_mag_s::timestamp"]
        [::core::mem::offset_of!(sensor_preflight_mag_s, timestamp) - 0usize];
    ["Offset of field: sensor_preflight_mag_s::mag_inconsistency_angle"]
        [::core::mem::offset_of!(sensor_preflight_mag_s, mag_inconsistency_angle) - 8usize];
    ["Offset of field: sensor_preflight_mag_s::_padding0"]
        [::core::mem::offset_of!(sensor_preflight_mag_s, _padding0) - 12usize];
};
unsafe extern "C" {
    pub static __orb_sensor_preflight_mag: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event_s {
    pub timestamp: u64,
    pub id: u32,
    pub event_sequence: u16,
    pub arguments: [u8; 25usize],
    pub log_levels: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of event_s"][::core::mem::size_of::<event_s>() - 40usize];
    ["Alignment of event_s"][::core::mem::align_of::<event_s>() - 8usize];
    ["Offset of field: event_s::timestamp"][::core::mem::offset_of!(event_s, timestamp) - 0usize];
    ["Offset of field: event_s::id"][::core::mem::offset_of!(event_s, id) - 8usize];
    ["Offset of field: event_s::event_sequence"]
        [::core::mem::offset_of!(event_s, event_sequence) - 12usize];
    ["Offset of field: event_s::arguments"][::core::mem::offset_of!(event_s, arguments) - 14usize];
    ["Offset of field: event_s::log_levels"]
        [::core::mem::offset_of!(event_s, log_levels) - 39usize];
};
unsafe extern "C" {
    pub static __orb_event: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arming_check_reply_s {
    pub timestamp: u64,
    pub request_id: u8,
    pub registration_id: u8,
    pub health_component_index: u8,
    pub health_component_is_present: bool,
    pub health_component_warning: bool,
    pub health_component_error: bool,
    pub can_arm_and_run: bool,
    pub num_events: u8,
    pub mode_req_angular_velocity: bool,
    pub mode_req_attitude: bool,
    pub mode_req_local_alt: bool,
    pub mode_req_local_position: bool,
    pub mode_req_local_position_relaxed: bool,
    pub mode_req_global_position: bool,
    pub mode_req_mission: bool,
    pub mode_req_home_position: bool,
    pub mode_req_prevent_arming: bool,
    pub mode_req_manual_control: bool,
    pub _padding0: [u8; 6usize],
    pub events: [event_s; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arming_check_reply_s"][::core::mem::size_of::<arming_check_reply_s>() - 232usize];
    ["Alignment of arming_check_reply_s"][::core::mem::align_of::<arming_check_reply_s>() - 8usize];
    ["Offset of field: arming_check_reply_s::timestamp"]
        [::core::mem::offset_of!(arming_check_reply_s, timestamp) - 0usize];
    ["Offset of field: arming_check_reply_s::request_id"]
        [::core::mem::offset_of!(arming_check_reply_s, request_id) - 8usize];
    ["Offset of field: arming_check_reply_s::registration_id"]
        [::core::mem::offset_of!(arming_check_reply_s, registration_id) - 9usize];
    ["Offset of field: arming_check_reply_s::health_component_index"]
        [::core::mem::offset_of!(arming_check_reply_s, health_component_index) - 10usize];
    ["Offset of field: arming_check_reply_s::health_component_is_present"]
        [::core::mem::offset_of!(arming_check_reply_s, health_component_is_present) - 11usize];
    ["Offset of field: arming_check_reply_s::health_component_warning"]
        [::core::mem::offset_of!(arming_check_reply_s, health_component_warning) - 12usize];
    ["Offset of field: arming_check_reply_s::health_component_error"]
        [::core::mem::offset_of!(arming_check_reply_s, health_component_error) - 13usize];
    ["Offset of field: arming_check_reply_s::can_arm_and_run"]
        [::core::mem::offset_of!(arming_check_reply_s, can_arm_and_run) - 14usize];
    ["Offset of field: arming_check_reply_s::num_events"]
        [::core::mem::offset_of!(arming_check_reply_s, num_events) - 15usize];
    ["Offset of field: arming_check_reply_s::mode_req_angular_velocity"]
        [::core::mem::offset_of!(arming_check_reply_s, mode_req_angular_velocity) - 16usize];
    ["Offset of field: arming_check_reply_s::mode_req_attitude"]
        [::core::mem::offset_of!(arming_check_reply_s, mode_req_attitude) - 17usize];
    ["Offset of field: arming_check_reply_s::mode_req_local_alt"]
        [::core::mem::offset_of!(arming_check_reply_s, mode_req_local_alt) - 18usize];
    ["Offset of field: arming_check_reply_s::mode_req_local_position"]
        [::core::mem::offset_of!(arming_check_reply_s, mode_req_local_position) - 19usize];
    ["Offset of field: arming_check_reply_s::mode_req_local_position_relaxed"]
        [::core::mem::offset_of!(arming_check_reply_s, mode_req_local_position_relaxed) - 20usize];
    ["Offset of field: arming_check_reply_s::mode_req_global_position"]
        [::core::mem::offset_of!(arming_check_reply_s, mode_req_global_position) - 21usize];
    ["Offset of field: arming_check_reply_s::mode_req_mission"]
        [::core::mem::offset_of!(arming_check_reply_s, mode_req_mission) - 22usize];
    ["Offset of field: arming_check_reply_s::mode_req_home_position"]
        [::core::mem::offset_of!(arming_check_reply_s, mode_req_home_position) - 23usize];
    ["Offset of field: arming_check_reply_s::mode_req_prevent_arming"]
        [::core::mem::offset_of!(arming_check_reply_s, mode_req_prevent_arming) - 24usize];
    ["Offset of field: arming_check_reply_s::mode_req_manual_control"]
        [::core::mem::offset_of!(arming_check_reply_s, mode_req_manual_control) - 25usize];
    ["Offset of field: arming_check_reply_s::_padding0"]
        [::core::mem::offset_of!(arming_check_reply_s, _padding0) - 26usize];
    ["Offset of field: arming_check_reply_s::events"]
        [::core::mem::offset_of!(arming_check_reply_s, events) - 32usize];
};
unsafe extern "C" {
    pub static __orb_arming_check_reply: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pwm_input_s {
    pub timestamp: u64,
    pub error_count: u64,
    pub pulse_width: u32,
    pub period: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pwm_input_s"][::core::mem::size_of::<pwm_input_s>() - 24usize];
    ["Alignment of pwm_input_s"][::core::mem::align_of::<pwm_input_s>() - 8usize];
    ["Offset of field: pwm_input_s::timestamp"]
        [::core::mem::offset_of!(pwm_input_s, timestamp) - 0usize];
    ["Offset of field: pwm_input_s::error_count"]
        [::core::mem::offset_of!(pwm_input_s, error_count) - 8usize];
    ["Offset of field: pwm_input_s::pulse_width"]
        [::core::mem::offset_of!(pwm_input_s, pulse_width) - 16usize];
    ["Offset of field: pwm_input_s::period"]
        [::core::mem::offset_of!(pwm_input_s, period) - 20usize];
};
unsafe extern "C" {
    pub static __orb_pwm_input: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wheel_encoders_s {
    pub timestamp: u64,
    pub wheel_speed: [f32; 2usize],
    pub wheel_angle: [f32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wheel_encoders_s"][::core::mem::size_of::<wheel_encoders_s>() - 24usize];
    ["Alignment of wheel_encoders_s"][::core::mem::align_of::<wheel_encoders_s>() - 8usize];
    ["Offset of field: wheel_encoders_s::timestamp"]
        [::core::mem::offset_of!(wheel_encoders_s, timestamp) - 0usize];
    ["Offset of field: wheel_encoders_s::wheel_speed"]
        [::core::mem::offset_of!(wheel_encoders_s, wheel_speed) - 8usize];
    ["Offset of field: wheel_encoders_s::wheel_angle"]
        [::core::mem::offset_of!(wheel_encoders_s, wheel_angle) - 16usize];
};
unsafe extern "C" {
    pub static __orb_wheel_encoders: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arming_check_request_s {
    pub timestamp: u64,
    pub request_id: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arming_check_request_s"][::core::mem::size_of::<arming_check_request_s>() - 16usize];
    ["Alignment of arming_check_request_s"]
        [::core::mem::align_of::<arming_check_request_s>() - 8usize];
    ["Offset of field: arming_check_request_s::timestamp"]
        [::core::mem::offset_of!(arming_check_request_s, timestamp) - 0usize];
    ["Offset of field: arming_check_request_s::request_id"]
        [::core::mem::offset_of!(arming_check_request_s, request_id) - 8usize];
    ["Offset of field: arming_check_request_s::_padding0"]
        [::core::mem::offset_of!(arming_check_request_s, _padding0) - 9usize];
};
unsafe extern "C" {
    pub static __orb_arming_check_request: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct estimator_status_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub control_mode_flags: u64,
    pub output_tracking_error: [f32; 3usize],
    pub filter_fault_flags: u32,
    pub pos_horiz_accuracy: f32,
    pub pos_vert_accuracy: f32,
    pub hdg_test_ratio: f32,
    pub vel_test_ratio: f32,
    pub pos_test_ratio: f32,
    pub hgt_test_ratio: f32,
    pub tas_test_ratio: f32,
    pub hagl_test_ratio: f32,
    pub beta_test_ratio: f32,
    pub time_slip: f32,
    pub accel_device_id: u32,
    pub gyro_device_id: u32,
    pub baro_device_id: u32,
    pub mag_device_id: u32,
    pub mag_inclination_deg: f32,
    pub mag_inclination_ref_deg: f32,
    pub mag_strength_gs: f32,
    pub mag_strength_ref_gs: f32,
    pub gps_check_fail_flags: u16,
    pub solution_status_flags: u16,
    pub reset_count_vel_ne: u8,
    pub reset_count_vel_d: u8,
    pub reset_count_pos_ne: u8,
    pub reset_count_pod_d: u8,
    pub reset_count_quat: u8,
    pub pre_flt_fail_innov_heading: bool,
    pub pre_flt_fail_innov_height: bool,
    pub pre_flt_fail_innov_pos_horiz: bool,
    pub pre_flt_fail_innov_vel_horiz: bool,
    pub pre_flt_fail_innov_vel_vert: bool,
    pub pre_flt_fail_mag_field_disturbed: bool,
    pub health_flags: u8,
    pub timeout_flags: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of estimator_status_s"][::core::mem::size_of::<estimator_status_s>() - 136usize];
    ["Alignment of estimator_status_s"][::core::mem::align_of::<estimator_status_s>() - 8usize];
    ["Offset of field: estimator_status_s::timestamp"]
        [::core::mem::offset_of!(estimator_status_s, timestamp) - 0usize];
    ["Offset of field: estimator_status_s::timestamp_sample"]
        [::core::mem::offset_of!(estimator_status_s, timestamp_sample) - 8usize];
    ["Offset of field: estimator_status_s::control_mode_flags"]
        [::core::mem::offset_of!(estimator_status_s, control_mode_flags) - 16usize];
    ["Offset of field: estimator_status_s::output_tracking_error"]
        [::core::mem::offset_of!(estimator_status_s, output_tracking_error) - 24usize];
    ["Offset of field: estimator_status_s::filter_fault_flags"]
        [::core::mem::offset_of!(estimator_status_s, filter_fault_flags) - 36usize];
    ["Offset of field: estimator_status_s::pos_horiz_accuracy"]
        [::core::mem::offset_of!(estimator_status_s, pos_horiz_accuracy) - 40usize];
    ["Offset of field: estimator_status_s::pos_vert_accuracy"]
        [::core::mem::offset_of!(estimator_status_s, pos_vert_accuracy) - 44usize];
    ["Offset of field: estimator_status_s::hdg_test_ratio"]
        [::core::mem::offset_of!(estimator_status_s, hdg_test_ratio) - 48usize];
    ["Offset of field: estimator_status_s::vel_test_ratio"]
        [::core::mem::offset_of!(estimator_status_s, vel_test_ratio) - 52usize];
    ["Offset of field: estimator_status_s::pos_test_ratio"]
        [::core::mem::offset_of!(estimator_status_s, pos_test_ratio) - 56usize];
    ["Offset of field: estimator_status_s::hgt_test_ratio"]
        [::core::mem::offset_of!(estimator_status_s, hgt_test_ratio) - 60usize];
    ["Offset of field: estimator_status_s::tas_test_ratio"]
        [::core::mem::offset_of!(estimator_status_s, tas_test_ratio) - 64usize];
    ["Offset of field: estimator_status_s::hagl_test_ratio"]
        [::core::mem::offset_of!(estimator_status_s, hagl_test_ratio) - 68usize];
    ["Offset of field: estimator_status_s::beta_test_ratio"]
        [::core::mem::offset_of!(estimator_status_s, beta_test_ratio) - 72usize];
    ["Offset of field: estimator_status_s::time_slip"]
        [::core::mem::offset_of!(estimator_status_s, time_slip) - 76usize];
    ["Offset of field: estimator_status_s::accel_device_id"]
        [::core::mem::offset_of!(estimator_status_s, accel_device_id) - 80usize];
    ["Offset of field: estimator_status_s::gyro_device_id"]
        [::core::mem::offset_of!(estimator_status_s, gyro_device_id) - 84usize];
    ["Offset of field: estimator_status_s::baro_device_id"]
        [::core::mem::offset_of!(estimator_status_s, baro_device_id) - 88usize];
    ["Offset of field: estimator_status_s::mag_device_id"]
        [::core::mem::offset_of!(estimator_status_s, mag_device_id) - 92usize];
    ["Offset of field: estimator_status_s::mag_inclination_deg"]
        [::core::mem::offset_of!(estimator_status_s, mag_inclination_deg) - 96usize];
    ["Offset of field: estimator_status_s::mag_inclination_ref_deg"]
        [::core::mem::offset_of!(estimator_status_s, mag_inclination_ref_deg) - 100usize];
    ["Offset of field: estimator_status_s::mag_strength_gs"]
        [::core::mem::offset_of!(estimator_status_s, mag_strength_gs) - 104usize];
    ["Offset of field: estimator_status_s::mag_strength_ref_gs"]
        [::core::mem::offset_of!(estimator_status_s, mag_strength_ref_gs) - 108usize];
    ["Offset of field: estimator_status_s::gps_check_fail_flags"]
        [::core::mem::offset_of!(estimator_status_s, gps_check_fail_flags) - 112usize];
    ["Offset of field: estimator_status_s::solution_status_flags"]
        [::core::mem::offset_of!(estimator_status_s, solution_status_flags) - 114usize];
    ["Offset of field: estimator_status_s::reset_count_vel_ne"]
        [::core::mem::offset_of!(estimator_status_s, reset_count_vel_ne) - 116usize];
    ["Offset of field: estimator_status_s::reset_count_vel_d"]
        [::core::mem::offset_of!(estimator_status_s, reset_count_vel_d) - 117usize];
    ["Offset of field: estimator_status_s::reset_count_pos_ne"]
        [::core::mem::offset_of!(estimator_status_s, reset_count_pos_ne) - 118usize];
    ["Offset of field: estimator_status_s::reset_count_pod_d"]
        [::core::mem::offset_of!(estimator_status_s, reset_count_pod_d) - 119usize];
    ["Offset of field: estimator_status_s::reset_count_quat"]
        [::core::mem::offset_of!(estimator_status_s, reset_count_quat) - 120usize];
    ["Offset of field: estimator_status_s::pre_flt_fail_innov_heading"]
        [::core::mem::offset_of!(estimator_status_s, pre_flt_fail_innov_heading) - 121usize];
    ["Offset of field: estimator_status_s::pre_flt_fail_innov_height"]
        [::core::mem::offset_of!(estimator_status_s, pre_flt_fail_innov_height) - 122usize];
    ["Offset of field: estimator_status_s::pre_flt_fail_innov_pos_horiz"]
        [::core::mem::offset_of!(estimator_status_s, pre_flt_fail_innov_pos_horiz) - 123usize];
    ["Offset of field: estimator_status_s::pre_flt_fail_innov_vel_horiz"]
        [::core::mem::offset_of!(estimator_status_s, pre_flt_fail_innov_vel_horiz) - 124usize];
    ["Offset of field: estimator_status_s::pre_flt_fail_innov_vel_vert"]
        [::core::mem::offset_of!(estimator_status_s, pre_flt_fail_innov_vel_vert) - 125usize];
    ["Offset of field: estimator_status_s::pre_flt_fail_mag_field_disturbed"]
        [::core::mem::offset_of!(estimator_status_s, pre_flt_fail_mag_field_disturbed) - 126usize];
    ["Offset of field: estimator_status_s::health_flags"]
        [::core::mem::offset_of!(estimator_status_s, health_flags) - 127usize];
    ["Offset of field: estimator_status_s::timeout_flags"]
        [::core::mem::offset_of!(estimator_status_s, timeout_flags) - 128usize];
    ["Offset of field: estimator_status_s::_padding0"]
        [::core::mem::offset_of!(estimator_status_s, _padding0) - 129usize];
};
unsafe extern "C" {
    pub static __orb_estimator_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radio_status_s {
    pub timestamp: u64,
    pub rxerrors: u16,
    pub fix: u16,
    pub rssi: u8,
    pub remote_rssi: u8,
    pub txbuf: u8,
    pub noise: u8,
    pub remote_noise: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of radio_status_s"][::core::mem::size_of::<radio_status_s>() - 24usize];
    ["Alignment of radio_status_s"][::core::mem::align_of::<radio_status_s>() - 8usize];
    ["Offset of field: radio_status_s::timestamp"]
        [::core::mem::offset_of!(radio_status_s, timestamp) - 0usize];
    ["Offset of field: radio_status_s::rxerrors"]
        [::core::mem::offset_of!(radio_status_s, rxerrors) - 8usize];
    ["Offset of field: radio_status_s::fix"]
        [::core::mem::offset_of!(radio_status_s, fix) - 10usize];
    ["Offset of field: radio_status_s::rssi"]
        [::core::mem::offset_of!(radio_status_s, rssi) - 12usize];
    ["Offset of field: radio_status_s::remote_rssi"]
        [::core::mem::offset_of!(radio_status_s, remote_rssi) - 13usize];
    ["Offset of field: radio_status_s::txbuf"]
        [::core::mem::offset_of!(radio_status_s, txbuf) - 14usize];
    ["Offset of field: radio_status_s::noise"]
        [::core::mem::offset_of!(radio_status_s, noise) - 15usize];
    ["Offset of field: radio_status_s::remote_noise"]
        [::core::mem::offset_of!(radio_status_s, remote_noise) - 16usize];
    ["Offset of field: radio_status_s::_padding0"]
        [::core::mem::offset_of!(radio_status_s, _padding0) - 17usize];
};
unsafe extern "C" {
    pub static __orb_radio_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_gps_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub latitude_deg: f64,
    pub longitude_deg: f64,
    pub altitude_msl_m: f64,
    pub altitude_ellipsoid_m: f64,
    pub time_utc_usec: u64,
    pub device_id: u32,
    pub s_variance_m_s: f32,
    pub c_variance_rad: f32,
    pub eph: f32,
    pub epv: f32,
    pub hdop: f32,
    pub vdop: f32,
    pub noise_per_ms: i32,
    pub jamming_indicator: i32,
    pub vel_m_s: f32,
    pub vel_n_m_s: f32,
    pub vel_e_m_s: f32,
    pub vel_d_m_s: f32,
    pub cog_rad: f32,
    pub timestamp_time_relative: i32,
    pub heading: f32,
    pub heading_offset: f32,
    pub heading_accuracy: f32,
    pub rtcm_injection_rate: f32,
    pub automatic_gain_control: u16,
    pub fix_type: u8,
    pub jamming_state: u8,
    pub spoofing_state: u8,
    pub vel_ned_valid: bool,
    pub satellites_used: u8,
    pub selected_rtcm_instance: u8,
    pub rtcm_crc_failed: bool,
    pub rtcm_msg_used: u8,
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_gps_s"][::core::mem::size_of::<sensor_gps_s>() - 144usize];
    ["Alignment of sensor_gps_s"][::core::mem::align_of::<sensor_gps_s>() - 8usize];
    ["Offset of field: sensor_gps_s::timestamp"]
        [::core::mem::offset_of!(sensor_gps_s, timestamp) - 0usize];
    ["Offset of field: sensor_gps_s::timestamp_sample"]
        [::core::mem::offset_of!(sensor_gps_s, timestamp_sample) - 8usize];
    ["Offset of field: sensor_gps_s::latitude_deg"]
        [::core::mem::offset_of!(sensor_gps_s, latitude_deg) - 16usize];
    ["Offset of field: sensor_gps_s::longitude_deg"]
        [::core::mem::offset_of!(sensor_gps_s, longitude_deg) - 24usize];
    ["Offset of field: sensor_gps_s::altitude_msl_m"]
        [::core::mem::offset_of!(sensor_gps_s, altitude_msl_m) - 32usize];
    ["Offset of field: sensor_gps_s::altitude_ellipsoid_m"]
        [::core::mem::offset_of!(sensor_gps_s, altitude_ellipsoid_m) - 40usize];
    ["Offset of field: sensor_gps_s::time_utc_usec"]
        [::core::mem::offset_of!(sensor_gps_s, time_utc_usec) - 48usize];
    ["Offset of field: sensor_gps_s::device_id"]
        [::core::mem::offset_of!(sensor_gps_s, device_id) - 56usize];
    ["Offset of field: sensor_gps_s::s_variance_m_s"]
        [::core::mem::offset_of!(sensor_gps_s, s_variance_m_s) - 60usize];
    ["Offset of field: sensor_gps_s::c_variance_rad"]
        [::core::mem::offset_of!(sensor_gps_s, c_variance_rad) - 64usize];
    ["Offset of field: sensor_gps_s::eph"][::core::mem::offset_of!(sensor_gps_s, eph) - 68usize];
    ["Offset of field: sensor_gps_s::epv"][::core::mem::offset_of!(sensor_gps_s, epv) - 72usize];
    ["Offset of field: sensor_gps_s::hdop"][::core::mem::offset_of!(sensor_gps_s, hdop) - 76usize];
    ["Offset of field: sensor_gps_s::vdop"][::core::mem::offset_of!(sensor_gps_s, vdop) - 80usize];
    ["Offset of field: sensor_gps_s::noise_per_ms"]
        [::core::mem::offset_of!(sensor_gps_s, noise_per_ms) - 84usize];
    ["Offset of field: sensor_gps_s::jamming_indicator"]
        [::core::mem::offset_of!(sensor_gps_s, jamming_indicator) - 88usize];
    ["Offset of field: sensor_gps_s::vel_m_s"]
        [::core::mem::offset_of!(sensor_gps_s, vel_m_s) - 92usize];
    ["Offset of field: sensor_gps_s::vel_n_m_s"]
        [::core::mem::offset_of!(sensor_gps_s, vel_n_m_s) - 96usize];
    ["Offset of field: sensor_gps_s::vel_e_m_s"]
        [::core::mem::offset_of!(sensor_gps_s, vel_e_m_s) - 100usize];
    ["Offset of field: sensor_gps_s::vel_d_m_s"]
        [::core::mem::offset_of!(sensor_gps_s, vel_d_m_s) - 104usize];
    ["Offset of field: sensor_gps_s::cog_rad"]
        [::core::mem::offset_of!(sensor_gps_s, cog_rad) - 108usize];
    ["Offset of field: sensor_gps_s::timestamp_time_relative"]
        [::core::mem::offset_of!(sensor_gps_s, timestamp_time_relative) - 112usize];
    ["Offset of field: sensor_gps_s::heading"]
        [::core::mem::offset_of!(sensor_gps_s, heading) - 116usize];
    ["Offset of field: sensor_gps_s::heading_offset"]
        [::core::mem::offset_of!(sensor_gps_s, heading_offset) - 120usize];
    ["Offset of field: sensor_gps_s::heading_accuracy"]
        [::core::mem::offset_of!(sensor_gps_s, heading_accuracy) - 124usize];
    ["Offset of field: sensor_gps_s::rtcm_injection_rate"]
        [::core::mem::offset_of!(sensor_gps_s, rtcm_injection_rate) - 128usize];
    ["Offset of field: sensor_gps_s::automatic_gain_control"]
        [::core::mem::offset_of!(sensor_gps_s, automatic_gain_control) - 132usize];
    ["Offset of field: sensor_gps_s::fix_type"]
        [::core::mem::offset_of!(sensor_gps_s, fix_type) - 134usize];
    ["Offset of field: sensor_gps_s::jamming_state"]
        [::core::mem::offset_of!(sensor_gps_s, jamming_state) - 135usize];
    ["Offset of field: sensor_gps_s::spoofing_state"]
        [::core::mem::offset_of!(sensor_gps_s, spoofing_state) - 136usize];
    ["Offset of field: sensor_gps_s::vel_ned_valid"]
        [::core::mem::offset_of!(sensor_gps_s, vel_ned_valid) - 137usize];
    ["Offset of field: sensor_gps_s::satellites_used"]
        [::core::mem::offset_of!(sensor_gps_s, satellites_used) - 138usize];
    ["Offset of field: sensor_gps_s::selected_rtcm_instance"]
        [::core::mem::offset_of!(sensor_gps_s, selected_rtcm_instance) - 139usize];
    ["Offset of field: sensor_gps_s::rtcm_crc_failed"]
        [::core::mem::offset_of!(sensor_gps_s, rtcm_crc_failed) - 140usize];
    ["Offset of field: sensor_gps_s::rtcm_msg_used"]
        [::core::mem::offset_of!(sensor_gps_s, rtcm_msg_used) - 141usize];
    ["Offset of field: sensor_gps_s::_padding0"]
        [::core::mem::offset_of!(sensor_gps_s, _padding0) - 142usize];
};
unsafe extern "C" {
    pub static __orb_sensor_gps: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_vehicle_gps_position: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parameter_update_s {
    pub timestamp: u64,
    pub instance: u32,
    pub get_count: u32,
    pub set_count: u32,
    pub find_count: u32,
    pub export_count: u32,
    pub active: u16,
    pub changed: u16,
    pub custom_default: u16,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of parameter_update_s"][::core::mem::size_of::<parameter_update_s>() - 40usize];
    ["Alignment of parameter_update_s"][::core::mem::align_of::<parameter_update_s>() - 8usize];
    ["Offset of field: parameter_update_s::timestamp"]
        [::core::mem::offset_of!(parameter_update_s, timestamp) - 0usize];
    ["Offset of field: parameter_update_s::instance"]
        [::core::mem::offset_of!(parameter_update_s, instance) - 8usize];
    ["Offset of field: parameter_update_s::get_count"]
        [::core::mem::offset_of!(parameter_update_s, get_count) - 12usize];
    ["Offset of field: parameter_update_s::set_count"]
        [::core::mem::offset_of!(parameter_update_s, set_count) - 16usize];
    ["Offset of field: parameter_update_s::find_count"]
        [::core::mem::offset_of!(parameter_update_s, find_count) - 20usize];
    ["Offset of field: parameter_update_s::export_count"]
        [::core::mem::offset_of!(parameter_update_s, export_count) - 24usize];
    ["Offset of field: parameter_update_s::active"]
        [::core::mem::offset_of!(parameter_update_s, active) - 28usize];
    ["Offset of field: parameter_update_s::changed"]
        [::core::mem::offset_of!(parameter_update_s, changed) - 30usize];
    ["Offset of field: parameter_update_s::custom_default"]
        [::core::mem::offset_of!(parameter_update_s, custom_default) - 32usize];
    ["Offset of field: parameter_update_s::_padding0"]
        [::core::mem::offset_of!(parameter_update_s, _padding0) - 34usize];
};
unsafe extern "C" {
    pub static __orb_parameter_update: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mag_worker_data_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub calibration_interval_perside_us: u64,
    pub done_count: u32,
    pub calibration_points_perside: u32,
    pub calibration_counter_total: [u32; 4usize],
    pub x: [f32; 4usize],
    pub y: [f32; 4usize],
    pub z: [f32; 4usize],
    pub side_data_collected: [bool; 4usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mag_worker_data_s"][::core::mem::size_of::<mag_worker_data_s>() - 104usize];
    ["Alignment of mag_worker_data_s"][::core::mem::align_of::<mag_worker_data_s>() - 8usize];
    ["Offset of field: mag_worker_data_s::timestamp"]
        [::core::mem::offset_of!(mag_worker_data_s, timestamp) - 0usize];
    ["Offset of field: mag_worker_data_s::timestamp_sample"]
        [::core::mem::offset_of!(mag_worker_data_s, timestamp_sample) - 8usize];
    ["Offset of field: mag_worker_data_s::calibration_interval_perside_us"]
        [::core::mem::offset_of!(mag_worker_data_s, calibration_interval_perside_us) - 16usize];
    ["Offset of field: mag_worker_data_s::done_count"]
        [::core::mem::offset_of!(mag_worker_data_s, done_count) - 24usize];
    ["Offset of field: mag_worker_data_s::calibration_points_perside"]
        [::core::mem::offset_of!(mag_worker_data_s, calibration_points_perside) - 28usize];
    ["Offset of field: mag_worker_data_s::calibration_counter_total"]
        [::core::mem::offset_of!(mag_worker_data_s, calibration_counter_total) - 32usize];
    ["Offset of field: mag_worker_data_s::x"]
        [::core::mem::offset_of!(mag_worker_data_s, x) - 48usize];
    ["Offset of field: mag_worker_data_s::y"]
        [::core::mem::offset_of!(mag_worker_data_s, y) - 64usize];
    ["Offset of field: mag_worker_data_s::z"]
        [::core::mem::offset_of!(mag_worker_data_s, z) - 80usize];
    ["Offset of field: mag_worker_data_s::side_data_collected"]
        [::core::mem::offset_of!(mag_worker_data_s, side_data_collected) - 96usize];
    ["Offset of field: mag_worker_data_s::_padding0"]
        [::core::mem::offset_of!(mag_worker_data_s, _padding0) - 100usize];
};
unsafe extern "C" {
    pub static __orb_mag_worker_data: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rover_position_setpoint_s {
    pub timestamp: u64,
    pub position_ned: [f32; 2usize],
    pub cruising_speed: f32,
    pub yaw: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rover_position_setpoint_s"]
        [::core::mem::size_of::<rover_position_setpoint_s>() - 24usize];
    ["Alignment of rover_position_setpoint_s"]
        [::core::mem::align_of::<rover_position_setpoint_s>() - 8usize];
    ["Offset of field: rover_position_setpoint_s::timestamp"]
        [::core::mem::offset_of!(rover_position_setpoint_s, timestamp) - 0usize];
    ["Offset of field: rover_position_setpoint_s::position_ned"]
        [::core::mem::offset_of!(rover_position_setpoint_s, position_ned) - 8usize];
    ["Offset of field: rover_position_setpoint_s::cruising_speed"]
        [::core::mem::offset_of!(rover_position_setpoint_s, cruising_speed) - 16usize];
    ["Offset of field: rover_position_setpoint_s::yaw"]
        [::core::mem::offset_of!(rover_position_setpoint_s, yaw) - 20usize];
};
unsafe extern "C" {
    pub static __orb_rover_position_setpoint: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuel_tank_status_s {
    pub timestamp: u64,
    pub maximum_fuel_capacity: f32,
    pub consumed_fuel: f32,
    pub fuel_consumption_rate: f32,
    pub remaining_fuel: f32,
    pub fuel_type: u32,
    pub temperature: f32,
    pub percent_remaining: u8,
    pub fuel_tank_id: u8,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fuel_tank_status_s"][::core::mem::size_of::<fuel_tank_status_s>() - 40usize];
    ["Alignment of fuel_tank_status_s"][::core::mem::align_of::<fuel_tank_status_s>() - 8usize];
    ["Offset of field: fuel_tank_status_s::timestamp"]
        [::core::mem::offset_of!(fuel_tank_status_s, timestamp) - 0usize];
    ["Offset of field: fuel_tank_status_s::maximum_fuel_capacity"]
        [::core::mem::offset_of!(fuel_tank_status_s, maximum_fuel_capacity) - 8usize];
    ["Offset of field: fuel_tank_status_s::consumed_fuel"]
        [::core::mem::offset_of!(fuel_tank_status_s, consumed_fuel) - 12usize];
    ["Offset of field: fuel_tank_status_s::fuel_consumption_rate"]
        [::core::mem::offset_of!(fuel_tank_status_s, fuel_consumption_rate) - 16usize];
    ["Offset of field: fuel_tank_status_s::remaining_fuel"]
        [::core::mem::offset_of!(fuel_tank_status_s, remaining_fuel) - 20usize];
    ["Offset of field: fuel_tank_status_s::fuel_type"]
        [::core::mem::offset_of!(fuel_tank_status_s, fuel_type) - 24usize];
    ["Offset of field: fuel_tank_status_s::temperature"]
        [::core::mem::offset_of!(fuel_tank_status_s, temperature) - 28usize];
    ["Offset of field: fuel_tank_status_s::percent_remaining"]
        [::core::mem::offset_of!(fuel_tank_status_s, percent_remaining) - 32usize];
    ["Offset of field: fuel_tank_status_s::fuel_tank_id"]
        [::core::mem::offset_of!(fuel_tank_status_s, fuel_tank_id) - 33usize];
    ["Offset of field: fuel_tank_status_s::_padding0"]
        [::core::mem::offset_of!(fuel_tank_status_s, _padding0) - 34usize];
};
unsafe extern "C" {
    pub static __orb_fuel_tank_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct camera_capture_s {
    pub timestamp: u64,
    pub timestamp_utc: u64,
    pub lat: f64,
    pub lon: f64,
    pub seq: u32,
    pub alt: f32,
    pub ground_distance: f32,
    pub q: [f32; 4usize],
    pub result: i8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of camera_capture_s"][::core::mem::size_of::<camera_capture_s>() - 64usize];
    ["Alignment of camera_capture_s"][::core::mem::align_of::<camera_capture_s>() - 8usize];
    ["Offset of field: camera_capture_s::timestamp"]
        [::core::mem::offset_of!(camera_capture_s, timestamp) - 0usize];
    ["Offset of field: camera_capture_s::timestamp_utc"]
        [::core::mem::offset_of!(camera_capture_s, timestamp_utc) - 8usize];
    ["Offset of field: camera_capture_s::lat"]
        [::core::mem::offset_of!(camera_capture_s, lat) - 16usize];
    ["Offset of field: camera_capture_s::lon"]
        [::core::mem::offset_of!(camera_capture_s, lon) - 24usize];
    ["Offset of field: camera_capture_s::seq"]
        [::core::mem::offset_of!(camera_capture_s, seq) - 32usize];
    ["Offset of field: camera_capture_s::alt"]
        [::core::mem::offset_of!(camera_capture_s, alt) - 36usize];
    ["Offset of field: camera_capture_s::ground_distance"]
        [::core::mem::offset_of!(camera_capture_s, ground_distance) - 40usize];
    ["Offset of field: camera_capture_s::q"]
        [::core::mem::offset_of!(camera_capture_s, q) - 44usize];
    ["Offset of field: camera_capture_s::result"]
        [::core::mem::offset_of!(camera_capture_s, result) - 60usize];
    ["Offset of field: camera_capture_s::_padding0"]
        [::core::mem::offset_of!(camera_capture_s, _padding0) - 61usize];
};
unsafe extern "C" {
    pub static __orb_camera_capture: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct estimator_states_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub states: [f32; 25usize],
    pub covariances: [f32; 24usize],
    pub n_states: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of estimator_states_s"][::core::mem::size_of::<estimator_states_s>() - 216usize];
    ["Alignment of estimator_states_s"][::core::mem::align_of::<estimator_states_s>() - 8usize];
    ["Offset of field: estimator_states_s::timestamp"]
        [::core::mem::offset_of!(estimator_states_s, timestamp) - 0usize];
    ["Offset of field: estimator_states_s::timestamp_sample"]
        [::core::mem::offset_of!(estimator_states_s, timestamp_sample) - 8usize];
    ["Offset of field: estimator_states_s::states"]
        [::core::mem::offset_of!(estimator_states_s, states) - 16usize];
    ["Offset of field: estimator_states_s::covariances"]
        [::core::mem::offset_of!(estimator_states_s, covariances) - 116usize];
    ["Offset of field: estimator_states_s::n_states"]
        [::core::mem::offset_of!(estimator_states_s, n_states) - 212usize];
    ["Offset of field: estimator_states_s::_padding0"]
        [::core::mem::offset_of!(estimator_states_s, _padding0) - 213usize];
};
unsafe extern "C" {
    pub static __orb_estimator_states: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_hygrometer_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub device_id: u32,
    pub temperature: f32,
    pub humidity: f32,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_hygrometer_s"][::core::mem::size_of::<sensor_hygrometer_s>() - 32usize];
    ["Alignment of sensor_hygrometer_s"][::core::mem::align_of::<sensor_hygrometer_s>() - 8usize];
    ["Offset of field: sensor_hygrometer_s::timestamp"]
        [::core::mem::offset_of!(sensor_hygrometer_s, timestamp) - 0usize];
    ["Offset of field: sensor_hygrometer_s::timestamp_sample"]
        [::core::mem::offset_of!(sensor_hygrometer_s, timestamp_sample) - 8usize];
    ["Offset of field: sensor_hygrometer_s::device_id"]
        [::core::mem::offset_of!(sensor_hygrometer_s, device_id) - 16usize];
    ["Offset of field: sensor_hygrometer_s::temperature"]
        [::core::mem::offset_of!(sensor_hygrometer_s, temperature) - 20usize];
    ["Offset of field: sensor_hygrometer_s::humidity"]
        [::core::mem::offset_of!(sensor_hygrometer_s, humidity) - 24usize];
    ["Offset of field: sensor_hygrometer_s::_padding0"]
        [::core::mem::offset_of!(sensor_hygrometer_s, _padding0) - 28usize];
};
unsafe extern "C" {
    pub static __orb_sensor_hygrometer: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gimbal_controls_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub control: [f32; 3usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gimbal_controls_s"][::core::mem::size_of::<gimbal_controls_s>() - 32usize];
    ["Alignment of gimbal_controls_s"][::core::mem::align_of::<gimbal_controls_s>() - 8usize];
    ["Offset of field: gimbal_controls_s::timestamp"]
        [::core::mem::offset_of!(gimbal_controls_s, timestamp) - 0usize];
    ["Offset of field: gimbal_controls_s::timestamp_sample"]
        [::core::mem::offset_of!(gimbal_controls_s, timestamp_sample) - 8usize];
    ["Offset of field: gimbal_controls_s::control"]
        [::core::mem::offset_of!(gimbal_controls_s, control) - 16usize];
    ["Offset of field: gimbal_controls_s::_padding0"]
        [::core::mem::offset_of!(gimbal_controls_s, _padding0) - 28usize];
};
unsafe extern "C" {
    pub static __orb_gimbal_controls: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct debug_array_s {
    pub timestamp: u64,
    pub data: [f32; 58usize],
    pub id: u16,
    pub name: [::core::ffi::c_char; 10usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of debug_array_s"][::core::mem::size_of::<debug_array_s>() - 256usize];
    ["Alignment of debug_array_s"][::core::mem::align_of::<debug_array_s>() - 8usize];
    ["Offset of field: debug_array_s::timestamp"]
        [::core::mem::offset_of!(debug_array_s, timestamp) - 0usize];
    ["Offset of field: debug_array_s::data"][::core::mem::offset_of!(debug_array_s, data) - 8usize];
    ["Offset of field: debug_array_s::id"][::core::mem::offset_of!(debug_array_s, id) - 240usize];
    ["Offset of field: debug_array_s::name"]
        [::core::mem::offset_of!(debug_array_s, name) - 242usize];
    ["Offset of field: debug_array_s::_padding0"]
        [::core::mem::offset_of!(debug_array_s, _padding0) - 252usize];
};
unsafe extern "C" {
    pub static __orb_debug_array: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct estimator_aid_source2d_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub time_last_fuse: u64,
    pub observation: [f64; 2usize],
    pub device_id: u32,
    pub observation_variance: [f32; 2usize],
    pub innovation: [f32; 2usize],
    pub innovation_filtered: [f32; 2usize],
    pub innovation_variance: [f32; 2usize],
    pub test_ratio: [f32; 2usize],
    pub test_ratio_filtered: [f32; 2usize],
    pub estimator_instance: u8,
    pub innovation_rejected: bool,
    pub fused: bool,
    pub _padding0: [u8; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of estimator_aid_source2d_s"]
        [::core::mem::size_of::<estimator_aid_source2d_s>() - 96usize];
    ["Alignment of estimator_aid_source2d_s"]
        [::core::mem::align_of::<estimator_aid_source2d_s>() - 8usize];
    ["Offset of field: estimator_aid_source2d_s::timestamp"]
        [::core::mem::offset_of!(estimator_aid_source2d_s, timestamp) - 0usize];
    ["Offset of field: estimator_aid_source2d_s::timestamp_sample"]
        [::core::mem::offset_of!(estimator_aid_source2d_s, timestamp_sample) - 8usize];
    ["Offset of field: estimator_aid_source2d_s::time_last_fuse"]
        [::core::mem::offset_of!(estimator_aid_source2d_s, time_last_fuse) - 16usize];
    ["Offset of field: estimator_aid_source2d_s::observation"]
        [::core::mem::offset_of!(estimator_aid_source2d_s, observation) - 24usize];
    ["Offset of field: estimator_aid_source2d_s::device_id"]
        [::core::mem::offset_of!(estimator_aid_source2d_s, device_id) - 40usize];
    ["Offset of field: estimator_aid_source2d_s::observation_variance"]
        [::core::mem::offset_of!(estimator_aid_source2d_s, observation_variance) - 44usize];
    ["Offset of field: estimator_aid_source2d_s::innovation"]
        [::core::mem::offset_of!(estimator_aid_source2d_s, innovation) - 52usize];
    ["Offset of field: estimator_aid_source2d_s::innovation_filtered"]
        [::core::mem::offset_of!(estimator_aid_source2d_s, innovation_filtered) - 60usize];
    ["Offset of field: estimator_aid_source2d_s::innovation_variance"]
        [::core::mem::offset_of!(estimator_aid_source2d_s, innovation_variance) - 68usize];
    ["Offset of field: estimator_aid_source2d_s::test_ratio"]
        [::core::mem::offset_of!(estimator_aid_source2d_s, test_ratio) - 76usize];
    ["Offset of field: estimator_aid_source2d_s::test_ratio_filtered"]
        [::core::mem::offset_of!(estimator_aid_source2d_s, test_ratio_filtered) - 84usize];
    ["Offset of field: estimator_aid_source2d_s::estimator_instance"]
        [::core::mem::offset_of!(estimator_aid_source2d_s, estimator_instance) - 92usize];
    ["Offset of field: estimator_aid_source2d_s::innovation_rejected"]
        [::core::mem::offset_of!(estimator_aid_source2d_s, innovation_rejected) - 93usize];
    ["Offset of field: estimator_aid_source2d_s::fused"]
        [::core::mem::offset_of!(estimator_aid_source2d_s, fused) - 94usize];
    ["Offset of field: estimator_aid_source2d_s::_padding0"]
        [::core::mem::offset_of!(estimator_aid_source2d_s, _padding0) - 95usize];
};
unsafe extern "C" {
    pub static __orb_estimator_aid_src_ev_pos: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_fake_pos: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_gnss_pos: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_aux_global_position: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_aux_vel: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_optical_flow: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_drag: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct internal_combustion_engine_status_s {
    pub timestamp: u64,
    pub flags: u32,
    pub engine_speed_rpm: u32,
    pub spark_dwell_time_ms: f32,
    pub atmospheric_pressure_kpa: f32,
    pub intake_manifold_pressure_kpa: f32,
    pub intake_manifold_temperature: f32,
    pub coolant_temperature: f32,
    pub oil_pressure: f32,
    pub oil_temperature: f32,
    pub fuel_pressure: f32,
    pub fuel_consumption_rate_cm3pm: f32,
    pub estimated_consumed_fuel_volume_cm3: f32,
    pub ignition_timing_deg: f32,
    pub injection_time_ms: f32,
    pub cylinder_head_temperature: f32,
    pub exhaust_gas_temperature: f32,
    pub lambda_coefficient: f32,
    pub state: u8,
    pub engine_load_percent: u8,
    pub throttle_position_percent: u8,
    pub ecu_index: u8,
    pub spark_plug_usage: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of internal_combustion_engine_status_s"]
        [::core::mem::size_of::<internal_combustion_engine_status_s>() - 88usize];
    ["Alignment of internal_combustion_engine_status_s"]
        [::core::mem::align_of::<internal_combustion_engine_status_s>() - 8usize];
    ["Offset of field: internal_combustion_engine_status_s::timestamp"]
        [::core::mem::offset_of!(internal_combustion_engine_status_s, timestamp) - 0usize];
    ["Offset of field: internal_combustion_engine_status_s::flags"]
        [::core::mem::offset_of!(internal_combustion_engine_status_s, flags) - 8usize];
    ["Offset of field: internal_combustion_engine_status_s::engine_speed_rpm"]
        [::core::mem::offset_of!(internal_combustion_engine_status_s, engine_speed_rpm) - 12usize];
    ["Offset of field: internal_combustion_engine_status_s::spark_dwell_time_ms"][::core::mem::offset_of!(
        internal_combustion_engine_status_s,
        spark_dwell_time_ms
    ) - 16usize];
    ["Offset of field: internal_combustion_engine_status_s::atmospheric_pressure_kpa"][::core::mem::offset_of!(
        internal_combustion_engine_status_s,
        atmospheric_pressure_kpa
    ) - 20usize];
    ["Offset of field: internal_combustion_engine_status_s::intake_manifold_pressure_kpa"][::core::mem::offset_of!(
        internal_combustion_engine_status_s,
        intake_manifold_pressure_kpa
    )
        - 24usize];
    ["Offset of field: internal_combustion_engine_status_s::intake_manifold_temperature"][::core::mem::offset_of!(
        internal_combustion_engine_status_s,
        intake_manifold_temperature
    )
        - 28usize];
    ["Offset of field: internal_combustion_engine_status_s::coolant_temperature"][::core::mem::offset_of!(
        internal_combustion_engine_status_s,
        coolant_temperature
    ) - 32usize];
    ["Offset of field: internal_combustion_engine_status_s::oil_pressure"]
        [::core::mem::offset_of!(internal_combustion_engine_status_s, oil_pressure) - 36usize];
    ["Offset of field: internal_combustion_engine_status_s::oil_temperature"]
        [::core::mem::offset_of!(internal_combustion_engine_status_s, oil_temperature) - 40usize];
    ["Offset of field: internal_combustion_engine_status_s::fuel_pressure"]
        [::core::mem::offset_of!(internal_combustion_engine_status_s, fuel_pressure) - 44usize];
    ["Offset of field: internal_combustion_engine_status_s::fuel_consumption_rate_cm3pm"][::core::mem::offset_of!(
        internal_combustion_engine_status_s,
        fuel_consumption_rate_cm3pm
    )
        - 48usize];
    ["Offset of field: internal_combustion_engine_status_s::estimated_consumed_fuel_volume_cm3"][::core::mem::offset_of!(
        internal_combustion_engine_status_s,
        estimated_consumed_fuel_volume_cm3
    )
        - 52usize];
    ["Offset of field: internal_combustion_engine_status_s::ignition_timing_deg"][::core::mem::offset_of!(
        internal_combustion_engine_status_s,
        ignition_timing_deg
    ) - 56usize];
    ["Offset of field: internal_combustion_engine_status_s::injection_time_ms"]
        [::core::mem::offset_of!(internal_combustion_engine_status_s, injection_time_ms) - 60usize];
    ["Offset of field: internal_combustion_engine_status_s::cylinder_head_temperature"][::core::mem::offset_of!(
        internal_combustion_engine_status_s,
        cylinder_head_temperature
    )
        - 64usize];
    ["Offset of field: internal_combustion_engine_status_s::exhaust_gas_temperature"][::core::mem::offset_of!(
        internal_combustion_engine_status_s,
        exhaust_gas_temperature
    ) - 68usize];
    ["Offset of field: internal_combustion_engine_status_s::lambda_coefficient"][::core::mem::offset_of!(
        internal_combustion_engine_status_s,
        lambda_coefficient
    ) - 72usize];
    ["Offset of field: internal_combustion_engine_status_s::state"]
        [::core::mem::offset_of!(internal_combustion_engine_status_s, state) - 76usize];
    ["Offset of field: internal_combustion_engine_status_s::engine_load_percent"][::core::mem::offset_of!(
        internal_combustion_engine_status_s,
        engine_load_percent
    ) - 77usize];
    ["Offset of field: internal_combustion_engine_status_s::throttle_position_percent"][::core::mem::offset_of!(
        internal_combustion_engine_status_s,
        throttle_position_percent
    )
        - 78usize];
    ["Offset of field: internal_combustion_engine_status_s::ecu_index"]
        [::core::mem::offset_of!(internal_combustion_engine_status_s, ecu_index) - 79usize];
    ["Offset of field: internal_combustion_engine_status_s::spark_plug_usage"]
        [::core::mem::offset_of!(internal_combustion_engine_status_s, spark_plug_usage) - 80usize];
    ["Offset of field: internal_combustion_engine_status_s::_padding0"]
        [::core::mem::offset_of!(internal_combustion_engine_status_s, _padding0) - 81usize];
};
unsafe extern "C" {
    pub static __orb_internal_combustion_engine_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mount_orientation_s {
    pub timestamp: u64,
    pub attitude_euler_angle: [f32; 3usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mount_orientation_s"][::core::mem::size_of::<mount_orientation_s>() - 24usize];
    ["Alignment of mount_orientation_s"][::core::mem::align_of::<mount_orientation_s>() - 8usize];
    ["Offset of field: mount_orientation_s::timestamp"]
        [::core::mem::offset_of!(mount_orientation_s, timestamp) - 0usize];
    ["Offset of field: mount_orientation_s::attitude_euler_angle"]
        [::core::mem::offset_of!(mount_orientation_s, attitude_euler_angle) - 8usize];
    ["Offset of field: mount_orientation_s::_padding0"]
        [::core::mem::offset_of!(mount_orientation_s, _padding0) - 20usize];
};
unsafe extern "C" {
    pub static __orb_mount_orientation: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rover_attitude_setpoint_s {
    pub timestamp: u64,
    pub yaw_setpoint: f32,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rover_attitude_setpoint_s"]
        [::core::mem::size_of::<rover_attitude_setpoint_s>() - 16usize];
    ["Alignment of rover_attitude_setpoint_s"]
        [::core::mem::align_of::<rover_attitude_setpoint_s>() - 8usize];
    ["Offset of field: rover_attitude_setpoint_s::timestamp"]
        [::core::mem::offset_of!(rover_attitude_setpoint_s, timestamp) - 0usize];
    ["Offset of field: rover_attitude_setpoint_s::yaw_setpoint"]
        [::core::mem::offset_of!(rover_attitude_setpoint_s, yaw_setpoint) - 8usize];
    ["Offset of field: rover_attitude_setpoint_s::_padding0"]
        [::core::mem::offset_of!(rover_attitude_setpoint_s, _padding0) - 12usize];
};
unsafe extern "C" {
    pub static __orb_rover_attitude_setpoint: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_rates_setpoint_s {
    pub timestamp: u64,
    pub roll: f32,
    pub pitch: f32,
    pub yaw: f32,
    pub thrust_body: [f32; 3usize],
    pub reset_integral: bool,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_rates_setpoint_s"]
        [::core::mem::size_of::<vehicle_rates_setpoint_s>() - 40usize];
    ["Alignment of vehicle_rates_setpoint_s"]
        [::core::mem::align_of::<vehicle_rates_setpoint_s>() - 8usize];
    ["Offset of field: vehicle_rates_setpoint_s::timestamp"]
        [::core::mem::offset_of!(vehicle_rates_setpoint_s, timestamp) - 0usize];
    ["Offset of field: vehicle_rates_setpoint_s::roll"]
        [::core::mem::offset_of!(vehicle_rates_setpoint_s, roll) - 8usize];
    ["Offset of field: vehicle_rates_setpoint_s::pitch"]
        [::core::mem::offset_of!(vehicle_rates_setpoint_s, pitch) - 12usize];
    ["Offset of field: vehicle_rates_setpoint_s::yaw"]
        [::core::mem::offset_of!(vehicle_rates_setpoint_s, yaw) - 16usize];
    ["Offset of field: vehicle_rates_setpoint_s::thrust_body"]
        [::core::mem::offset_of!(vehicle_rates_setpoint_s, thrust_body) - 20usize];
    ["Offset of field: vehicle_rates_setpoint_s::reset_integral"]
        [::core::mem::offset_of!(vehicle_rates_setpoint_s, reset_integral) - 32usize];
    ["Offset of field: vehicle_rates_setpoint_s::_padding0"]
        [::core::mem::offset_of!(vehicle_rates_setpoint_s, _padding0) - 33usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_rates_setpoint: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct failsafe_flags_s {
    pub timestamp: u64,
    pub mode_req_angular_velocity: u32,
    pub mode_req_attitude: u32,
    pub mode_req_local_alt: u32,
    pub mode_req_local_position: u32,
    pub mode_req_local_position_relaxed: u32,
    pub mode_req_global_position: u32,
    pub mode_req_mission: u32,
    pub mode_req_offboard_signal: u32,
    pub mode_req_home_position: u32,
    pub mode_req_wind_and_flight_time_compliance: u32,
    pub mode_req_prevent_arming: u32,
    pub mode_req_manual_control: u32,
    pub mode_req_other: u32,
    pub angular_velocity_invalid: bool,
    pub attitude_invalid: bool,
    pub local_altitude_invalid: bool,
    pub local_position_invalid: bool,
    pub local_position_invalid_relaxed: bool,
    pub local_velocity_invalid: bool,
    pub global_position_invalid: bool,
    pub auto_mission_missing: bool,
    pub offboard_control_signal_lost: bool,
    pub home_position_invalid: bool,
    pub manual_control_signal_lost: bool,
    pub gcs_connection_lost: bool,
    pub battery_warning: u8,
    pub battery_low_remaining_time: bool,
    pub battery_unhealthy: bool,
    pub geofence_breached: bool,
    pub mission_failure: bool,
    pub vtol_fixed_wing_system_failure: bool,
    pub wind_limit_exceeded: bool,
    pub flight_time_limit_exceeded: bool,
    pub local_position_accuracy_low: bool,
    pub navigator_failure: bool,
    pub fd_critical_failure: bool,
    pub fd_esc_arming_failure: bool,
    pub fd_imbalanced_prop: bool,
    pub fd_motor_failure: bool,
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of failsafe_flags_s"][::core::mem::size_of::<failsafe_flags_s>() - 88usize];
    ["Alignment of failsafe_flags_s"][::core::mem::align_of::<failsafe_flags_s>() - 8usize];
    ["Offset of field: failsafe_flags_s::timestamp"]
        [::core::mem::offset_of!(failsafe_flags_s, timestamp) - 0usize];
    ["Offset of field: failsafe_flags_s::mode_req_angular_velocity"]
        [::core::mem::offset_of!(failsafe_flags_s, mode_req_angular_velocity) - 8usize];
    ["Offset of field: failsafe_flags_s::mode_req_attitude"]
        [::core::mem::offset_of!(failsafe_flags_s, mode_req_attitude) - 12usize];
    ["Offset of field: failsafe_flags_s::mode_req_local_alt"]
        [::core::mem::offset_of!(failsafe_flags_s, mode_req_local_alt) - 16usize];
    ["Offset of field: failsafe_flags_s::mode_req_local_position"]
        [::core::mem::offset_of!(failsafe_flags_s, mode_req_local_position) - 20usize];
    ["Offset of field: failsafe_flags_s::mode_req_local_position_relaxed"]
        [::core::mem::offset_of!(failsafe_flags_s, mode_req_local_position_relaxed) - 24usize];
    ["Offset of field: failsafe_flags_s::mode_req_global_position"]
        [::core::mem::offset_of!(failsafe_flags_s, mode_req_global_position) - 28usize];
    ["Offset of field: failsafe_flags_s::mode_req_mission"]
        [::core::mem::offset_of!(failsafe_flags_s, mode_req_mission) - 32usize];
    ["Offset of field: failsafe_flags_s::mode_req_offboard_signal"]
        [::core::mem::offset_of!(failsafe_flags_s, mode_req_offboard_signal) - 36usize];
    ["Offset of field: failsafe_flags_s::mode_req_home_position"]
        [::core::mem::offset_of!(failsafe_flags_s, mode_req_home_position) - 40usize];
    ["Offset of field: failsafe_flags_s::mode_req_wind_and_flight_time_compliance"][::core::mem::offset_of!(
        failsafe_flags_s,
        mode_req_wind_and_flight_time_compliance
    ) - 44usize];
    ["Offset of field: failsafe_flags_s::mode_req_prevent_arming"]
        [::core::mem::offset_of!(failsafe_flags_s, mode_req_prevent_arming) - 48usize];
    ["Offset of field: failsafe_flags_s::mode_req_manual_control"]
        [::core::mem::offset_of!(failsafe_flags_s, mode_req_manual_control) - 52usize];
    ["Offset of field: failsafe_flags_s::mode_req_other"]
        [::core::mem::offset_of!(failsafe_flags_s, mode_req_other) - 56usize];
    ["Offset of field: failsafe_flags_s::angular_velocity_invalid"]
        [::core::mem::offset_of!(failsafe_flags_s, angular_velocity_invalid) - 60usize];
    ["Offset of field: failsafe_flags_s::attitude_invalid"]
        [::core::mem::offset_of!(failsafe_flags_s, attitude_invalid) - 61usize];
    ["Offset of field: failsafe_flags_s::local_altitude_invalid"]
        [::core::mem::offset_of!(failsafe_flags_s, local_altitude_invalid) - 62usize];
    ["Offset of field: failsafe_flags_s::local_position_invalid"]
        [::core::mem::offset_of!(failsafe_flags_s, local_position_invalid) - 63usize];
    ["Offset of field: failsafe_flags_s::local_position_invalid_relaxed"]
        [::core::mem::offset_of!(failsafe_flags_s, local_position_invalid_relaxed) - 64usize];
    ["Offset of field: failsafe_flags_s::local_velocity_invalid"]
        [::core::mem::offset_of!(failsafe_flags_s, local_velocity_invalid) - 65usize];
    ["Offset of field: failsafe_flags_s::global_position_invalid"]
        [::core::mem::offset_of!(failsafe_flags_s, global_position_invalid) - 66usize];
    ["Offset of field: failsafe_flags_s::auto_mission_missing"]
        [::core::mem::offset_of!(failsafe_flags_s, auto_mission_missing) - 67usize];
    ["Offset of field: failsafe_flags_s::offboard_control_signal_lost"]
        [::core::mem::offset_of!(failsafe_flags_s, offboard_control_signal_lost) - 68usize];
    ["Offset of field: failsafe_flags_s::home_position_invalid"]
        [::core::mem::offset_of!(failsafe_flags_s, home_position_invalid) - 69usize];
    ["Offset of field: failsafe_flags_s::manual_control_signal_lost"]
        [::core::mem::offset_of!(failsafe_flags_s, manual_control_signal_lost) - 70usize];
    ["Offset of field: failsafe_flags_s::gcs_connection_lost"]
        [::core::mem::offset_of!(failsafe_flags_s, gcs_connection_lost) - 71usize];
    ["Offset of field: failsafe_flags_s::battery_warning"]
        [::core::mem::offset_of!(failsafe_flags_s, battery_warning) - 72usize];
    ["Offset of field: failsafe_flags_s::battery_low_remaining_time"]
        [::core::mem::offset_of!(failsafe_flags_s, battery_low_remaining_time) - 73usize];
    ["Offset of field: failsafe_flags_s::battery_unhealthy"]
        [::core::mem::offset_of!(failsafe_flags_s, battery_unhealthy) - 74usize];
    ["Offset of field: failsafe_flags_s::geofence_breached"]
        [::core::mem::offset_of!(failsafe_flags_s, geofence_breached) - 75usize];
    ["Offset of field: failsafe_flags_s::mission_failure"]
        [::core::mem::offset_of!(failsafe_flags_s, mission_failure) - 76usize];
    ["Offset of field: failsafe_flags_s::vtol_fixed_wing_system_failure"]
        [::core::mem::offset_of!(failsafe_flags_s, vtol_fixed_wing_system_failure) - 77usize];
    ["Offset of field: failsafe_flags_s::wind_limit_exceeded"]
        [::core::mem::offset_of!(failsafe_flags_s, wind_limit_exceeded) - 78usize];
    ["Offset of field: failsafe_flags_s::flight_time_limit_exceeded"]
        [::core::mem::offset_of!(failsafe_flags_s, flight_time_limit_exceeded) - 79usize];
    ["Offset of field: failsafe_flags_s::local_position_accuracy_low"]
        [::core::mem::offset_of!(failsafe_flags_s, local_position_accuracy_low) - 80usize];
    ["Offset of field: failsafe_flags_s::navigator_failure"]
        [::core::mem::offset_of!(failsafe_flags_s, navigator_failure) - 81usize];
    ["Offset of field: failsafe_flags_s::fd_critical_failure"]
        [::core::mem::offset_of!(failsafe_flags_s, fd_critical_failure) - 82usize];
    ["Offset of field: failsafe_flags_s::fd_esc_arming_failure"]
        [::core::mem::offset_of!(failsafe_flags_s, fd_esc_arming_failure) - 83usize];
    ["Offset of field: failsafe_flags_s::fd_imbalanced_prop"]
        [::core::mem::offset_of!(failsafe_flags_s, fd_imbalanced_prop) - 84usize];
    ["Offset of field: failsafe_flags_s::fd_motor_failure"]
        [::core::mem::offset_of!(failsafe_flags_s, fd_motor_failure) - 85usize];
    ["Offset of field: failsafe_flags_s::_padding0"]
        [::core::mem::offset_of!(failsafe_flags_s, _padding0) - 86usize];
};
unsafe extern "C" {
    pub static __orb_failsafe_flags: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct estimator_bias3d_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub device_id: u32,
    pub bias: [f32; 3usize],
    pub bias_var: [f32; 3usize],
    pub innov: [f32; 3usize],
    pub innov_var: [f32; 3usize],
    pub innov_test_ratio: [f32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of estimator_bias3d_s"][::core::mem::size_of::<estimator_bias3d_s>() - 80usize];
    ["Alignment of estimator_bias3d_s"][::core::mem::align_of::<estimator_bias3d_s>() - 8usize];
    ["Offset of field: estimator_bias3d_s::timestamp"]
        [::core::mem::offset_of!(estimator_bias3d_s, timestamp) - 0usize];
    ["Offset of field: estimator_bias3d_s::timestamp_sample"]
        [::core::mem::offset_of!(estimator_bias3d_s, timestamp_sample) - 8usize];
    ["Offset of field: estimator_bias3d_s::device_id"]
        [::core::mem::offset_of!(estimator_bias3d_s, device_id) - 16usize];
    ["Offset of field: estimator_bias3d_s::bias"]
        [::core::mem::offset_of!(estimator_bias3d_s, bias) - 20usize];
    ["Offset of field: estimator_bias3d_s::bias_var"]
        [::core::mem::offset_of!(estimator_bias3d_s, bias_var) - 32usize];
    ["Offset of field: estimator_bias3d_s::innov"]
        [::core::mem::offset_of!(estimator_bias3d_s, innov) - 44usize];
    ["Offset of field: estimator_bias3d_s::innov_var"]
        [::core::mem::offset_of!(estimator_bias3d_s, innov_var) - 56usize];
    ["Offset of field: estimator_bias3d_s::innov_test_ratio"]
        [::core::mem::offset_of!(estimator_bias3d_s, innov_test_ratio) - 68usize];
};
unsafe extern "C" {
    pub static __orb_estimator_bias3d: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_ev_pos_bias: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_accel_fifo_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub device_id: u32,
    pub dt: f32,
    pub scale: f32,
    pub x: [i16; 32usize],
    pub y: [i16; 32usize],
    pub z: [i16; 32usize],
    pub samples: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_accel_fifo_s"][::core::mem::size_of::<sensor_accel_fifo_s>() - 224usize];
    ["Alignment of sensor_accel_fifo_s"][::core::mem::align_of::<sensor_accel_fifo_s>() - 8usize];
    ["Offset of field: sensor_accel_fifo_s::timestamp"]
        [::core::mem::offset_of!(sensor_accel_fifo_s, timestamp) - 0usize];
    ["Offset of field: sensor_accel_fifo_s::timestamp_sample"]
        [::core::mem::offset_of!(sensor_accel_fifo_s, timestamp_sample) - 8usize];
    ["Offset of field: sensor_accel_fifo_s::device_id"]
        [::core::mem::offset_of!(sensor_accel_fifo_s, device_id) - 16usize];
    ["Offset of field: sensor_accel_fifo_s::dt"]
        [::core::mem::offset_of!(sensor_accel_fifo_s, dt) - 20usize];
    ["Offset of field: sensor_accel_fifo_s::scale"]
        [::core::mem::offset_of!(sensor_accel_fifo_s, scale) - 24usize];
    ["Offset of field: sensor_accel_fifo_s::x"]
        [::core::mem::offset_of!(sensor_accel_fifo_s, x) - 28usize];
    ["Offset of field: sensor_accel_fifo_s::y"]
        [::core::mem::offset_of!(sensor_accel_fifo_s, y) - 92usize];
    ["Offset of field: sensor_accel_fifo_s::z"]
        [::core::mem::offset_of!(sensor_accel_fifo_s, z) - 156usize];
    ["Offset of field: sensor_accel_fifo_s::samples"]
        [::core::mem::offset_of!(sensor_accel_fifo_s, samples) - 220usize];
    ["Offset of field: sensor_accel_fifo_s::_padding0"]
        [::core::mem::offset_of!(sensor_accel_fifo_s, _padding0) - 221usize];
};
unsafe extern "C" {
    pub static __orb_sensor_accel_fifo: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct health_report_s {
    pub timestamp: u64,
    pub can_arm_mode_flags: u64,
    pub can_run_mode_flags: u64,
    pub health_is_present_flags: u64,
    pub health_warning_flags: u64,
    pub health_error_flags: u64,
    pub arming_check_warning_flags: u64,
    pub arming_check_error_flags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of health_report_s"][::core::mem::size_of::<health_report_s>() - 64usize];
    ["Alignment of health_report_s"][::core::mem::align_of::<health_report_s>() - 8usize];
    ["Offset of field: health_report_s::timestamp"]
        [::core::mem::offset_of!(health_report_s, timestamp) - 0usize];
    ["Offset of field: health_report_s::can_arm_mode_flags"]
        [::core::mem::offset_of!(health_report_s, can_arm_mode_flags) - 8usize];
    ["Offset of field: health_report_s::can_run_mode_flags"]
        [::core::mem::offset_of!(health_report_s, can_run_mode_flags) - 16usize];
    ["Offset of field: health_report_s::health_is_present_flags"]
        [::core::mem::offset_of!(health_report_s, health_is_present_flags) - 24usize];
    ["Offset of field: health_report_s::health_warning_flags"]
        [::core::mem::offset_of!(health_report_s, health_warning_flags) - 32usize];
    ["Offset of field: health_report_s::health_error_flags"]
        [::core::mem::offset_of!(health_report_s, health_error_flags) - 40usize];
    ["Offset of field: health_report_s::arming_check_warning_flags"]
        [::core::mem::offset_of!(health_report_s, arming_check_warning_flags) - 48usize];
    ["Offset of field: health_report_s::arming_check_error_flags"]
        [::core::mem::offset_of!(health_report_s, arming_check_error_flags) - 56usize];
};
unsafe extern "C" {
    pub static __orb_health_report: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_mag_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub device_id: u32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub temperature: f32,
    pub error_count: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_mag_s"][::core::mem::size_of::<sensor_mag_s>() - 40usize];
    ["Alignment of sensor_mag_s"][::core::mem::align_of::<sensor_mag_s>() - 8usize];
    ["Offset of field: sensor_mag_s::timestamp"]
        [::core::mem::offset_of!(sensor_mag_s, timestamp) - 0usize];
    ["Offset of field: sensor_mag_s::timestamp_sample"]
        [::core::mem::offset_of!(sensor_mag_s, timestamp_sample) - 8usize];
    ["Offset of field: sensor_mag_s::device_id"]
        [::core::mem::offset_of!(sensor_mag_s, device_id) - 16usize];
    ["Offset of field: sensor_mag_s::x"][::core::mem::offset_of!(sensor_mag_s, x) - 20usize];
    ["Offset of field: sensor_mag_s::y"][::core::mem::offset_of!(sensor_mag_s, y) - 24usize];
    ["Offset of field: sensor_mag_s::z"][::core::mem::offset_of!(sensor_mag_s, z) - 28usize];
    ["Offset of field: sensor_mag_s::temperature"]
        [::core::mem::offset_of!(sensor_mag_s, temperature) - 32usize];
    ["Offset of field: sensor_mag_s::error_count"]
        [::core::mem::offset_of!(sensor_mag_s, error_count) - 36usize];
};
unsafe extern "C" {
    pub static __orb_sensor_mag: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct normalized_unsigned_setpoint_s {
    pub timestamp: u64,
    pub normalized_setpoint: f32,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of normalized_unsigned_setpoint_s"]
        [::core::mem::size_of::<normalized_unsigned_setpoint_s>() - 16usize];
    ["Alignment of normalized_unsigned_setpoint_s"]
        [::core::mem::align_of::<normalized_unsigned_setpoint_s>() - 8usize];
    ["Offset of field: normalized_unsigned_setpoint_s::timestamp"]
        [::core::mem::offset_of!(normalized_unsigned_setpoint_s, timestamp) - 0usize];
    ["Offset of field: normalized_unsigned_setpoint_s::normalized_setpoint"]
        [::core::mem::offset_of!(normalized_unsigned_setpoint_s, normalized_setpoint) - 8usize];
    ["Offset of field: normalized_unsigned_setpoint_s::_padding0"]
        [::core::mem::offset_of!(normalized_unsigned_setpoint_s, _padding0) - 12usize];
};
unsafe extern "C" {
    pub static __orb_flaps_setpoint: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_spoilers_setpoint: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tiltrotor_extra_controls_s {
    pub timestamp: u64,
    pub collective_tilt_normalized_setpoint: f32,
    pub collective_thrust_normalized_setpoint: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tiltrotor_extra_controls_s"]
        [::core::mem::size_of::<tiltrotor_extra_controls_s>() - 16usize];
    ["Alignment of tiltrotor_extra_controls_s"]
        [::core::mem::align_of::<tiltrotor_extra_controls_s>() - 8usize];
    ["Offset of field: tiltrotor_extra_controls_s::timestamp"]
        [::core::mem::offset_of!(tiltrotor_extra_controls_s, timestamp) - 0usize];
    ["Offset of field: tiltrotor_extra_controls_s::collective_tilt_normalized_setpoint"][::core::mem::offset_of!(
        tiltrotor_extra_controls_s,
        collective_tilt_normalized_setpoint
    )
        - 8usize];
    ["Offset of field: tiltrotor_extra_controls_s::collective_thrust_normalized_setpoint"][::core::mem::offset_of!(
        tiltrotor_extra_controls_s,
        collective_thrust_normalized_setpoint
    )
        - 12usize];
};
unsafe extern "C" {
    pub static __orb_tiltrotor_extra_controls: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ulog_stream_s {
    pub timestamp: u64,
    pub msg_sequence: u16,
    pub length: u8,
    pub first_message_offset: u8,
    pub flags: u8,
    pub data: [u8; 249usize],
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ulog_stream_s"][::core::mem::size_of::<ulog_stream_s>() - 264usize];
    ["Alignment of ulog_stream_s"][::core::mem::align_of::<ulog_stream_s>() - 8usize];
    ["Offset of field: ulog_stream_s::timestamp"]
        [::core::mem::offset_of!(ulog_stream_s, timestamp) - 0usize];
    ["Offset of field: ulog_stream_s::msg_sequence"]
        [::core::mem::offset_of!(ulog_stream_s, msg_sequence) - 8usize];
    ["Offset of field: ulog_stream_s::length"]
        [::core::mem::offset_of!(ulog_stream_s, length) - 10usize];
    ["Offset of field: ulog_stream_s::first_message_offset"]
        [::core::mem::offset_of!(ulog_stream_s, first_message_offset) - 11usize];
    ["Offset of field: ulog_stream_s::flags"]
        [::core::mem::offset_of!(ulog_stream_s, flags) - 12usize];
    ["Offset of field: ulog_stream_s::data"]
        [::core::mem::offset_of!(ulog_stream_s, data) - 13usize];
    ["Offset of field: ulog_stream_s::_padding0"]
        [::core::mem::offset_of!(ulog_stream_s, _padding0) - 262usize];
};
unsafe extern "C" {
    pub static __orb_ulog_stream: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct orb_test_medium_s {
    pub timestamp: u64,
    pub val: i32,
    pub junk: [u8; 64usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of orb_test_medium_s"][::core::mem::size_of::<orb_test_medium_s>() - 80usize];
    ["Alignment of orb_test_medium_s"][::core::mem::align_of::<orb_test_medium_s>() - 8usize];
    ["Offset of field: orb_test_medium_s::timestamp"]
        [::core::mem::offset_of!(orb_test_medium_s, timestamp) - 0usize];
    ["Offset of field: orb_test_medium_s::val"]
        [::core::mem::offset_of!(orb_test_medium_s, val) - 8usize];
    ["Offset of field: orb_test_medium_s::junk"]
        [::core::mem::offset_of!(orb_test_medium_s, junk) - 12usize];
    ["Offset of field: orb_test_medium_s::_padding0"]
        [::core::mem::offset_of!(orb_test_medium_s, _padding0) - 76usize];
};
unsafe extern "C" {
    pub static __orb_orb_test_medium: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_orb_test_medium_multi: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_orb_test_medium_wrap_around: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_orb_test_medium_queue: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_orb_test_medium_queue_poll: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct open_drone_id_self_id_s {
    pub timestamp: u64,
    pub id_or_mac: [u8; 20usize],
    pub description_type: u8,
    pub description: [::core::ffi::c_char; 23usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of open_drone_id_self_id_s"]
        [::core::mem::size_of::<open_drone_id_self_id_s>() - 56usize];
    ["Alignment of open_drone_id_self_id_s"]
        [::core::mem::align_of::<open_drone_id_self_id_s>() - 8usize];
    ["Offset of field: open_drone_id_self_id_s::timestamp"]
        [::core::mem::offset_of!(open_drone_id_self_id_s, timestamp) - 0usize];
    ["Offset of field: open_drone_id_self_id_s::id_or_mac"]
        [::core::mem::offset_of!(open_drone_id_self_id_s, id_or_mac) - 8usize];
    ["Offset of field: open_drone_id_self_id_s::description_type"]
        [::core::mem::offset_of!(open_drone_id_self_id_s, description_type) - 28usize];
    ["Offset of field: open_drone_id_self_id_s::description"]
        [::core::mem::offset_of!(open_drone_id_self_id_s, description) - 29usize];
    ["Offset of field: open_drone_id_self_id_s::_padding0"]
        [::core::mem::offset_of!(open_drone_id_self_id_s, _padding0) - 52usize];
};
unsafe extern "C" {
    pub static __orb_open_drone_id_self_id: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct config_overrides_s {
    pub timestamp: u64,
    pub defer_failsafes_timeout_s: i16,
    pub disable_auto_disarm: bool,
    pub defer_failsafes: bool,
    pub source_type: i8,
    pub source_id: u8,
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of config_overrides_s"][::core::mem::size_of::<config_overrides_s>() - 16usize];
    ["Alignment of config_overrides_s"][::core::mem::align_of::<config_overrides_s>() - 8usize];
    ["Offset of field: config_overrides_s::timestamp"]
        [::core::mem::offset_of!(config_overrides_s, timestamp) - 0usize];
    ["Offset of field: config_overrides_s::defer_failsafes_timeout_s"]
        [::core::mem::offset_of!(config_overrides_s, defer_failsafes_timeout_s) - 8usize];
    ["Offset of field: config_overrides_s::disable_auto_disarm"]
        [::core::mem::offset_of!(config_overrides_s, disable_auto_disarm) - 10usize];
    ["Offset of field: config_overrides_s::defer_failsafes"]
        [::core::mem::offset_of!(config_overrides_s, defer_failsafes) - 11usize];
    ["Offset of field: config_overrides_s::source_type"]
        [::core::mem::offset_of!(config_overrides_s, source_type) - 12usize];
    ["Offset of field: config_overrides_s::source_id"]
        [::core::mem::offset_of!(config_overrides_s, source_id) - 13usize];
    ["Offset of field: config_overrides_s::_padding0"]
        [::core::mem::offset_of!(config_overrides_s, _padding0) - 14usize];
};
unsafe extern "C" {
    pub static __orb_config_overrides: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_config_overrides_request: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct battery_status_s {
    pub timestamp: u64,
    pub voltage_v: f32,
    pub current_a: f32,
    pub current_average_a: f32,
    pub discharged_mah: f32,
    pub remaining: f32,
    pub scale: f32,
    pub time_remaining_s: f32,
    pub temperature: f32,
    pub voltage_cell_v: [f32; 14usize],
    pub max_cell_voltage_delta: f32,
    pub full_charge_capacity_wh: f32,
    pub remaining_capacity_wh: f32,
    pub nominal_voltage: f32,
    pub internal_resistance_estimate: f32,
    pub ocv_estimate: f32,
    pub ocv_estimate_filtered: f32,
    pub volt_based_soc_estimate: f32,
    pub voltage_prediction: f32,
    pub prediction_error: f32,
    pub estimation_covariance_norm: f32,
    pub capacity: u16,
    pub cycle_count: u16,
    pub average_time_to_empty: u16,
    pub serial_number: u16,
    pub manufacture_date: u16,
    pub state_of_health: u16,
    pub max_error: u16,
    pub interface_error: u16,
    pub faults: u16,
    pub over_discharge_count: u16,
    pub connected: bool,
    pub cell_count: u8,
    pub source: u8,
    pub priority: u8,
    pub id: u8,
    pub is_powering_off: bool,
    pub is_required: bool,
    pub warning: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of battery_status_s"][::core::mem::size_of::<battery_status_s>() - 168usize];
    ["Alignment of battery_status_s"][::core::mem::align_of::<battery_status_s>() - 8usize];
    ["Offset of field: battery_status_s::timestamp"]
        [::core::mem::offset_of!(battery_status_s, timestamp) - 0usize];
    ["Offset of field: battery_status_s::voltage_v"]
        [::core::mem::offset_of!(battery_status_s, voltage_v) - 8usize];
    ["Offset of field: battery_status_s::current_a"]
        [::core::mem::offset_of!(battery_status_s, current_a) - 12usize];
    ["Offset of field: battery_status_s::current_average_a"]
        [::core::mem::offset_of!(battery_status_s, current_average_a) - 16usize];
    ["Offset of field: battery_status_s::discharged_mah"]
        [::core::mem::offset_of!(battery_status_s, discharged_mah) - 20usize];
    ["Offset of field: battery_status_s::remaining"]
        [::core::mem::offset_of!(battery_status_s, remaining) - 24usize];
    ["Offset of field: battery_status_s::scale"]
        [::core::mem::offset_of!(battery_status_s, scale) - 28usize];
    ["Offset of field: battery_status_s::time_remaining_s"]
        [::core::mem::offset_of!(battery_status_s, time_remaining_s) - 32usize];
    ["Offset of field: battery_status_s::temperature"]
        [::core::mem::offset_of!(battery_status_s, temperature) - 36usize];
    ["Offset of field: battery_status_s::voltage_cell_v"]
        [::core::mem::offset_of!(battery_status_s, voltage_cell_v) - 40usize];
    ["Offset of field: battery_status_s::max_cell_voltage_delta"]
        [::core::mem::offset_of!(battery_status_s, max_cell_voltage_delta) - 96usize];
    ["Offset of field: battery_status_s::full_charge_capacity_wh"]
        [::core::mem::offset_of!(battery_status_s, full_charge_capacity_wh) - 100usize];
    ["Offset of field: battery_status_s::remaining_capacity_wh"]
        [::core::mem::offset_of!(battery_status_s, remaining_capacity_wh) - 104usize];
    ["Offset of field: battery_status_s::nominal_voltage"]
        [::core::mem::offset_of!(battery_status_s, nominal_voltage) - 108usize];
    ["Offset of field: battery_status_s::internal_resistance_estimate"]
        [::core::mem::offset_of!(battery_status_s, internal_resistance_estimate) - 112usize];
    ["Offset of field: battery_status_s::ocv_estimate"]
        [::core::mem::offset_of!(battery_status_s, ocv_estimate) - 116usize];
    ["Offset of field: battery_status_s::ocv_estimate_filtered"]
        [::core::mem::offset_of!(battery_status_s, ocv_estimate_filtered) - 120usize];
    ["Offset of field: battery_status_s::volt_based_soc_estimate"]
        [::core::mem::offset_of!(battery_status_s, volt_based_soc_estimate) - 124usize];
    ["Offset of field: battery_status_s::voltage_prediction"]
        [::core::mem::offset_of!(battery_status_s, voltage_prediction) - 128usize];
    ["Offset of field: battery_status_s::prediction_error"]
        [::core::mem::offset_of!(battery_status_s, prediction_error) - 132usize];
    ["Offset of field: battery_status_s::estimation_covariance_norm"]
        [::core::mem::offset_of!(battery_status_s, estimation_covariance_norm) - 136usize];
    ["Offset of field: battery_status_s::capacity"]
        [::core::mem::offset_of!(battery_status_s, capacity) - 140usize];
    ["Offset of field: battery_status_s::cycle_count"]
        [::core::mem::offset_of!(battery_status_s, cycle_count) - 142usize];
    ["Offset of field: battery_status_s::average_time_to_empty"]
        [::core::mem::offset_of!(battery_status_s, average_time_to_empty) - 144usize];
    ["Offset of field: battery_status_s::serial_number"]
        [::core::mem::offset_of!(battery_status_s, serial_number) - 146usize];
    ["Offset of field: battery_status_s::manufacture_date"]
        [::core::mem::offset_of!(battery_status_s, manufacture_date) - 148usize];
    ["Offset of field: battery_status_s::state_of_health"]
        [::core::mem::offset_of!(battery_status_s, state_of_health) - 150usize];
    ["Offset of field: battery_status_s::max_error"]
        [::core::mem::offset_of!(battery_status_s, max_error) - 152usize];
    ["Offset of field: battery_status_s::interface_error"]
        [::core::mem::offset_of!(battery_status_s, interface_error) - 154usize];
    ["Offset of field: battery_status_s::faults"]
        [::core::mem::offset_of!(battery_status_s, faults) - 156usize];
    ["Offset of field: battery_status_s::over_discharge_count"]
        [::core::mem::offset_of!(battery_status_s, over_discharge_count) - 158usize];
    ["Offset of field: battery_status_s::connected"]
        [::core::mem::offset_of!(battery_status_s, connected) - 160usize];
    ["Offset of field: battery_status_s::cell_count"]
        [::core::mem::offset_of!(battery_status_s, cell_count) - 161usize];
    ["Offset of field: battery_status_s::source"]
        [::core::mem::offset_of!(battery_status_s, source) - 162usize];
    ["Offset of field: battery_status_s::priority"]
        [::core::mem::offset_of!(battery_status_s, priority) - 163usize];
    ["Offset of field: battery_status_s::id"]
        [::core::mem::offset_of!(battery_status_s, id) - 164usize];
    ["Offset of field: battery_status_s::is_powering_off"]
        [::core::mem::offset_of!(battery_status_s, is_powering_off) - 165usize];
    ["Offset of field: battery_status_s::is_required"]
        [::core::mem::offset_of!(battery_status_s, is_required) - 166usize];
    ["Offset of field: battery_status_s::warning"]
        [::core::mem::offset_of!(battery_status_s, warning) - 167usize];
};
unsafe extern "C" {
    pub static __orb_battery_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rover_throttle_setpoint_s {
    pub timestamp: u64,
    pub throttle_body_x: f32,
    pub throttle_body_y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rover_throttle_setpoint_s"]
        [::core::mem::size_of::<rover_throttle_setpoint_s>() - 16usize];
    ["Alignment of rover_throttle_setpoint_s"]
        [::core::mem::align_of::<rover_throttle_setpoint_s>() - 8usize];
    ["Offset of field: rover_throttle_setpoint_s::timestamp"]
        [::core::mem::offset_of!(rover_throttle_setpoint_s, timestamp) - 0usize];
    ["Offset of field: rover_throttle_setpoint_s::throttle_body_x"]
        [::core::mem::offset_of!(rover_throttle_setpoint_s, throttle_body_x) - 8usize];
    ["Offset of field: rover_throttle_setpoint_s::throttle_body_y"]
        [::core::mem::offset_of!(rover_throttle_setpoint_s, throttle_body_y) - 12usize];
};
unsafe extern "C" {
    pub static __orb_rover_throttle_setpoint: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct orbit_status_s {
    pub timestamp: u64,
    pub x: f64,
    pub y: f64,
    pub radius: f32,
    pub z: f32,
    pub frame: u8,
    pub yaw_behaviour: u8,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of orbit_status_s"][::core::mem::size_of::<orbit_status_s>() - 40usize];
    ["Alignment of orbit_status_s"][::core::mem::align_of::<orbit_status_s>() - 8usize];
    ["Offset of field: orbit_status_s::timestamp"]
        [::core::mem::offset_of!(orbit_status_s, timestamp) - 0usize];
    ["Offset of field: orbit_status_s::x"][::core::mem::offset_of!(orbit_status_s, x) - 8usize];
    ["Offset of field: orbit_status_s::y"][::core::mem::offset_of!(orbit_status_s, y) - 16usize];
    ["Offset of field: orbit_status_s::radius"]
        [::core::mem::offset_of!(orbit_status_s, radius) - 24usize];
    ["Offset of field: orbit_status_s::z"][::core::mem::offset_of!(orbit_status_s, z) - 28usize];
    ["Offset of field: orbit_status_s::frame"]
        [::core::mem::offset_of!(orbit_status_s, frame) - 32usize];
    ["Offset of field: orbit_status_s::yaw_behaviour"]
        [::core::mem::offset_of!(orbit_status_s, yaw_behaviour) - 33usize];
    ["Offset of field: orbit_status_s::_padding0"]
        [::core::mem::offset_of!(orbit_status_s, _padding0) - 34usize];
};
unsafe extern "C" {
    pub static __orb_orbit_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_local_position_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub ref_timestamp: u64,
    pub ref_lat: f64,
    pub ref_lon: f64,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub delta_xy: [f32; 2usize],
    pub delta_z: f32,
    pub vx: f32,
    pub vy: f32,
    pub vz: f32,
    pub z_deriv: f32,
    pub delta_vxy: [f32; 2usize],
    pub delta_vz: f32,
    pub ax: f32,
    pub ay: f32,
    pub az: f32,
    pub heading: f32,
    pub heading_var: f32,
    pub unaided_heading: f32,
    pub delta_heading: f32,
    pub tilt_var: f32,
    pub ref_alt: f32,
    pub dist_bottom: f32,
    pub dist_bottom_var: f32,
    pub delta_dist_bottom: f32,
    pub eph: f32,
    pub epv: f32,
    pub evh: f32,
    pub evv: f32,
    pub vxy_max: f32,
    pub vz_max: f32,
    pub hagl_min: f32,
    pub hagl_max_z: f32,
    pub hagl_max_xy: f32,
    pub xy_valid: bool,
    pub z_valid: bool,
    pub v_xy_valid: bool,
    pub v_z_valid: bool,
    pub xy_reset_counter: u8,
    pub z_reset_counter: u8,
    pub vxy_reset_counter: u8,
    pub vz_reset_counter: u8,
    pub heading_reset_counter: u8,
    pub heading_good_for_control: bool,
    pub xy_global: bool,
    pub z_global: bool,
    pub dist_bottom_valid: bool,
    pub dist_bottom_reset_counter: u8,
    pub dist_bottom_sensor_bitfield: u8,
    pub dead_reckoning: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_local_position_s"]
        [::core::mem::size_of::<vehicle_local_position_s>() - 192usize];
    ["Alignment of vehicle_local_position_s"]
        [::core::mem::align_of::<vehicle_local_position_s>() - 8usize];
    ["Offset of field: vehicle_local_position_s::timestamp"]
        [::core::mem::offset_of!(vehicle_local_position_s, timestamp) - 0usize];
    ["Offset of field: vehicle_local_position_s::timestamp_sample"]
        [::core::mem::offset_of!(vehicle_local_position_s, timestamp_sample) - 8usize];
    ["Offset of field: vehicle_local_position_s::ref_timestamp"]
        [::core::mem::offset_of!(vehicle_local_position_s, ref_timestamp) - 16usize];
    ["Offset of field: vehicle_local_position_s::ref_lat"]
        [::core::mem::offset_of!(vehicle_local_position_s, ref_lat) - 24usize];
    ["Offset of field: vehicle_local_position_s::ref_lon"]
        [::core::mem::offset_of!(vehicle_local_position_s, ref_lon) - 32usize];
    ["Offset of field: vehicle_local_position_s::x"]
        [::core::mem::offset_of!(vehicle_local_position_s, x) - 40usize];
    ["Offset of field: vehicle_local_position_s::y"]
        [::core::mem::offset_of!(vehicle_local_position_s, y) - 44usize];
    ["Offset of field: vehicle_local_position_s::z"]
        [::core::mem::offset_of!(vehicle_local_position_s, z) - 48usize];
    ["Offset of field: vehicle_local_position_s::delta_xy"]
        [::core::mem::offset_of!(vehicle_local_position_s, delta_xy) - 52usize];
    ["Offset of field: vehicle_local_position_s::delta_z"]
        [::core::mem::offset_of!(vehicle_local_position_s, delta_z) - 60usize];
    ["Offset of field: vehicle_local_position_s::vx"]
        [::core::mem::offset_of!(vehicle_local_position_s, vx) - 64usize];
    ["Offset of field: vehicle_local_position_s::vy"]
        [::core::mem::offset_of!(vehicle_local_position_s, vy) - 68usize];
    ["Offset of field: vehicle_local_position_s::vz"]
        [::core::mem::offset_of!(vehicle_local_position_s, vz) - 72usize];
    ["Offset of field: vehicle_local_position_s::z_deriv"]
        [::core::mem::offset_of!(vehicle_local_position_s, z_deriv) - 76usize];
    ["Offset of field: vehicle_local_position_s::delta_vxy"]
        [::core::mem::offset_of!(vehicle_local_position_s, delta_vxy) - 80usize];
    ["Offset of field: vehicle_local_position_s::delta_vz"]
        [::core::mem::offset_of!(vehicle_local_position_s, delta_vz) - 88usize];
    ["Offset of field: vehicle_local_position_s::ax"]
        [::core::mem::offset_of!(vehicle_local_position_s, ax) - 92usize];
    ["Offset of field: vehicle_local_position_s::ay"]
        [::core::mem::offset_of!(vehicle_local_position_s, ay) - 96usize];
    ["Offset of field: vehicle_local_position_s::az"]
        [::core::mem::offset_of!(vehicle_local_position_s, az) - 100usize];
    ["Offset of field: vehicle_local_position_s::heading"]
        [::core::mem::offset_of!(vehicle_local_position_s, heading) - 104usize];
    ["Offset of field: vehicle_local_position_s::heading_var"]
        [::core::mem::offset_of!(vehicle_local_position_s, heading_var) - 108usize];
    ["Offset of field: vehicle_local_position_s::unaided_heading"]
        [::core::mem::offset_of!(vehicle_local_position_s, unaided_heading) - 112usize];
    ["Offset of field: vehicle_local_position_s::delta_heading"]
        [::core::mem::offset_of!(vehicle_local_position_s, delta_heading) - 116usize];
    ["Offset of field: vehicle_local_position_s::tilt_var"]
        [::core::mem::offset_of!(vehicle_local_position_s, tilt_var) - 120usize];
    ["Offset of field: vehicle_local_position_s::ref_alt"]
        [::core::mem::offset_of!(vehicle_local_position_s, ref_alt) - 124usize];
    ["Offset of field: vehicle_local_position_s::dist_bottom"]
        [::core::mem::offset_of!(vehicle_local_position_s, dist_bottom) - 128usize];
    ["Offset of field: vehicle_local_position_s::dist_bottom_var"]
        [::core::mem::offset_of!(vehicle_local_position_s, dist_bottom_var) - 132usize];
    ["Offset of field: vehicle_local_position_s::delta_dist_bottom"]
        [::core::mem::offset_of!(vehicle_local_position_s, delta_dist_bottom) - 136usize];
    ["Offset of field: vehicle_local_position_s::eph"]
        [::core::mem::offset_of!(vehicle_local_position_s, eph) - 140usize];
    ["Offset of field: vehicle_local_position_s::epv"]
        [::core::mem::offset_of!(vehicle_local_position_s, epv) - 144usize];
    ["Offset of field: vehicle_local_position_s::evh"]
        [::core::mem::offset_of!(vehicle_local_position_s, evh) - 148usize];
    ["Offset of field: vehicle_local_position_s::evv"]
        [::core::mem::offset_of!(vehicle_local_position_s, evv) - 152usize];
    ["Offset of field: vehicle_local_position_s::vxy_max"]
        [::core::mem::offset_of!(vehicle_local_position_s, vxy_max) - 156usize];
    ["Offset of field: vehicle_local_position_s::vz_max"]
        [::core::mem::offset_of!(vehicle_local_position_s, vz_max) - 160usize];
    ["Offset of field: vehicle_local_position_s::hagl_min"]
        [::core::mem::offset_of!(vehicle_local_position_s, hagl_min) - 164usize];
    ["Offset of field: vehicle_local_position_s::hagl_max_z"]
        [::core::mem::offset_of!(vehicle_local_position_s, hagl_max_z) - 168usize];
    ["Offset of field: vehicle_local_position_s::hagl_max_xy"]
        [::core::mem::offset_of!(vehicle_local_position_s, hagl_max_xy) - 172usize];
    ["Offset of field: vehicle_local_position_s::xy_valid"]
        [::core::mem::offset_of!(vehicle_local_position_s, xy_valid) - 176usize];
    ["Offset of field: vehicle_local_position_s::z_valid"]
        [::core::mem::offset_of!(vehicle_local_position_s, z_valid) - 177usize];
    ["Offset of field: vehicle_local_position_s::v_xy_valid"]
        [::core::mem::offset_of!(vehicle_local_position_s, v_xy_valid) - 178usize];
    ["Offset of field: vehicle_local_position_s::v_z_valid"]
        [::core::mem::offset_of!(vehicle_local_position_s, v_z_valid) - 179usize];
    ["Offset of field: vehicle_local_position_s::xy_reset_counter"]
        [::core::mem::offset_of!(vehicle_local_position_s, xy_reset_counter) - 180usize];
    ["Offset of field: vehicle_local_position_s::z_reset_counter"]
        [::core::mem::offset_of!(vehicle_local_position_s, z_reset_counter) - 181usize];
    ["Offset of field: vehicle_local_position_s::vxy_reset_counter"]
        [::core::mem::offset_of!(vehicle_local_position_s, vxy_reset_counter) - 182usize];
    ["Offset of field: vehicle_local_position_s::vz_reset_counter"]
        [::core::mem::offset_of!(vehicle_local_position_s, vz_reset_counter) - 183usize];
    ["Offset of field: vehicle_local_position_s::heading_reset_counter"]
        [::core::mem::offset_of!(vehicle_local_position_s, heading_reset_counter) - 184usize];
    ["Offset of field: vehicle_local_position_s::heading_good_for_control"]
        [::core::mem::offset_of!(vehicle_local_position_s, heading_good_for_control) - 185usize];
    ["Offset of field: vehicle_local_position_s::xy_global"]
        [::core::mem::offset_of!(vehicle_local_position_s, xy_global) - 186usize];
    ["Offset of field: vehicle_local_position_s::z_global"]
        [::core::mem::offset_of!(vehicle_local_position_s, z_global) - 187usize];
    ["Offset of field: vehicle_local_position_s::dist_bottom_valid"]
        [::core::mem::offset_of!(vehicle_local_position_s, dist_bottom_valid) - 188usize];
    ["Offset of field: vehicle_local_position_s::dist_bottom_reset_counter"]
        [::core::mem::offset_of!(vehicle_local_position_s, dist_bottom_reset_counter) - 189usize];
    ["Offset of field: vehicle_local_position_s::dist_bottom_sensor_bitfield"]
        [::core::mem::offset_of!(vehicle_local_position_s, dist_bottom_sensor_bitfield) - 190usize];
    ["Offset of field: vehicle_local_position_s::dead_reckoning"]
        [::core::mem::offset_of!(vehicle_local_position_s, dead_reckoning) - 191usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_local_position: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_vehicle_local_position_groundtruth: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_external_ins_local_position: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_local_position: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct airspeed_validated_s {
    pub timestamp: u64,
    pub indicated_airspeed_m_s: f32,
    pub calibrated_airspeed_m_s: f32,
    pub true_airspeed_m_s: f32,
    pub calibrated_ground_minus_wind_m_s: f32,
    pub true_ground_minus_wind_m_s: f32,
    pub airspeed_derivative_filtered: f32,
    pub throttle_filtered: f32,
    pub pitch_filtered: f32,
    pub airspeed_sensor_measurement_valid: bool,
    pub selected_airspeed_index: i8,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of airspeed_validated_s"][::core::mem::size_of::<airspeed_validated_s>() - 48usize];
    ["Alignment of airspeed_validated_s"][::core::mem::align_of::<airspeed_validated_s>() - 8usize];
    ["Offset of field: airspeed_validated_s::timestamp"]
        [::core::mem::offset_of!(airspeed_validated_s, timestamp) - 0usize];
    ["Offset of field: airspeed_validated_s::indicated_airspeed_m_s"]
        [::core::mem::offset_of!(airspeed_validated_s, indicated_airspeed_m_s) - 8usize];
    ["Offset of field: airspeed_validated_s::calibrated_airspeed_m_s"]
        [::core::mem::offset_of!(airspeed_validated_s, calibrated_airspeed_m_s) - 12usize];
    ["Offset of field: airspeed_validated_s::true_airspeed_m_s"]
        [::core::mem::offset_of!(airspeed_validated_s, true_airspeed_m_s) - 16usize];
    ["Offset of field: airspeed_validated_s::calibrated_ground_minus_wind_m_s"]
        [::core::mem::offset_of!(airspeed_validated_s, calibrated_ground_minus_wind_m_s) - 20usize];
    ["Offset of field: airspeed_validated_s::true_ground_minus_wind_m_s"]
        [::core::mem::offset_of!(airspeed_validated_s, true_ground_minus_wind_m_s) - 24usize];
    ["Offset of field: airspeed_validated_s::airspeed_derivative_filtered"]
        [::core::mem::offset_of!(airspeed_validated_s, airspeed_derivative_filtered) - 28usize];
    ["Offset of field: airspeed_validated_s::throttle_filtered"]
        [::core::mem::offset_of!(airspeed_validated_s, throttle_filtered) - 32usize];
    ["Offset of field: airspeed_validated_s::pitch_filtered"]
        [::core::mem::offset_of!(airspeed_validated_s, pitch_filtered) - 36usize];
    ["Offset of field: airspeed_validated_s::airspeed_sensor_measurement_valid"][::core::mem::offset_of!(
        airspeed_validated_s,
        airspeed_sensor_measurement_valid
    ) - 40usize];
    ["Offset of field: airspeed_validated_s::selected_airspeed_index"]
        [::core::mem::offset_of!(airspeed_validated_s, selected_airspeed_index) - 41usize];
    ["Offset of field: airspeed_validated_s::_padding0"]
        [::core::mem::offset_of!(airspeed_validated_s, _padding0) - 42usize];
};
unsafe extern "C" {
    pub static __orb_airspeed_validated: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct actuator_servos_trim_s {
    pub timestamp: u64,
    pub trim: [f32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of actuator_servos_trim_s"][::core::mem::size_of::<actuator_servos_trim_s>() - 40usize];
    ["Alignment of actuator_servos_trim_s"]
        [::core::mem::align_of::<actuator_servos_trim_s>() - 8usize];
    ["Offset of field: actuator_servos_trim_s::timestamp"]
        [::core::mem::offset_of!(actuator_servos_trim_s, timestamp) - 0usize];
    ["Offset of field: actuator_servos_trim_s::trim"]
        [::core::mem::offset_of!(actuator_servos_trim_s, trim) - 8usize];
};
unsafe extern "C" {
    pub static __orb_actuator_servos_trim: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pure_pursuit_status_s {
    pub timestamp: u64,
    pub lookahead_distance: f32,
    pub target_bearing: f32,
    pub crosstrack_error: f32,
    pub distance_to_waypoint: f32,
    pub bearing_to_waypoint: f32,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pure_pursuit_status_s"][::core::mem::size_of::<pure_pursuit_status_s>() - 32usize];
    ["Alignment of pure_pursuit_status_s"]
        [::core::mem::align_of::<pure_pursuit_status_s>() - 8usize];
    ["Offset of field: pure_pursuit_status_s::timestamp"]
        [::core::mem::offset_of!(pure_pursuit_status_s, timestamp) - 0usize];
    ["Offset of field: pure_pursuit_status_s::lookahead_distance"]
        [::core::mem::offset_of!(pure_pursuit_status_s, lookahead_distance) - 8usize];
    ["Offset of field: pure_pursuit_status_s::target_bearing"]
        [::core::mem::offset_of!(pure_pursuit_status_s, target_bearing) - 12usize];
    ["Offset of field: pure_pursuit_status_s::crosstrack_error"]
        [::core::mem::offset_of!(pure_pursuit_status_s, crosstrack_error) - 16usize];
    ["Offset of field: pure_pursuit_status_s::distance_to_waypoint"]
        [::core::mem::offset_of!(pure_pursuit_status_s, distance_to_waypoint) - 20usize];
    ["Offset of field: pure_pursuit_status_s::bearing_to_waypoint"]
        [::core::mem::offset_of!(pure_pursuit_status_s, bearing_to_waypoint) - 24usize];
    ["Offset of field: pure_pursuit_status_s::_padding0"]
        [::core::mem::offset_of!(pure_pursuit_status_s, _padding0) - 28usize];
};
unsafe extern "C" {
    pub static __orb_pure_pursuit_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct log_message_s {
    pub timestamp: u64,
    pub severity: u8,
    pub text: [::core::ffi::c_char; 127usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of log_message_s"][::core::mem::size_of::<log_message_s>() - 136usize];
    ["Alignment of log_message_s"][::core::mem::align_of::<log_message_s>() - 8usize];
    ["Offset of field: log_message_s::timestamp"]
        [::core::mem::offset_of!(log_message_s, timestamp) - 0usize];
    ["Offset of field: log_message_s::severity"]
        [::core::mem::offset_of!(log_message_s, severity) - 8usize];
    ["Offset of field: log_message_s::text"][::core::mem::offset_of!(log_message_s, text) - 9usize];
};
unsafe extern "C" {
    pub static __orb_log_message: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_command_ack_s {
    pub timestamp: u64,
    pub command: u32,
    pub result_param2: i32,
    pub target_component: u16,
    pub result: u8,
    pub result_param1: u8,
    pub target_system: u8,
    pub from_external: bool,
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_command_ack_s"][::core::mem::size_of::<vehicle_command_ack_s>() - 24usize];
    ["Alignment of vehicle_command_ack_s"]
        [::core::mem::align_of::<vehicle_command_ack_s>() - 8usize];
    ["Offset of field: vehicle_command_ack_s::timestamp"]
        [::core::mem::offset_of!(vehicle_command_ack_s, timestamp) - 0usize];
    ["Offset of field: vehicle_command_ack_s::command"]
        [::core::mem::offset_of!(vehicle_command_ack_s, command) - 8usize];
    ["Offset of field: vehicle_command_ack_s::result_param2"]
        [::core::mem::offset_of!(vehicle_command_ack_s, result_param2) - 12usize];
    ["Offset of field: vehicle_command_ack_s::target_component"]
        [::core::mem::offset_of!(vehicle_command_ack_s, target_component) - 16usize];
    ["Offset of field: vehicle_command_ack_s::result"]
        [::core::mem::offset_of!(vehicle_command_ack_s, result) - 18usize];
    ["Offset of field: vehicle_command_ack_s::result_param1"]
        [::core::mem::offset_of!(vehicle_command_ack_s, result_param1) - 19usize];
    ["Offset of field: vehicle_command_ack_s::target_system"]
        [::core::mem::offset_of!(vehicle_command_ack_s, target_system) - 20usize];
    ["Offset of field: vehicle_command_ack_s::from_external"]
        [::core::mem::offset_of!(vehicle_command_ack_s, from_external) - 21usize];
    ["Offset of field: vehicle_command_ack_s::_padding0"]
        [::core::mem::offset_of!(vehicle_command_ack_s, _padding0) - 22usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_command_ack: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaw_estimator_status_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub yaw_composite: f32,
    pub yaw_variance: f32,
    pub yaw: [f32; 5usize],
    pub innov_vn: [f32; 5usize],
    pub innov_ve: [f32; 5usize],
    pub weight: [f32; 5usize],
    pub yaw_composite_valid: bool,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of yaw_estimator_status_s"][::core::mem::size_of::<yaw_estimator_status_s>() - 112usize];
    ["Alignment of yaw_estimator_status_s"]
        [::core::mem::align_of::<yaw_estimator_status_s>() - 8usize];
    ["Offset of field: yaw_estimator_status_s::timestamp"]
        [::core::mem::offset_of!(yaw_estimator_status_s, timestamp) - 0usize];
    ["Offset of field: yaw_estimator_status_s::timestamp_sample"]
        [::core::mem::offset_of!(yaw_estimator_status_s, timestamp_sample) - 8usize];
    ["Offset of field: yaw_estimator_status_s::yaw_composite"]
        [::core::mem::offset_of!(yaw_estimator_status_s, yaw_composite) - 16usize];
    ["Offset of field: yaw_estimator_status_s::yaw_variance"]
        [::core::mem::offset_of!(yaw_estimator_status_s, yaw_variance) - 20usize];
    ["Offset of field: yaw_estimator_status_s::yaw"]
        [::core::mem::offset_of!(yaw_estimator_status_s, yaw) - 24usize];
    ["Offset of field: yaw_estimator_status_s::innov_vn"]
        [::core::mem::offset_of!(yaw_estimator_status_s, innov_vn) - 44usize];
    ["Offset of field: yaw_estimator_status_s::innov_ve"]
        [::core::mem::offset_of!(yaw_estimator_status_s, innov_ve) - 64usize];
    ["Offset of field: yaw_estimator_status_s::weight"]
        [::core::mem::offset_of!(yaw_estimator_status_s, weight) - 84usize];
    ["Offset of field: yaw_estimator_status_s::yaw_composite_valid"]
        [::core::mem::offset_of!(yaw_estimator_status_s, yaw_composite_valid) - 104usize];
    ["Offset of field: yaw_estimator_status_s::_padding0"]
        [::core::mem::offset_of!(yaw_estimator_status_s, _padding0) - 105usize];
};
unsafe extern "C" {
    pub static __orb_yaw_estimator_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timesync_status_s {
    pub timestamp: u64,
    pub remote_timestamp: u64,
    pub observed_offset: i64,
    pub estimated_offset: i64,
    pub round_trip_time: u32,
    pub source_protocol: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timesync_status_s"][::core::mem::size_of::<timesync_status_s>() - 40usize];
    ["Alignment of timesync_status_s"][::core::mem::align_of::<timesync_status_s>() - 8usize];
    ["Offset of field: timesync_status_s::timestamp"]
        [::core::mem::offset_of!(timesync_status_s, timestamp) - 0usize];
    ["Offset of field: timesync_status_s::remote_timestamp"]
        [::core::mem::offset_of!(timesync_status_s, remote_timestamp) - 8usize];
    ["Offset of field: timesync_status_s::observed_offset"]
        [::core::mem::offset_of!(timesync_status_s, observed_offset) - 16usize];
    ["Offset of field: timesync_status_s::estimated_offset"]
        [::core::mem::offset_of!(timesync_status_s, estimated_offset) - 24usize];
    ["Offset of field: timesync_status_s::round_trip_time"]
        [::core::mem::offset_of!(timesync_status_s, round_trip_time) - 32usize];
    ["Offset of field: timesync_status_s::source_protocol"]
        [::core::mem::offset_of!(timesync_status_s, source_protocol) - 36usize];
    ["Offset of field: timesync_status_s::_padding0"]
        [::core::mem::offset_of!(timesync_status_s, _padding0) - 37usize];
};
unsafe extern "C" {
    pub static __orb_timesync_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trajectory_setpoint6dof_s {
    pub timestamp: u64,
    pub position: [f32; 3usize],
    pub velocity: [f32; 3usize],
    pub acceleration: [f32; 3usize],
    pub jerk: [f32; 3usize],
    pub quaternion: [f32; 4usize],
    pub angular_velocity: [f32; 3usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of trajectory_setpoint6dof_s"]
        [::core::mem::size_of::<trajectory_setpoint6dof_s>() - 88usize];
    ["Alignment of trajectory_setpoint6dof_s"]
        [::core::mem::align_of::<trajectory_setpoint6dof_s>() - 8usize];
    ["Offset of field: trajectory_setpoint6dof_s::timestamp"]
        [::core::mem::offset_of!(trajectory_setpoint6dof_s, timestamp) - 0usize];
    ["Offset of field: trajectory_setpoint6dof_s::position"]
        [::core::mem::offset_of!(trajectory_setpoint6dof_s, position) - 8usize];
    ["Offset of field: trajectory_setpoint6dof_s::velocity"]
        [::core::mem::offset_of!(trajectory_setpoint6dof_s, velocity) - 20usize];
    ["Offset of field: trajectory_setpoint6dof_s::acceleration"]
        [::core::mem::offset_of!(trajectory_setpoint6dof_s, acceleration) - 32usize];
    ["Offset of field: trajectory_setpoint6dof_s::jerk"]
        [::core::mem::offset_of!(trajectory_setpoint6dof_s, jerk) - 44usize];
    ["Offset of field: trajectory_setpoint6dof_s::quaternion"]
        [::core::mem::offset_of!(trajectory_setpoint6dof_s, quaternion) - 56usize];
    ["Offset of field: trajectory_setpoint6dof_s::angular_velocity"]
        [::core::mem::offset_of!(trajectory_setpoint6dof_s, angular_velocity) - 72usize];
    ["Offset of field: trajectory_setpoint6dof_s::_padding0"]
        [::core::mem::offset_of!(trajectory_setpoint6dof_s, _padding0) - 84usize];
};
unsafe extern "C" {
    pub static __orb_trajectory_setpoint6dof: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct power_monitor_s {
    pub timestamp: u64,
    pub voltage_v: f32,
    pub current_a: f32,
    pub power_w: f32,
    pub rconf: i16,
    pub rsv: i16,
    pub rbv: i16,
    pub rp: i16,
    pub rc: i16,
    pub rcal: i16,
    pub me: i16,
    pub al: i16,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of power_monitor_s"][::core::mem::size_of::<power_monitor_s>() - 40usize];
    ["Alignment of power_monitor_s"][::core::mem::align_of::<power_monitor_s>() - 8usize];
    ["Offset of field: power_monitor_s::timestamp"]
        [::core::mem::offset_of!(power_monitor_s, timestamp) - 0usize];
    ["Offset of field: power_monitor_s::voltage_v"]
        [::core::mem::offset_of!(power_monitor_s, voltage_v) - 8usize];
    ["Offset of field: power_monitor_s::current_a"]
        [::core::mem::offset_of!(power_monitor_s, current_a) - 12usize];
    ["Offset of field: power_monitor_s::power_w"]
        [::core::mem::offset_of!(power_monitor_s, power_w) - 16usize];
    ["Offset of field: power_monitor_s::rconf"]
        [::core::mem::offset_of!(power_monitor_s, rconf) - 20usize];
    ["Offset of field: power_monitor_s::rsv"]
        [::core::mem::offset_of!(power_monitor_s, rsv) - 22usize];
    ["Offset of field: power_monitor_s::rbv"]
        [::core::mem::offset_of!(power_monitor_s, rbv) - 24usize];
    ["Offset of field: power_monitor_s::rp"]
        [::core::mem::offset_of!(power_monitor_s, rp) - 26usize];
    ["Offset of field: power_monitor_s::rc"]
        [::core::mem::offset_of!(power_monitor_s, rc) - 28usize];
    ["Offset of field: power_monitor_s::rcal"]
        [::core::mem::offset_of!(power_monitor_s, rcal) - 30usize];
    ["Offset of field: power_monitor_s::me"]
        [::core::mem::offset_of!(power_monitor_s, me) - 32usize];
    ["Offset of field: power_monitor_s::al"]
        [::core::mem::offset_of!(power_monitor_s, al) - 34usize];
    ["Offset of field: power_monitor_s::_padding0"]
        [::core::mem::offset_of!(power_monitor_s, _padding0) - 36usize];
};
unsafe extern "C" {
    pub static __orb_power_monitor: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obstacle_distance_s {
    pub timestamp: u64,
    pub increment: f32,
    pub angle_offset: f32,
    pub distances: [u16; 72usize],
    pub min_distance: u16,
    pub max_distance: u16,
    pub frame: u8,
    pub sensor_type: u8,
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of obstacle_distance_s"][::core::mem::size_of::<obstacle_distance_s>() - 168usize];
    ["Alignment of obstacle_distance_s"][::core::mem::align_of::<obstacle_distance_s>() - 8usize];
    ["Offset of field: obstacle_distance_s::timestamp"]
        [::core::mem::offset_of!(obstacle_distance_s, timestamp) - 0usize];
    ["Offset of field: obstacle_distance_s::increment"]
        [::core::mem::offset_of!(obstacle_distance_s, increment) - 8usize];
    ["Offset of field: obstacle_distance_s::angle_offset"]
        [::core::mem::offset_of!(obstacle_distance_s, angle_offset) - 12usize];
    ["Offset of field: obstacle_distance_s::distances"]
        [::core::mem::offset_of!(obstacle_distance_s, distances) - 16usize];
    ["Offset of field: obstacle_distance_s::min_distance"]
        [::core::mem::offset_of!(obstacle_distance_s, min_distance) - 160usize];
    ["Offset of field: obstacle_distance_s::max_distance"]
        [::core::mem::offset_of!(obstacle_distance_s, max_distance) - 162usize];
    ["Offset of field: obstacle_distance_s::frame"]
        [::core::mem::offset_of!(obstacle_distance_s, frame) - 164usize];
    ["Offset of field: obstacle_distance_s::sensor_type"]
        [::core::mem::offset_of!(obstacle_distance_s, sensor_type) - 165usize];
    ["Offset of field: obstacle_distance_s::_padding0"]
        [::core::mem::offset_of!(obstacle_distance_s, _padding0) - 166usize];
};
unsafe extern "C" {
    pub static __orb_obstacle_distance: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_obstacle_distance_fused: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct open_drone_id_operator_id_s {
    pub timestamp: u64,
    pub id_or_mac: [u8; 20usize],
    pub operator_id_type: u8,
    pub operator_id: [::core::ffi::c_char; 20usize],
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of open_drone_id_operator_id_s"]
        [::core::mem::size_of::<open_drone_id_operator_id_s>() - 56usize];
    ["Alignment of open_drone_id_operator_id_s"]
        [::core::mem::align_of::<open_drone_id_operator_id_s>() - 8usize];
    ["Offset of field: open_drone_id_operator_id_s::timestamp"]
        [::core::mem::offset_of!(open_drone_id_operator_id_s, timestamp) - 0usize];
    ["Offset of field: open_drone_id_operator_id_s::id_or_mac"]
        [::core::mem::offset_of!(open_drone_id_operator_id_s, id_or_mac) - 8usize];
    ["Offset of field: open_drone_id_operator_id_s::operator_id_type"]
        [::core::mem::offset_of!(open_drone_id_operator_id_s, operator_id_type) - 28usize];
    ["Offset of field: open_drone_id_operator_id_s::operator_id"]
        [::core::mem::offset_of!(open_drone_id_operator_id_s, operator_id) - 29usize];
    ["Offset of field: open_drone_id_operator_id_s::_padding0"]
        [::core::mem::offset_of!(open_drone_id_operator_id_s, _padding0) - 49usize];
};
unsafe extern "C" {
    pub static __orb_open_drone_id_operator_id: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rover_velocity_status_s {
    pub timestamp: u64,
    pub measured_speed_body_x: f32,
    pub speed_body_x_setpoint: f32,
    pub adjusted_speed_body_x_setpoint: f32,
    pub measured_speed_body_y: f32,
    pub speed_body_y_setpoint: f32,
    pub adjusted_speed_body_y_setpoint: f32,
    pub pid_throttle_body_x_integral: f32,
    pub pid_throttle_body_y_integral: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rover_velocity_status_s"]
        [::core::mem::size_of::<rover_velocity_status_s>() - 40usize];
    ["Alignment of rover_velocity_status_s"]
        [::core::mem::align_of::<rover_velocity_status_s>() - 8usize];
    ["Offset of field: rover_velocity_status_s::timestamp"]
        [::core::mem::offset_of!(rover_velocity_status_s, timestamp) - 0usize];
    ["Offset of field: rover_velocity_status_s::measured_speed_body_x"]
        [::core::mem::offset_of!(rover_velocity_status_s, measured_speed_body_x) - 8usize];
    ["Offset of field: rover_velocity_status_s::speed_body_x_setpoint"]
        [::core::mem::offset_of!(rover_velocity_status_s, speed_body_x_setpoint) - 12usize];
    ["Offset of field: rover_velocity_status_s::adjusted_speed_body_x_setpoint"][::core::mem::offset_of!(
        rover_velocity_status_s,
        adjusted_speed_body_x_setpoint
    ) - 16usize];
    ["Offset of field: rover_velocity_status_s::measured_speed_body_y"]
        [::core::mem::offset_of!(rover_velocity_status_s, measured_speed_body_y) - 20usize];
    ["Offset of field: rover_velocity_status_s::speed_body_y_setpoint"]
        [::core::mem::offset_of!(rover_velocity_status_s, speed_body_y_setpoint) - 24usize];
    ["Offset of field: rover_velocity_status_s::adjusted_speed_body_y_setpoint"][::core::mem::offset_of!(
        rover_velocity_status_s,
        adjusted_speed_body_y_setpoint
    ) - 28usize];
    ["Offset of field: rover_velocity_status_s::pid_throttle_body_x_integral"]
        [::core::mem::offset_of!(rover_velocity_status_s, pid_throttle_body_x_integral) - 32usize];
    ["Offset of field: rover_velocity_status_s::pid_throttle_body_y_integral"]
        [::core::mem::offset_of!(rover_velocity_status_s, pid_throttle_body_y_integral) - 36usize];
};
unsafe extern "C" {
    pub static __orb_rover_velocity_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gpio_in_s {
    pub timestamp: u64,
    pub device_id: u32,
    pub state: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpio_in_s"][::core::mem::size_of::<gpio_in_s>() - 16usize];
    ["Alignment of gpio_in_s"][::core::mem::align_of::<gpio_in_s>() - 8usize];
    ["Offset of field: gpio_in_s::timestamp"]
        [::core::mem::offset_of!(gpio_in_s, timestamp) - 0usize];
    ["Offset of field: gpio_in_s::device_id"]
        [::core::mem::offset_of!(gpio_in_s, device_id) - 8usize];
    ["Offset of field: gpio_in_s::state"][::core::mem::offset_of!(gpio_in_s, state) - 12usize];
};
unsafe extern "C" {
    pub static __orb_gpio_in: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mavlink_log_s {
    pub timestamp: u64,
    pub text: [::core::ffi::c_char; 127usize],
    pub severity: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mavlink_log_s"][::core::mem::size_of::<mavlink_log_s>() - 136usize];
    ["Alignment of mavlink_log_s"][::core::mem::align_of::<mavlink_log_s>() - 8usize];
    ["Offset of field: mavlink_log_s::timestamp"]
        [::core::mem::offset_of!(mavlink_log_s, timestamp) - 0usize];
    ["Offset of field: mavlink_log_s::text"][::core::mem::offset_of!(mavlink_log_s, text) - 8usize];
    ["Offset of field: mavlink_log_s::severity"]
        [::core::mem::offset_of!(mavlink_log_s, severity) - 135usize];
};
unsafe extern "C" {
    pub static __orb_mavlink_log: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct estimator_innovations_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub gps_hvel: [f32; 2usize],
    pub gps_vvel: f32,
    pub gps_hpos: [f32; 2usize],
    pub gps_vpos: f32,
    pub ev_hvel: [f32; 2usize],
    pub ev_vvel: f32,
    pub ev_hpos: [f32; 2usize],
    pub ev_vpos: f32,
    pub rng_vpos: f32,
    pub baro_vpos: f32,
    pub aux_hvel: [f32; 2usize],
    pub flow: [f32; 2usize],
    pub heading: f32,
    pub mag_field: [f32; 3usize],
    pub gravity: [f32; 3usize],
    pub drag: [f32; 2usize],
    pub airspeed: f32,
    pub beta: f32,
    pub hagl: f32,
    pub hagl_rate: f32,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of estimator_innovations_s"]
        [::core::mem::size_of::<estimator_innovations_s>() - 144usize];
    ["Alignment of estimator_innovations_s"]
        [::core::mem::align_of::<estimator_innovations_s>() - 8usize];
    ["Offset of field: estimator_innovations_s::timestamp"]
        [::core::mem::offset_of!(estimator_innovations_s, timestamp) - 0usize];
    ["Offset of field: estimator_innovations_s::timestamp_sample"]
        [::core::mem::offset_of!(estimator_innovations_s, timestamp_sample) - 8usize];
    ["Offset of field: estimator_innovations_s::gps_hvel"]
        [::core::mem::offset_of!(estimator_innovations_s, gps_hvel) - 16usize];
    ["Offset of field: estimator_innovations_s::gps_vvel"]
        [::core::mem::offset_of!(estimator_innovations_s, gps_vvel) - 24usize];
    ["Offset of field: estimator_innovations_s::gps_hpos"]
        [::core::mem::offset_of!(estimator_innovations_s, gps_hpos) - 28usize];
    ["Offset of field: estimator_innovations_s::gps_vpos"]
        [::core::mem::offset_of!(estimator_innovations_s, gps_vpos) - 36usize];
    ["Offset of field: estimator_innovations_s::ev_hvel"]
        [::core::mem::offset_of!(estimator_innovations_s, ev_hvel) - 40usize];
    ["Offset of field: estimator_innovations_s::ev_vvel"]
        [::core::mem::offset_of!(estimator_innovations_s, ev_vvel) - 48usize];
    ["Offset of field: estimator_innovations_s::ev_hpos"]
        [::core::mem::offset_of!(estimator_innovations_s, ev_hpos) - 52usize];
    ["Offset of field: estimator_innovations_s::ev_vpos"]
        [::core::mem::offset_of!(estimator_innovations_s, ev_vpos) - 60usize];
    ["Offset of field: estimator_innovations_s::rng_vpos"]
        [::core::mem::offset_of!(estimator_innovations_s, rng_vpos) - 64usize];
    ["Offset of field: estimator_innovations_s::baro_vpos"]
        [::core::mem::offset_of!(estimator_innovations_s, baro_vpos) - 68usize];
    ["Offset of field: estimator_innovations_s::aux_hvel"]
        [::core::mem::offset_of!(estimator_innovations_s, aux_hvel) - 72usize];
    ["Offset of field: estimator_innovations_s::flow"]
        [::core::mem::offset_of!(estimator_innovations_s, flow) - 80usize];
    ["Offset of field: estimator_innovations_s::heading"]
        [::core::mem::offset_of!(estimator_innovations_s, heading) - 88usize];
    ["Offset of field: estimator_innovations_s::mag_field"]
        [::core::mem::offset_of!(estimator_innovations_s, mag_field) - 92usize];
    ["Offset of field: estimator_innovations_s::gravity"]
        [::core::mem::offset_of!(estimator_innovations_s, gravity) - 104usize];
    ["Offset of field: estimator_innovations_s::drag"]
        [::core::mem::offset_of!(estimator_innovations_s, drag) - 116usize];
    ["Offset of field: estimator_innovations_s::airspeed"]
        [::core::mem::offset_of!(estimator_innovations_s, airspeed) - 124usize];
    ["Offset of field: estimator_innovations_s::beta"]
        [::core::mem::offset_of!(estimator_innovations_s, beta) - 128usize];
    ["Offset of field: estimator_innovations_s::hagl"]
        [::core::mem::offset_of!(estimator_innovations_s, hagl) - 132usize];
    ["Offset of field: estimator_innovations_s::hagl_rate"]
        [::core::mem::offset_of!(estimator_innovations_s, hagl_rate) - 136usize];
    ["Offset of field: estimator_innovations_s::_padding0"]
        [::core::mem::offset_of!(estimator_innovations_s, _padding0) - 140usize];
};
unsafe extern "C" {
    pub static __orb_estimator_innovations: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_innovation_variances: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_innovation_test_ratios: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_combined_s {
    pub timestamp: u64,
    pub gyro_rad: [f32; 3usize],
    pub gyro_integral_dt: u32,
    pub accelerometer_timestamp_relative: i32,
    pub accelerometer_m_s2: [f32; 3usize],
    pub accelerometer_integral_dt: u32,
    pub accelerometer_clipping: u8,
    pub gyro_clipping: u8,
    pub accel_calibration_count: u8,
    pub gyro_calibration_count: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_combined_s"][::core::mem::size_of::<sensor_combined_s>() - 48usize];
    ["Alignment of sensor_combined_s"][::core::mem::align_of::<sensor_combined_s>() - 8usize];
    ["Offset of field: sensor_combined_s::timestamp"]
        [::core::mem::offset_of!(sensor_combined_s, timestamp) - 0usize];
    ["Offset of field: sensor_combined_s::gyro_rad"]
        [::core::mem::offset_of!(sensor_combined_s, gyro_rad) - 8usize];
    ["Offset of field: sensor_combined_s::gyro_integral_dt"]
        [::core::mem::offset_of!(sensor_combined_s, gyro_integral_dt) - 20usize];
    ["Offset of field: sensor_combined_s::accelerometer_timestamp_relative"]
        [::core::mem::offset_of!(sensor_combined_s, accelerometer_timestamp_relative) - 24usize];
    ["Offset of field: sensor_combined_s::accelerometer_m_s2"]
        [::core::mem::offset_of!(sensor_combined_s, accelerometer_m_s2) - 28usize];
    ["Offset of field: sensor_combined_s::accelerometer_integral_dt"]
        [::core::mem::offset_of!(sensor_combined_s, accelerometer_integral_dt) - 40usize];
    ["Offset of field: sensor_combined_s::accelerometer_clipping"]
        [::core::mem::offset_of!(sensor_combined_s, accelerometer_clipping) - 44usize];
    ["Offset of field: sensor_combined_s::gyro_clipping"]
        [::core::mem::offset_of!(sensor_combined_s, gyro_clipping) - 45usize];
    ["Offset of field: sensor_combined_s::accel_calibration_count"]
        [::core::mem::offset_of!(sensor_combined_s, accel_calibration_count) - 46usize];
    ["Offset of field: sensor_combined_s::gyro_calibration_count"]
        [::core::mem::offset_of!(sensor_combined_s, gyro_calibration_count) - 47usize];
};
unsafe extern "C" {
    pub static __orb_sensor_combined: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct led_control_s {
    pub timestamp: u64,
    pub led_mask: u8,
    pub color: u8,
    pub mode: u8,
    pub num_blinks: u8,
    pub priority: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of led_control_s"][::core::mem::size_of::<led_control_s>() - 16usize];
    ["Alignment of led_control_s"][::core::mem::align_of::<led_control_s>() - 8usize];
    ["Offset of field: led_control_s::timestamp"]
        [::core::mem::offset_of!(led_control_s, timestamp) - 0usize];
    ["Offset of field: led_control_s::led_mask"]
        [::core::mem::offset_of!(led_control_s, led_mask) - 8usize];
    ["Offset of field: led_control_s::color"]
        [::core::mem::offset_of!(led_control_s, color) - 9usize];
    ["Offset of field: led_control_s::mode"]
        [::core::mem::offset_of!(led_control_s, mode) - 10usize];
    ["Offset of field: led_control_s::num_blinks"]
        [::core::mem::offset_of!(led_control_s, num_blinks) - 11usize];
    ["Offset of field: led_control_s::priority"]
        [::core::mem::offset_of!(led_control_s, priority) - 12usize];
    ["Offset of field: led_control_s::_padding0"]
        [::core::mem::offset_of!(led_control_s, _padding0) - 13usize];
};
unsafe extern "C" {
    pub static __orb_led_control: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct message_format_response_s {
    pub timestamp: u64,
    pub message_hash: u32,
    pub protocol_version: u16,
    pub topic_name: [::core::ffi::c_char; 50usize],
    pub success: bool,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of message_format_response_s"]
        [::core::mem::size_of::<message_format_response_s>() - 72usize];
    ["Alignment of message_format_response_s"]
        [::core::mem::align_of::<message_format_response_s>() - 8usize];
    ["Offset of field: message_format_response_s::timestamp"]
        [::core::mem::offset_of!(message_format_response_s, timestamp) - 0usize];
    ["Offset of field: message_format_response_s::message_hash"]
        [::core::mem::offset_of!(message_format_response_s, message_hash) - 8usize];
    ["Offset of field: message_format_response_s::protocol_version"]
        [::core::mem::offset_of!(message_format_response_s, protocol_version) - 12usize];
    ["Offset of field: message_format_response_s::topic_name"]
        [::core::mem::offset_of!(message_format_response_s, topic_name) - 14usize];
    ["Offset of field: message_format_response_s::success"]
        [::core::mem::offset_of!(message_format_response_s, success) - 64usize];
    ["Offset of field: message_format_response_s::_padding0"]
        [::core::mem::offset_of!(message_format_response_s, _padding0) - 65usize];
};
unsafe extern "C" {
    pub static __orb_message_format_response: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct home_position_s {
    pub timestamp: u64,
    pub lat: f64,
    pub lon: f64,
    pub alt: f32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub yaw: f32,
    pub update_count: u32,
    pub valid_alt: bool,
    pub valid_hpos: bool,
    pub valid_lpos: bool,
    pub manual_home: bool,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of home_position_s"][::core::mem::size_of::<home_position_s>() - 56usize];
    ["Alignment of home_position_s"][::core::mem::align_of::<home_position_s>() - 8usize];
    ["Offset of field: home_position_s::timestamp"]
        [::core::mem::offset_of!(home_position_s, timestamp) - 0usize];
    ["Offset of field: home_position_s::lat"]
        [::core::mem::offset_of!(home_position_s, lat) - 8usize];
    ["Offset of field: home_position_s::lon"]
        [::core::mem::offset_of!(home_position_s, lon) - 16usize];
    ["Offset of field: home_position_s::alt"]
        [::core::mem::offset_of!(home_position_s, alt) - 24usize];
    ["Offset of field: home_position_s::x"][::core::mem::offset_of!(home_position_s, x) - 28usize];
    ["Offset of field: home_position_s::y"][::core::mem::offset_of!(home_position_s, y) - 32usize];
    ["Offset of field: home_position_s::z"][::core::mem::offset_of!(home_position_s, z) - 36usize];
    ["Offset of field: home_position_s::yaw"]
        [::core::mem::offset_of!(home_position_s, yaw) - 40usize];
    ["Offset of field: home_position_s::update_count"]
        [::core::mem::offset_of!(home_position_s, update_count) - 44usize];
    ["Offset of field: home_position_s::valid_alt"]
        [::core::mem::offset_of!(home_position_s, valid_alt) - 48usize];
    ["Offset of field: home_position_s::valid_hpos"]
        [::core::mem::offset_of!(home_position_s, valid_hpos) - 49usize];
    ["Offset of field: home_position_s::valid_lpos"]
        [::core::mem::offset_of!(home_position_s, valid_lpos) - 50usize];
    ["Offset of field: home_position_s::manual_home"]
        [::core::mem::offset_of!(home_position_s, manual_home) - 51usize];
    ["Offset of field: home_position_s::_padding0"]
        [::core::mem::offset_of!(home_position_s, _padding0) - 52usize];
};
unsafe extern "C" {
    pub static __orb_home_position: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtl_status_s {
    pub timestamp: u64,
    pub safe_points_id: u32,
    pub is_evaluation_pending: bool,
    pub has_vtol_approach: bool,
    pub rtl_type: u8,
    pub safe_point_index: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rtl_status_s"][::core::mem::size_of::<rtl_status_s>() - 16usize];
    ["Alignment of rtl_status_s"][::core::mem::align_of::<rtl_status_s>() - 8usize];
    ["Offset of field: rtl_status_s::timestamp"]
        [::core::mem::offset_of!(rtl_status_s, timestamp) - 0usize];
    ["Offset of field: rtl_status_s::safe_points_id"]
        [::core::mem::offset_of!(rtl_status_s, safe_points_id) - 8usize];
    ["Offset of field: rtl_status_s::is_evaluation_pending"]
        [::core::mem::offset_of!(rtl_status_s, is_evaluation_pending) - 12usize];
    ["Offset of field: rtl_status_s::has_vtol_approach"]
        [::core::mem::offset_of!(rtl_status_s, has_vtol_approach) - 13usize];
    ["Offset of field: rtl_status_s::rtl_type"]
        [::core::mem::offset_of!(rtl_status_s, rtl_type) - 14usize];
    ["Offset of field: rtl_status_s::safe_point_index"]
        [::core::mem::offset_of!(rtl_status_s, safe_point_index) - 15usize];
};
unsafe extern "C" {
    pub static __orb_rtl_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_roi_s {
    pub timestamp: u64,
    pub lat: f64,
    pub lon: f64,
    pub alt: f32,
    pub roll_offset: f32,
    pub pitch_offset: f32,
    pub yaw_offset: f32,
    pub mode: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_roi_s"][::core::mem::size_of::<vehicle_roi_s>() - 48usize];
    ["Alignment of vehicle_roi_s"][::core::mem::align_of::<vehicle_roi_s>() - 8usize];
    ["Offset of field: vehicle_roi_s::timestamp"]
        [::core::mem::offset_of!(vehicle_roi_s, timestamp) - 0usize];
    ["Offset of field: vehicle_roi_s::lat"][::core::mem::offset_of!(vehicle_roi_s, lat) - 8usize];
    ["Offset of field: vehicle_roi_s::lon"][::core::mem::offset_of!(vehicle_roi_s, lon) - 16usize];
    ["Offset of field: vehicle_roi_s::alt"][::core::mem::offset_of!(vehicle_roi_s, alt) - 24usize];
    ["Offset of field: vehicle_roi_s::roll_offset"]
        [::core::mem::offset_of!(vehicle_roi_s, roll_offset) - 28usize];
    ["Offset of field: vehicle_roi_s::pitch_offset"]
        [::core::mem::offset_of!(vehicle_roi_s, pitch_offset) - 32usize];
    ["Offset of field: vehicle_roi_s::yaw_offset"]
        [::core::mem::offset_of!(vehicle_roi_s, yaw_offset) - 36usize];
    ["Offset of field: vehicle_roi_s::mode"]
        [::core::mem::offset_of!(vehicle_roi_s, mode) - 40usize];
    ["Offset of field: vehicle_roi_s::_padding0"]
        [::core::mem::offset_of!(vehicle_roi_s, _padding0) - 41usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_roi: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct navigator_status_s {
    pub timestamp: u64,
    pub nav_state: u8,
    pub failure: u8,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of navigator_status_s"][::core::mem::size_of::<navigator_status_s>() - 16usize];
    ["Alignment of navigator_status_s"][::core::mem::align_of::<navigator_status_s>() - 8usize];
    ["Offset of field: navigator_status_s::timestamp"]
        [::core::mem::offset_of!(navigator_status_s, timestamp) - 0usize];
    ["Offset of field: navigator_status_s::nav_state"]
        [::core::mem::offset_of!(navigator_status_s, nav_state) - 8usize];
    ["Offset of field: navigator_status_s::failure"]
        [::core::mem::offset_of!(navigator_status_s, failure) - 9usize];
    ["Offset of field: navigator_status_s::_padding0"]
        [::core::mem::offset_of!(navigator_status_s, _padding0) - 10usize];
};
unsafe extern "C" {
    pub static __orb_navigator_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trajectory_setpoint_s {
    pub timestamp: u64,
    pub position: [f32; 3usize],
    pub velocity: [f32; 3usize],
    pub acceleration: [f32; 3usize],
    pub jerk: [f32; 3usize],
    pub yaw: f32,
    pub yawspeed: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of trajectory_setpoint_s"][::core::mem::size_of::<trajectory_setpoint_s>() - 64usize];
    ["Alignment of trajectory_setpoint_s"]
        [::core::mem::align_of::<trajectory_setpoint_s>() - 8usize];
    ["Offset of field: trajectory_setpoint_s::timestamp"]
        [::core::mem::offset_of!(trajectory_setpoint_s, timestamp) - 0usize];
    ["Offset of field: trajectory_setpoint_s::position"]
        [::core::mem::offset_of!(trajectory_setpoint_s, position) - 8usize];
    ["Offset of field: trajectory_setpoint_s::velocity"]
        [::core::mem::offset_of!(trajectory_setpoint_s, velocity) - 20usize];
    ["Offset of field: trajectory_setpoint_s::acceleration"]
        [::core::mem::offset_of!(trajectory_setpoint_s, acceleration) - 32usize];
    ["Offset of field: trajectory_setpoint_s::jerk"]
        [::core::mem::offset_of!(trajectory_setpoint_s, jerk) - 44usize];
    ["Offset of field: trajectory_setpoint_s::yaw"]
        [::core::mem::offset_of!(trajectory_setpoint_s, yaw) - 56usize];
    ["Offset of field: trajectory_setpoint_s::yawspeed"]
        [::core::mem::offset_of!(trajectory_setpoint_s, yawspeed) - 60usize];
};
unsafe extern "C" {
    pub static __orb_trajectory_setpoint: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uavcan_parameter_request_s {
    pub timestamp: u64,
    pub int_value: i64,
    pub real_value: f32,
    pub param_index: i16,
    pub message_type: u8,
    pub node_id: u8,
    pub param_id: [::core::ffi::c_char; 17usize],
    pub param_type: u8,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uavcan_parameter_request_s"]
        [::core::mem::size_of::<uavcan_parameter_request_s>() - 48usize];
    ["Alignment of uavcan_parameter_request_s"]
        [::core::mem::align_of::<uavcan_parameter_request_s>() - 8usize];
    ["Offset of field: uavcan_parameter_request_s::timestamp"]
        [::core::mem::offset_of!(uavcan_parameter_request_s, timestamp) - 0usize];
    ["Offset of field: uavcan_parameter_request_s::int_value"]
        [::core::mem::offset_of!(uavcan_parameter_request_s, int_value) - 8usize];
    ["Offset of field: uavcan_parameter_request_s::real_value"]
        [::core::mem::offset_of!(uavcan_parameter_request_s, real_value) - 16usize];
    ["Offset of field: uavcan_parameter_request_s::param_index"]
        [::core::mem::offset_of!(uavcan_parameter_request_s, param_index) - 20usize];
    ["Offset of field: uavcan_parameter_request_s::message_type"]
        [::core::mem::offset_of!(uavcan_parameter_request_s, message_type) - 22usize];
    ["Offset of field: uavcan_parameter_request_s::node_id"]
        [::core::mem::offset_of!(uavcan_parameter_request_s, node_id) - 23usize];
    ["Offset of field: uavcan_parameter_request_s::param_id"]
        [::core::mem::offset_of!(uavcan_parameter_request_s, param_id) - 24usize];
    ["Offset of field: uavcan_parameter_request_s::param_type"]
        [::core::mem::offset_of!(uavcan_parameter_request_s, param_type) - 41usize];
    ["Offset of field: uavcan_parameter_request_s::_padding0"]
        [::core::mem::offset_of!(uavcan_parameter_request_s, _padding0) - 42usize];
};
unsafe extern "C" {
    pub static __orb_uavcan_parameter_request: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct landing_target_pose_s {
    pub timestamp: u64,
    pub x_rel: f32,
    pub y_rel: f32,
    pub z_rel: f32,
    pub vx_rel: f32,
    pub vy_rel: f32,
    pub cov_x_rel: f32,
    pub cov_y_rel: f32,
    pub cov_vx_rel: f32,
    pub cov_vy_rel: f32,
    pub x_abs: f32,
    pub y_abs: f32,
    pub z_abs: f32,
    pub is_static: bool,
    pub rel_pos_valid: bool,
    pub rel_vel_valid: bool,
    pub abs_pos_valid: bool,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of landing_target_pose_s"][::core::mem::size_of::<landing_target_pose_s>() - 64usize];
    ["Alignment of landing_target_pose_s"]
        [::core::mem::align_of::<landing_target_pose_s>() - 8usize];
    ["Offset of field: landing_target_pose_s::timestamp"]
        [::core::mem::offset_of!(landing_target_pose_s, timestamp) - 0usize];
    ["Offset of field: landing_target_pose_s::x_rel"]
        [::core::mem::offset_of!(landing_target_pose_s, x_rel) - 8usize];
    ["Offset of field: landing_target_pose_s::y_rel"]
        [::core::mem::offset_of!(landing_target_pose_s, y_rel) - 12usize];
    ["Offset of field: landing_target_pose_s::z_rel"]
        [::core::mem::offset_of!(landing_target_pose_s, z_rel) - 16usize];
    ["Offset of field: landing_target_pose_s::vx_rel"]
        [::core::mem::offset_of!(landing_target_pose_s, vx_rel) - 20usize];
    ["Offset of field: landing_target_pose_s::vy_rel"]
        [::core::mem::offset_of!(landing_target_pose_s, vy_rel) - 24usize];
    ["Offset of field: landing_target_pose_s::cov_x_rel"]
        [::core::mem::offset_of!(landing_target_pose_s, cov_x_rel) - 28usize];
    ["Offset of field: landing_target_pose_s::cov_y_rel"]
        [::core::mem::offset_of!(landing_target_pose_s, cov_y_rel) - 32usize];
    ["Offset of field: landing_target_pose_s::cov_vx_rel"]
        [::core::mem::offset_of!(landing_target_pose_s, cov_vx_rel) - 36usize];
    ["Offset of field: landing_target_pose_s::cov_vy_rel"]
        [::core::mem::offset_of!(landing_target_pose_s, cov_vy_rel) - 40usize];
    ["Offset of field: landing_target_pose_s::x_abs"]
        [::core::mem::offset_of!(landing_target_pose_s, x_abs) - 44usize];
    ["Offset of field: landing_target_pose_s::y_abs"]
        [::core::mem::offset_of!(landing_target_pose_s, y_abs) - 48usize];
    ["Offset of field: landing_target_pose_s::z_abs"]
        [::core::mem::offset_of!(landing_target_pose_s, z_abs) - 52usize];
    ["Offset of field: landing_target_pose_s::is_static"]
        [::core::mem::offset_of!(landing_target_pose_s, is_static) - 56usize];
    ["Offset of field: landing_target_pose_s::rel_pos_valid"]
        [::core::mem::offset_of!(landing_target_pose_s, rel_pos_valid) - 57usize];
    ["Offset of field: landing_target_pose_s::rel_vel_valid"]
        [::core::mem::offset_of!(landing_target_pose_s, rel_vel_valid) - 58usize];
    ["Offset of field: landing_target_pose_s::abs_pos_valid"]
        [::core::mem::offset_of!(landing_target_pose_s, abs_pos_valid) - 59usize];
    ["Offset of field: landing_target_pose_s::_padding0"]
        [::core::mem::offset_of!(landing_target_pose_s, _padding0) - 60usize];
};
unsafe extern "C" {
    pub static __orb_landing_target_pose: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_airflow_s {
    pub timestamp: u64,
    pub device_id: u32,
    pub speed: f32,
    pub direction: f32,
    pub status: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_airflow_s"][::core::mem::size_of::<sensor_airflow_s>() - 24usize];
    ["Alignment of sensor_airflow_s"][::core::mem::align_of::<sensor_airflow_s>() - 8usize];
    ["Offset of field: sensor_airflow_s::timestamp"]
        [::core::mem::offset_of!(sensor_airflow_s, timestamp) - 0usize];
    ["Offset of field: sensor_airflow_s::device_id"]
        [::core::mem::offset_of!(sensor_airflow_s, device_id) - 8usize];
    ["Offset of field: sensor_airflow_s::speed"]
        [::core::mem::offset_of!(sensor_airflow_s, speed) - 12usize];
    ["Offset of field: sensor_airflow_s::direction"]
        [::core::mem::offset_of!(sensor_airflow_s, direction) - 16usize];
    ["Offset of field: sensor_airflow_s::status"]
        [::core::mem::offset_of!(sensor_airflow_s, status) - 20usize];
    ["Offset of field: sensor_airflow_s::_padding0"]
        [::core::mem::offset_of!(sensor_airflow_s, _padding0) - 21usize];
};
unsafe extern "C" {
    pub static __orb_sensor_airflow: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ulog_stream_ack_s {
    pub timestamp: u64,
    pub msg_sequence: u16,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ulog_stream_ack_s"][::core::mem::size_of::<ulog_stream_ack_s>() - 16usize];
    ["Alignment of ulog_stream_ack_s"][::core::mem::align_of::<ulog_stream_ack_s>() - 8usize];
    ["Offset of field: ulog_stream_ack_s::timestamp"]
        [::core::mem::offset_of!(ulog_stream_ack_s, timestamp) - 0usize];
    ["Offset of field: ulog_stream_ack_s::msg_sequence"]
        [::core::mem::offset_of!(ulog_stream_ack_s, msg_sequence) - 8usize];
    ["Offset of field: ulog_stream_ack_s::_padding0"]
        [::core::mem::offset_of!(ulog_stream_ack_s, _padding0) - 10usize];
};
unsafe extern "C" {
    pub static __orb_ulog_stream_ack: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct takeoff_status_s {
    pub timestamp: u64,
    pub tilt_limit: f32,
    pub takeoff_state: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of takeoff_status_s"][::core::mem::size_of::<takeoff_status_s>() - 16usize];
    ["Alignment of takeoff_status_s"][::core::mem::align_of::<takeoff_status_s>() - 8usize];
    ["Offset of field: takeoff_status_s::timestamp"]
        [::core::mem::offset_of!(takeoff_status_s, timestamp) - 0usize];
    ["Offset of field: takeoff_status_s::tilt_limit"]
        [::core::mem::offset_of!(takeoff_status_s, tilt_limit) - 8usize];
    ["Offset of field: takeoff_status_s::takeoff_state"]
        [::core::mem::offset_of!(takeoff_status_s, takeoff_state) - 12usize];
    ["Offset of field: takeoff_status_s::_padding0"]
        [::core::mem::offset_of!(takeoff_status_s, _padding0) - 13usize];
};
unsafe extern "C" {
    pub static __orb_takeoff_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parameter_set_value_response_s {
    pub timestamp: u64,
    pub request_timestamp: u64,
    pub parameter_index: u16,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of parameter_set_value_response_s"]
        [::core::mem::size_of::<parameter_set_value_response_s>() - 24usize];
    ["Alignment of parameter_set_value_response_s"]
        [::core::mem::align_of::<parameter_set_value_response_s>() - 8usize];
    ["Offset of field: parameter_set_value_response_s::timestamp"]
        [::core::mem::offset_of!(parameter_set_value_response_s, timestamp) - 0usize];
    ["Offset of field: parameter_set_value_response_s::request_timestamp"]
        [::core::mem::offset_of!(parameter_set_value_response_s, request_timestamp) - 8usize];
    ["Offset of field: parameter_set_value_response_s::parameter_index"]
        [::core::mem::offset_of!(parameter_set_value_response_s, parameter_index) - 16usize];
    ["Offset of field: parameter_set_value_response_s::_padding0"]
        [::core::mem::offset_of!(parameter_set_value_response_s, _padding0) - 18usize];
};
unsafe extern "C" {
    pub static __orb_parameter_set_value_response: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_parameter_remote_set_value_response: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_parameter_primary_set_value_response: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct power_button_state_s {
    pub timestamp: u64,
    pub event: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of power_button_state_s"][::core::mem::size_of::<power_button_state_s>() - 16usize];
    ["Alignment of power_button_state_s"][::core::mem::align_of::<power_button_state_s>() - 8usize];
    ["Offset of field: power_button_state_s::timestamp"]
        [::core::mem::offset_of!(power_button_state_s, timestamp) - 0usize];
    ["Offset of field: power_button_state_s::event"]
        [::core::mem::offset_of!(power_button_state_s, event) - 8usize];
    ["Offset of field: power_button_state_s::_padding0"]
        [::core::mem::offset_of!(power_button_state_s, _padding0) - 9usize];
};
unsafe extern "C" {
    pub static __orb_power_button_state: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vtol_vehicle_status_s {
    pub timestamp: u64,
    pub vehicle_vtol_state: u8,
    pub fixed_wing_system_failure: bool,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vtol_vehicle_status_s"][::core::mem::size_of::<vtol_vehicle_status_s>() - 16usize];
    ["Alignment of vtol_vehicle_status_s"]
        [::core::mem::align_of::<vtol_vehicle_status_s>() - 8usize];
    ["Offset of field: vtol_vehicle_status_s::timestamp"]
        [::core::mem::offset_of!(vtol_vehicle_status_s, timestamp) - 0usize];
    ["Offset of field: vtol_vehicle_status_s::vehicle_vtol_state"]
        [::core::mem::offset_of!(vtol_vehicle_status_s, vehicle_vtol_state) - 8usize];
    ["Offset of field: vtol_vehicle_status_s::fixed_wing_system_failure"]
        [::core::mem::offset_of!(vtol_vehicle_status_s, fixed_wing_system_failure) - 9usize];
    ["Offset of field: vtol_vehicle_status_s::_padding0"]
        [::core::mem::offset_of!(vtol_vehicle_status_s, _padding0) - 10usize];
};
unsafe extern "C" {
    pub static __orb_vtol_vehicle_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rover_steering_setpoint_s {
    pub timestamp: u64,
    pub normalized_steering_angle: f32,
    pub normalized_speed_diff: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rover_steering_setpoint_s"]
        [::core::mem::size_of::<rover_steering_setpoint_s>() - 16usize];
    ["Alignment of rover_steering_setpoint_s"]
        [::core::mem::align_of::<rover_steering_setpoint_s>() - 8usize];
    ["Offset of field: rover_steering_setpoint_s::timestamp"]
        [::core::mem::offset_of!(rover_steering_setpoint_s, timestamp) - 0usize];
    ["Offset of field: rover_steering_setpoint_s::normalized_steering_angle"]
        [::core::mem::offset_of!(rover_steering_setpoint_s, normalized_steering_angle) - 8usize];
    ["Offset of field: rover_steering_setpoint_s::normalized_speed_diff"]
        [::core::mem::offset_of!(rover_steering_setpoint_s, normalized_speed_diff) - 12usize];
};
unsafe extern "C" {
    pub static __orb_rover_steering_setpoint: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_optical_flow_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub device_id: u32,
    pub pixel_flow: [f32; 2usize],
    pub delta_angle: [f32; 3usize],
    pub distance_m: f32,
    pub integration_timespan_us: u32,
    pub max_flow_rate: f32,
    pub min_ground_distance: f32,
    pub max_ground_distance: f32,
    pub quality: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_optical_flow_s"][::core::mem::size_of::<vehicle_optical_flow_s>() - 64usize];
    ["Alignment of vehicle_optical_flow_s"]
        [::core::mem::align_of::<vehicle_optical_flow_s>() - 8usize];
    ["Offset of field: vehicle_optical_flow_s::timestamp"]
        [::core::mem::offset_of!(vehicle_optical_flow_s, timestamp) - 0usize];
    ["Offset of field: vehicle_optical_flow_s::timestamp_sample"]
        [::core::mem::offset_of!(vehicle_optical_flow_s, timestamp_sample) - 8usize];
    ["Offset of field: vehicle_optical_flow_s::device_id"]
        [::core::mem::offset_of!(vehicle_optical_flow_s, device_id) - 16usize];
    ["Offset of field: vehicle_optical_flow_s::pixel_flow"]
        [::core::mem::offset_of!(vehicle_optical_flow_s, pixel_flow) - 20usize];
    ["Offset of field: vehicle_optical_flow_s::delta_angle"]
        [::core::mem::offset_of!(vehicle_optical_flow_s, delta_angle) - 28usize];
    ["Offset of field: vehicle_optical_flow_s::distance_m"]
        [::core::mem::offset_of!(vehicle_optical_flow_s, distance_m) - 40usize];
    ["Offset of field: vehicle_optical_flow_s::integration_timespan_us"]
        [::core::mem::offset_of!(vehicle_optical_flow_s, integration_timespan_us) - 44usize];
    ["Offset of field: vehicle_optical_flow_s::max_flow_rate"]
        [::core::mem::offset_of!(vehicle_optical_flow_s, max_flow_rate) - 48usize];
    ["Offset of field: vehicle_optical_flow_s::min_ground_distance"]
        [::core::mem::offset_of!(vehicle_optical_flow_s, min_ground_distance) - 52usize];
    ["Offset of field: vehicle_optical_flow_s::max_ground_distance"]
        [::core::mem::offset_of!(vehicle_optical_flow_s, max_ground_distance) - 56usize];
    ["Offset of field: vehicle_optical_flow_s::quality"]
        [::core::mem::offset_of!(vehicle_optical_flow_s, quality) - 60usize];
    ["Offset of field: vehicle_optical_flow_s::_padding0"]
        [::core::mem::offset_of!(vehicle_optical_flow_s, _padding0) - 61usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_optical_flow: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qshell_req_s {
    pub timestamp: u64,
    pub strlen: u32,
    pub request_sequence: u32,
    pub cmd: [::core::ffi::c_char; 100usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qshell_req_s"][::core::mem::size_of::<qshell_req_s>() - 120usize];
    ["Alignment of qshell_req_s"][::core::mem::align_of::<qshell_req_s>() - 8usize];
    ["Offset of field: qshell_req_s::timestamp"]
        [::core::mem::offset_of!(qshell_req_s, timestamp) - 0usize];
    ["Offset of field: qshell_req_s::strlen"]
        [::core::mem::offset_of!(qshell_req_s, strlen) - 8usize];
    ["Offset of field: qshell_req_s::request_sequence"]
        [::core::mem::offset_of!(qshell_req_s, request_sequence) - 12usize];
    ["Offset of field: qshell_req_s::cmd"][::core::mem::offset_of!(qshell_req_s, cmd) - 16usize];
    ["Offset of field: qshell_req_s::_padding0"]
        [::core::mem::offset_of!(qshell_req_s, _padding0) - 116usize];
};
unsafe extern "C" {
    pub static __orb_qshell_req: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct position_setpoint_s {
    pub timestamp: u64,
    pub lat: f64,
    pub lon: f64,
    pub vx: f32,
    pub vy: f32,
    pub vz: f32,
    pub alt: f32,
    pub yaw: f32,
    pub loiter_radius: f32,
    pub loiter_minor_radius: f32,
    pub loiter_orientation: f32,
    pub acceptance_radius: f32,
    pub alt_acceptance_radius: f32,
    pub cruising_speed: f32,
    pub cruising_throttle: f32,
    pub valid: bool,
    pub type_: u8,
    pub loiter_direction_counter_clockwise: bool,
    pub loiter_pattern: u8,
    pub gliding_enabled: bool,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of position_setpoint_s"][::core::mem::size_of::<position_setpoint_s>() - 80usize];
    ["Alignment of position_setpoint_s"][::core::mem::align_of::<position_setpoint_s>() - 8usize];
    ["Offset of field: position_setpoint_s::timestamp"]
        [::core::mem::offset_of!(position_setpoint_s, timestamp) - 0usize];
    ["Offset of field: position_setpoint_s::lat"]
        [::core::mem::offset_of!(position_setpoint_s, lat) - 8usize];
    ["Offset of field: position_setpoint_s::lon"]
        [::core::mem::offset_of!(position_setpoint_s, lon) - 16usize];
    ["Offset of field: position_setpoint_s::vx"]
        [::core::mem::offset_of!(position_setpoint_s, vx) - 24usize];
    ["Offset of field: position_setpoint_s::vy"]
        [::core::mem::offset_of!(position_setpoint_s, vy) - 28usize];
    ["Offset of field: position_setpoint_s::vz"]
        [::core::mem::offset_of!(position_setpoint_s, vz) - 32usize];
    ["Offset of field: position_setpoint_s::alt"]
        [::core::mem::offset_of!(position_setpoint_s, alt) - 36usize];
    ["Offset of field: position_setpoint_s::yaw"]
        [::core::mem::offset_of!(position_setpoint_s, yaw) - 40usize];
    ["Offset of field: position_setpoint_s::loiter_radius"]
        [::core::mem::offset_of!(position_setpoint_s, loiter_radius) - 44usize];
    ["Offset of field: position_setpoint_s::loiter_minor_radius"]
        [::core::mem::offset_of!(position_setpoint_s, loiter_minor_radius) - 48usize];
    ["Offset of field: position_setpoint_s::loiter_orientation"]
        [::core::mem::offset_of!(position_setpoint_s, loiter_orientation) - 52usize];
    ["Offset of field: position_setpoint_s::acceptance_radius"]
        [::core::mem::offset_of!(position_setpoint_s, acceptance_radius) - 56usize];
    ["Offset of field: position_setpoint_s::alt_acceptance_radius"]
        [::core::mem::offset_of!(position_setpoint_s, alt_acceptance_radius) - 60usize];
    ["Offset of field: position_setpoint_s::cruising_speed"]
        [::core::mem::offset_of!(position_setpoint_s, cruising_speed) - 64usize];
    ["Offset of field: position_setpoint_s::cruising_throttle"]
        [::core::mem::offset_of!(position_setpoint_s, cruising_throttle) - 68usize];
    ["Offset of field: position_setpoint_s::valid"]
        [::core::mem::offset_of!(position_setpoint_s, valid) - 72usize];
    ["Offset of field: position_setpoint_s::type_"]
        [::core::mem::offset_of!(position_setpoint_s, type_) - 73usize];
    ["Offset of field: position_setpoint_s::loiter_direction_counter_clockwise"][::core::mem::offset_of!(
        position_setpoint_s,
        loiter_direction_counter_clockwise
    ) - 74usize];
    ["Offset of field: position_setpoint_s::loiter_pattern"]
        [::core::mem::offset_of!(position_setpoint_s, loiter_pattern) - 75usize];
    ["Offset of field: position_setpoint_s::gliding_enabled"]
        [::core::mem::offset_of!(position_setpoint_s, gliding_enabled) - 76usize];
    ["Offset of field: position_setpoint_s::_padding0"]
        [::core::mem::offset_of!(position_setpoint_s, _padding0) - 77usize];
};
unsafe extern "C" {
    pub static __orb_position_setpoint: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct position_setpoint_triplet_s {
    pub timestamp: u64,
    pub previous: position_setpoint_s,
    pub current: position_setpoint_s,
    pub next: position_setpoint_s,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of position_setpoint_triplet_s"]
        [::core::mem::size_of::<position_setpoint_triplet_s>() - 248usize];
    ["Alignment of position_setpoint_triplet_s"]
        [::core::mem::align_of::<position_setpoint_triplet_s>() - 8usize];
    ["Offset of field: position_setpoint_triplet_s::timestamp"]
        [::core::mem::offset_of!(position_setpoint_triplet_s, timestamp) - 0usize];
    ["Offset of field: position_setpoint_triplet_s::previous"]
        [::core::mem::offset_of!(position_setpoint_triplet_s, previous) - 8usize];
    ["Offset of field: position_setpoint_triplet_s::current"]
        [::core::mem::offset_of!(position_setpoint_triplet_s, current) - 88usize];
    ["Offset of field: position_setpoint_triplet_s::next"]
        [::core::mem::offset_of!(position_setpoint_triplet_s, next) - 168usize];
};
unsafe extern "C" {
    pub static __orb_position_setpoint_triplet: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_acceleration_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub xyz: [f32; 3usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_acceleration_s"][::core::mem::size_of::<vehicle_acceleration_s>() - 32usize];
    ["Alignment of vehicle_acceleration_s"]
        [::core::mem::align_of::<vehicle_acceleration_s>() - 8usize];
    ["Offset of field: vehicle_acceleration_s::timestamp"]
        [::core::mem::offset_of!(vehicle_acceleration_s, timestamp) - 0usize];
    ["Offset of field: vehicle_acceleration_s::timestamp_sample"]
        [::core::mem::offset_of!(vehicle_acceleration_s, timestamp_sample) - 8usize];
    ["Offset of field: vehicle_acceleration_s::xyz"]
        [::core::mem::offset_of!(vehicle_acceleration_s, xyz) - 16usize];
    ["Offset of field: vehicle_acceleration_s::_padding0"]
        [::core::mem::offset_of!(vehicle_acceleration_s, _padding0) - 28usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_acceleration: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rover_attitude_status_s {
    pub timestamp: u64,
    pub measured_yaw: f32,
    pub adjusted_yaw_setpoint: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rover_attitude_status_s"]
        [::core::mem::size_of::<rover_attitude_status_s>() - 16usize];
    ["Alignment of rover_attitude_status_s"]
        [::core::mem::align_of::<rover_attitude_status_s>() - 8usize];
    ["Offset of field: rover_attitude_status_s::timestamp"]
        [::core::mem::offset_of!(rover_attitude_status_s, timestamp) - 0usize];
    ["Offset of field: rover_attitude_status_s::measured_yaw"]
        [::core::mem::offset_of!(rover_attitude_status_s, measured_yaw) - 8usize];
    ["Offset of field: rover_attitude_status_s::adjusted_yaw_setpoint"]
        [::core::mem::offset_of!(rover_attitude_status_s, adjusted_yaw_setpoint) - 12usize];
};
unsafe extern "C" {
    pub static __orb_rover_attitude_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct onboard_computer_status_s {
    pub timestamp: u64,
    pub uptime: u32,
    pub ram_usage: u32,
    pub ram_total: u32,
    pub storage_type: [u32; 4usize],
    pub storage_usage: [u32; 4usize],
    pub storage_total: [u32; 4usize],
    pub link_type: [u32; 6usize],
    pub link_tx_rate: [u32; 6usize],
    pub link_rx_rate: [u32; 6usize],
    pub link_tx_max: [u32; 6usize],
    pub link_rx_max: [u32; 6usize],
    pub fan_speed: [i16; 4usize],
    pub type_: u8,
    pub cpu_cores: [u8; 8usize],
    pub cpu_combined: [u8; 10usize],
    pub gpu_cores: [u8; 4usize],
    pub gpu_combined: [u8; 10usize],
    pub temperature_board: i8,
    pub temperature_core: [i8; 8usize],
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of onboard_computer_status_s"]
        [::core::mem::size_of::<onboard_computer_status_s>() - 240usize];
    ["Alignment of onboard_computer_status_s"]
        [::core::mem::align_of::<onboard_computer_status_s>() - 8usize];
    ["Offset of field: onboard_computer_status_s::timestamp"]
        [::core::mem::offset_of!(onboard_computer_status_s, timestamp) - 0usize];
    ["Offset of field: onboard_computer_status_s::uptime"]
        [::core::mem::offset_of!(onboard_computer_status_s, uptime) - 8usize];
    ["Offset of field: onboard_computer_status_s::ram_usage"]
        [::core::mem::offset_of!(onboard_computer_status_s, ram_usage) - 12usize];
    ["Offset of field: onboard_computer_status_s::ram_total"]
        [::core::mem::offset_of!(onboard_computer_status_s, ram_total) - 16usize];
    ["Offset of field: onboard_computer_status_s::storage_type"]
        [::core::mem::offset_of!(onboard_computer_status_s, storage_type) - 20usize];
    ["Offset of field: onboard_computer_status_s::storage_usage"]
        [::core::mem::offset_of!(onboard_computer_status_s, storage_usage) - 36usize];
    ["Offset of field: onboard_computer_status_s::storage_total"]
        [::core::mem::offset_of!(onboard_computer_status_s, storage_total) - 52usize];
    ["Offset of field: onboard_computer_status_s::link_type"]
        [::core::mem::offset_of!(onboard_computer_status_s, link_type) - 68usize];
    ["Offset of field: onboard_computer_status_s::link_tx_rate"]
        [::core::mem::offset_of!(onboard_computer_status_s, link_tx_rate) - 92usize];
    ["Offset of field: onboard_computer_status_s::link_rx_rate"]
        [::core::mem::offset_of!(onboard_computer_status_s, link_rx_rate) - 116usize];
    ["Offset of field: onboard_computer_status_s::link_tx_max"]
        [::core::mem::offset_of!(onboard_computer_status_s, link_tx_max) - 140usize];
    ["Offset of field: onboard_computer_status_s::link_rx_max"]
        [::core::mem::offset_of!(onboard_computer_status_s, link_rx_max) - 164usize];
    ["Offset of field: onboard_computer_status_s::fan_speed"]
        [::core::mem::offset_of!(onboard_computer_status_s, fan_speed) - 188usize];
    ["Offset of field: onboard_computer_status_s::type_"]
        [::core::mem::offset_of!(onboard_computer_status_s, type_) - 196usize];
    ["Offset of field: onboard_computer_status_s::cpu_cores"]
        [::core::mem::offset_of!(onboard_computer_status_s, cpu_cores) - 197usize];
    ["Offset of field: onboard_computer_status_s::cpu_combined"]
        [::core::mem::offset_of!(onboard_computer_status_s, cpu_combined) - 205usize];
    ["Offset of field: onboard_computer_status_s::gpu_cores"]
        [::core::mem::offset_of!(onboard_computer_status_s, gpu_cores) - 215usize];
    ["Offset of field: onboard_computer_status_s::gpu_combined"]
        [::core::mem::offset_of!(onboard_computer_status_s, gpu_combined) - 219usize];
    ["Offset of field: onboard_computer_status_s::temperature_board"]
        [::core::mem::offset_of!(onboard_computer_status_s, temperature_board) - 229usize];
    ["Offset of field: onboard_computer_status_s::temperature_core"]
        [::core::mem::offset_of!(onboard_computer_status_s, temperature_core) - 230usize];
    ["Offset of field: onboard_computer_status_s::_padding0"]
        [::core::mem::offset_of!(onboard_computer_status_s, _padding0) - 238usize];
};
unsafe extern "C" {
    pub static __orb_onboard_computer_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct estimator_gps_status_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub position_drift_rate_horizontal_m_s: f32,
    pub position_drift_rate_vertical_m_s: f32,
    pub filtered_horizontal_speed_m_s: f32,
    pub checks_passed: bool,
    pub check_fail_gps_fix: bool,
    pub check_fail_min_sat_count: bool,
    pub check_fail_max_pdop: bool,
    pub check_fail_max_horz_err: bool,
    pub check_fail_max_vert_err: bool,
    pub check_fail_max_spd_err: bool,
    pub check_fail_max_horz_drift: bool,
    pub check_fail_max_vert_drift: bool,
    pub check_fail_max_horz_spd_err: bool,
    pub check_fail_max_vert_spd_err: bool,
    pub check_fail_spoofed_gps: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of estimator_gps_status_s"][::core::mem::size_of::<estimator_gps_status_s>() - 40usize];
    ["Alignment of estimator_gps_status_s"]
        [::core::mem::align_of::<estimator_gps_status_s>() - 8usize];
    ["Offset of field: estimator_gps_status_s::timestamp"]
        [::core::mem::offset_of!(estimator_gps_status_s, timestamp) - 0usize];
    ["Offset of field: estimator_gps_status_s::timestamp_sample"]
        [::core::mem::offset_of!(estimator_gps_status_s, timestamp_sample) - 8usize];
    ["Offset of field: estimator_gps_status_s::position_drift_rate_horizontal_m_s"][::core::mem::offset_of!(
        estimator_gps_status_s,
        position_drift_rate_horizontal_m_s
    ) - 16usize];
    ["Offset of field: estimator_gps_status_s::position_drift_rate_vertical_m_s"][::core::mem::offset_of!(
        estimator_gps_status_s,
        position_drift_rate_vertical_m_s
    ) - 20usize];
    ["Offset of field: estimator_gps_status_s::filtered_horizontal_speed_m_s"]
        [::core::mem::offset_of!(estimator_gps_status_s, filtered_horizontal_speed_m_s) - 24usize];
    ["Offset of field: estimator_gps_status_s::checks_passed"]
        [::core::mem::offset_of!(estimator_gps_status_s, checks_passed) - 28usize];
    ["Offset of field: estimator_gps_status_s::check_fail_gps_fix"]
        [::core::mem::offset_of!(estimator_gps_status_s, check_fail_gps_fix) - 29usize];
    ["Offset of field: estimator_gps_status_s::check_fail_min_sat_count"]
        [::core::mem::offset_of!(estimator_gps_status_s, check_fail_min_sat_count) - 30usize];
    ["Offset of field: estimator_gps_status_s::check_fail_max_pdop"]
        [::core::mem::offset_of!(estimator_gps_status_s, check_fail_max_pdop) - 31usize];
    ["Offset of field: estimator_gps_status_s::check_fail_max_horz_err"]
        [::core::mem::offset_of!(estimator_gps_status_s, check_fail_max_horz_err) - 32usize];
    ["Offset of field: estimator_gps_status_s::check_fail_max_vert_err"]
        [::core::mem::offset_of!(estimator_gps_status_s, check_fail_max_vert_err) - 33usize];
    ["Offset of field: estimator_gps_status_s::check_fail_max_spd_err"]
        [::core::mem::offset_of!(estimator_gps_status_s, check_fail_max_spd_err) - 34usize];
    ["Offset of field: estimator_gps_status_s::check_fail_max_horz_drift"]
        [::core::mem::offset_of!(estimator_gps_status_s, check_fail_max_horz_drift) - 35usize];
    ["Offset of field: estimator_gps_status_s::check_fail_max_vert_drift"]
        [::core::mem::offset_of!(estimator_gps_status_s, check_fail_max_vert_drift) - 36usize];
    ["Offset of field: estimator_gps_status_s::check_fail_max_horz_spd_err"]
        [::core::mem::offset_of!(estimator_gps_status_s, check_fail_max_horz_spd_err) - 37usize];
    ["Offset of field: estimator_gps_status_s::check_fail_max_vert_spd_err"]
        [::core::mem::offset_of!(estimator_gps_status_s, check_fail_max_vert_spd_err) - 38usize];
    ["Offset of field: estimator_gps_status_s::check_fail_spoofed_gps"]
        [::core::mem::offset_of!(estimator_gps_status_s, check_fail_spoofed_gps) - 39usize];
};
unsafe extern "C" {
    pub static __orb_estimator_gps_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct system_power_s {
    pub timestamp: u64,
    pub voltage5v_v: f32,
    pub voltage_payload_v: f32,
    pub sensors3v3: [f32; 4usize],
    pub sensors3v3_valid: u8,
    pub usb_connected: u8,
    pub brick_valid: u8,
    pub usb_valid: u8,
    pub servo_valid: u8,
    pub periph_5v_oc: u8,
    pub hipower_5v_oc: u8,
    pub comp_5v_valid: u8,
    pub can1_gps1_5v_valid: u8,
    pub payload_v_valid: u8,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of system_power_s"][::core::mem::size_of::<system_power_s>() - 48usize];
    ["Alignment of system_power_s"][::core::mem::align_of::<system_power_s>() - 8usize];
    ["Offset of field: system_power_s::timestamp"]
        [::core::mem::offset_of!(system_power_s, timestamp) - 0usize];
    ["Offset of field: system_power_s::voltage5v_v"]
        [::core::mem::offset_of!(system_power_s, voltage5v_v) - 8usize];
    ["Offset of field: system_power_s::voltage_payload_v"]
        [::core::mem::offset_of!(system_power_s, voltage_payload_v) - 12usize];
    ["Offset of field: system_power_s::sensors3v3"]
        [::core::mem::offset_of!(system_power_s, sensors3v3) - 16usize];
    ["Offset of field: system_power_s::sensors3v3_valid"]
        [::core::mem::offset_of!(system_power_s, sensors3v3_valid) - 32usize];
    ["Offset of field: system_power_s::usb_connected"]
        [::core::mem::offset_of!(system_power_s, usb_connected) - 33usize];
    ["Offset of field: system_power_s::brick_valid"]
        [::core::mem::offset_of!(system_power_s, brick_valid) - 34usize];
    ["Offset of field: system_power_s::usb_valid"]
        [::core::mem::offset_of!(system_power_s, usb_valid) - 35usize];
    ["Offset of field: system_power_s::servo_valid"]
        [::core::mem::offset_of!(system_power_s, servo_valid) - 36usize];
    ["Offset of field: system_power_s::periph_5v_oc"]
        [::core::mem::offset_of!(system_power_s, periph_5v_oc) - 37usize];
    ["Offset of field: system_power_s::hipower_5v_oc"]
        [::core::mem::offset_of!(system_power_s, hipower_5v_oc) - 38usize];
    ["Offset of field: system_power_s::comp_5v_valid"]
        [::core::mem::offset_of!(system_power_s, comp_5v_valid) - 39usize];
    ["Offset of field: system_power_s::can1_gps1_5v_valid"]
        [::core::mem::offset_of!(system_power_s, can1_gps1_5v_valid) - 40usize];
    ["Offset of field: system_power_s::payload_v_valid"]
        [::core::mem::offset_of!(system_power_s, payload_v_valid) - 41usize];
    ["Offset of field: system_power_s::_padding0"]
        [::core::mem::offset_of!(system_power_s, _padding0) - 42usize];
};
unsafe extern "C" {
    pub static __orb_system_power: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct magnetometer_bias_estimate_s {
    pub timestamp: u64,
    pub bias_x: [f32; 4usize],
    pub bias_y: [f32; 4usize],
    pub bias_z: [f32; 4usize],
    pub valid: [bool; 4usize],
    pub stable: [bool; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of magnetometer_bias_estimate_s"]
        [::core::mem::size_of::<magnetometer_bias_estimate_s>() - 64usize];
    ["Alignment of magnetometer_bias_estimate_s"]
        [::core::mem::align_of::<magnetometer_bias_estimate_s>() - 8usize];
    ["Offset of field: magnetometer_bias_estimate_s::timestamp"]
        [::core::mem::offset_of!(magnetometer_bias_estimate_s, timestamp) - 0usize];
    ["Offset of field: magnetometer_bias_estimate_s::bias_x"]
        [::core::mem::offset_of!(magnetometer_bias_estimate_s, bias_x) - 8usize];
    ["Offset of field: magnetometer_bias_estimate_s::bias_y"]
        [::core::mem::offset_of!(magnetometer_bias_estimate_s, bias_y) - 24usize];
    ["Offset of field: magnetometer_bias_estimate_s::bias_z"]
        [::core::mem::offset_of!(magnetometer_bias_estimate_s, bias_z) - 40usize];
    ["Offset of field: magnetometer_bias_estimate_s::valid"]
        [::core::mem::offset_of!(magnetometer_bias_estimate_s, valid) - 56usize];
    ["Offset of field: magnetometer_bias_estimate_s::stable"]
        [::core::mem::offset_of!(magnetometer_bias_estimate_s, stable) - 60usize];
};
unsafe extern "C" {
    pub static __orb_magnetometer_bias_estimate: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gimbal_device_attitude_status_s {
    pub timestamp: u64,
    pub q: [f32; 4usize],
    pub angular_velocity_x: f32,
    pub angular_velocity_y: f32,
    pub angular_velocity_z: f32,
    pub failure_flags: u32,
    pub delta_yaw: f32,
    pub delta_yaw_velocity: f32,
    pub device_flags: u16,
    pub target_system: u8,
    pub target_component: u8,
    pub gimbal_device_id: u8,
    pub received_from_mavlink: bool,
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gimbal_device_attitude_status_s"]
        [::core::mem::size_of::<gimbal_device_attitude_status_s>() - 56usize];
    ["Alignment of gimbal_device_attitude_status_s"]
        [::core::mem::align_of::<gimbal_device_attitude_status_s>() - 8usize];
    ["Offset of field: gimbal_device_attitude_status_s::timestamp"]
        [::core::mem::offset_of!(gimbal_device_attitude_status_s, timestamp) - 0usize];
    ["Offset of field: gimbal_device_attitude_status_s::q"]
        [::core::mem::offset_of!(gimbal_device_attitude_status_s, q) - 8usize];
    ["Offset of field: gimbal_device_attitude_status_s::angular_velocity_x"]
        [::core::mem::offset_of!(gimbal_device_attitude_status_s, angular_velocity_x) - 24usize];
    ["Offset of field: gimbal_device_attitude_status_s::angular_velocity_y"]
        [::core::mem::offset_of!(gimbal_device_attitude_status_s, angular_velocity_y) - 28usize];
    ["Offset of field: gimbal_device_attitude_status_s::angular_velocity_z"]
        [::core::mem::offset_of!(gimbal_device_attitude_status_s, angular_velocity_z) - 32usize];
    ["Offset of field: gimbal_device_attitude_status_s::failure_flags"]
        [::core::mem::offset_of!(gimbal_device_attitude_status_s, failure_flags) - 36usize];
    ["Offset of field: gimbal_device_attitude_status_s::delta_yaw"]
        [::core::mem::offset_of!(gimbal_device_attitude_status_s, delta_yaw) - 40usize];
    ["Offset of field: gimbal_device_attitude_status_s::delta_yaw_velocity"]
        [::core::mem::offset_of!(gimbal_device_attitude_status_s, delta_yaw_velocity) - 44usize];
    ["Offset of field: gimbal_device_attitude_status_s::device_flags"]
        [::core::mem::offset_of!(gimbal_device_attitude_status_s, device_flags) - 48usize];
    ["Offset of field: gimbal_device_attitude_status_s::target_system"]
        [::core::mem::offset_of!(gimbal_device_attitude_status_s, target_system) - 50usize];
    ["Offset of field: gimbal_device_attitude_status_s::target_component"]
        [::core::mem::offset_of!(gimbal_device_attitude_status_s, target_component) - 51usize];
    ["Offset of field: gimbal_device_attitude_status_s::gimbal_device_id"]
        [::core::mem::offset_of!(gimbal_device_attitude_status_s, gimbal_device_id) - 52usize];
    ["Offset of field: gimbal_device_attitude_status_s::received_from_mavlink"]
        [::core::mem::offset_of!(gimbal_device_attitude_status_s, received_from_mavlink) - 53usize];
    ["Offset of field: gimbal_device_attitude_status_s::_padding0"]
        [::core::mem::offset_of!(gimbal_device_attitude_status_s, _padding0) - 54usize];
};
unsafe extern "C" {
    pub static __orb_gimbal_device_attitude_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_gyro_fifo_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub device_id: u32,
    pub dt: f32,
    pub scale: f32,
    pub x: [i16; 32usize],
    pub y: [i16; 32usize],
    pub z: [i16; 32usize],
    pub samples: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_gyro_fifo_s"][::core::mem::size_of::<sensor_gyro_fifo_s>() - 224usize];
    ["Alignment of sensor_gyro_fifo_s"][::core::mem::align_of::<sensor_gyro_fifo_s>() - 8usize];
    ["Offset of field: sensor_gyro_fifo_s::timestamp"]
        [::core::mem::offset_of!(sensor_gyro_fifo_s, timestamp) - 0usize];
    ["Offset of field: sensor_gyro_fifo_s::timestamp_sample"]
        [::core::mem::offset_of!(sensor_gyro_fifo_s, timestamp_sample) - 8usize];
    ["Offset of field: sensor_gyro_fifo_s::device_id"]
        [::core::mem::offset_of!(sensor_gyro_fifo_s, device_id) - 16usize];
    ["Offset of field: sensor_gyro_fifo_s::dt"]
        [::core::mem::offset_of!(sensor_gyro_fifo_s, dt) - 20usize];
    ["Offset of field: sensor_gyro_fifo_s::scale"]
        [::core::mem::offset_of!(sensor_gyro_fifo_s, scale) - 24usize];
    ["Offset of field: sensor_gyro_fifo_s::x"]
        [::core::mem::offset_of!(sensor_gyro_fifo_s, x) - 28usize];
    ["Offset of field: sensor_gyro_fifo_s::y"]
        [::core::mem::offset_of!(sensor_gyro_fifo_s, y) - 92usize];
    ["Offset of field: sensor_gyro_fifo_s::z"]
        [::core::mem::offset_of!(sensor_gyro_fifo_s, z) - 156usize];
    ["Offset of field: sensor_gyro_fifo_s::samples"]
        [::core::mem::offset_of!(sensor_gyro_fifo_s, samples) - 220usize];
    ["Offset of field: sensor_gyro_fifo_s::_padding0"]
        [::core::mem::offset_of!(sensor_gyro_fifo_s, _padding0) - 221usize];
};
unsafe extern "C" {
    pub static __orb_sensor_gyro_fifo: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_command_s {
    pub timestamp: u64,
    pub param5: f64,
    pub param6: f64,
    pub param1: f32,
    pub param2: f32,
    pub param3: f32,
    pub param4: f32,
    pub param7: f32,
    pub command: u32,
    pub source_component: u16,
    pub target_system: u8,
    pub target_component: u8,
    pub source_system: u8,
    pub confirmation: u8,
    pub from_external: bool,
    pub _padding0: [u8; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_command_s"][::core::mem::size_of::<vehicle_command_s>() - 56usize];
    ["Alignment of vehicle_command_s"][::core::mem::align_of::<vehicle_command_s>() - 8usize];
    ["Offset of field: vehicle_command_s::timestamp"]
        [::core::mem::offset_of!(vehicle_command_s, timestamp) - 0usize];
    ["Offset of field: vehicle_command_s::param5"]
        [::core::mem::offset_of!(vehicle_command_s, param5) - 8usize];
    ["Offset of field: vehicle_command_s::param6"]
        [::core::mem::offset_of!(vehicle_command_s, param6) - 16usize];
    ["Offset of field: vehicle_command_s::param1"]
        [::core::mem::offset_of!(vehicle_command_s, param1) - 24usize];
    ["Offset of field: vehicle_command_s::param2"]
        [::core::mem::offset_of!(vehicle_command_s, param2) - 28usize];
    ["Offset of field: vehicle_command_s::param3"]
        [::core::mem::offset_of!(vehicle_command_s, param3) - 32usize];
    ["Offset of field: vehicle_command_s::param4"]
        [::core::mem::offset_of!(vehicle_command_s, param4) - 36usize];
    ["Offset of field: vehicle_command_s::param7"]
        [::core::mem::offset_of!(vehicle_command_s, param7) - 40usize];
    ["Offset of field: vehicle_command_s::command"]
        [::core::mem::offset_of!(vehicle_command_s, command) - 44usize];
    ["Offset of field: vehicle_command_s::source_component"]
        [::core::mem::offset_of!(vehicle_command_s, source_component) - 48usize];
    ["Offset of field: vehicle_command_s::target_system"]
        [::core::mem::offset_of!(vehicle_command_s, target_system) - 50usize];
    ["Offset of field: vehicle_command_s::target_component"]
        [::core::mem::offset_of!(vehicle_command_s, target_component) - 51usize];
    ["Offset of field: vehicle_command_s::source_system"]
        [::core::mem::offset_of!(vehicle_command_s, source_system) - 52usize];
    ["Offset of field: vehicle_command_s::confirmation"]
        [::core::mem::offset_of!(vehicle_command_s, confirmation) - 53usize];
    ["Offset of field: vehicle_command_s::from_external"]
        [::core::mem::offset_of!(vehicle_command_s, from_external) - 54usize];
    ["Offset of field: vehicle_command_s::_padding0"]
        [::core::mem::offset_of!(vehicle_command_s, _padding0) - 55usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_command: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_gimbal_v1_command: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_vehicle_command_mode_executor: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct follow_target_estimator_s {
    pub timestamp: u64,
    pub last_filter_reset_timestamp: u64,
    pub lat_est: f64,
    pub lon_est: f64,
    pub prediction_count: u64,
    pub fusion_count: u64,
    pub alt_est: f32,
    pub pos_est: [f32; 3usize],
    pub vel_est: [f32; 3usize],
    pub acc_est: [f32; 3usize],
    pub valid: bool,
    pub stale: bool,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of follow_target_estimator_s"]
        [::core::mem::size_of::<follow_target_estimator_s>() - 96usize];
    ["Alignment of follow_target_estimator_s"]
        [::core::mem::align_of::<follow_target_estimator_s>() - 8usize];
    ["Offset of field: follow_target_estimator_s::timestamp"]
        [::core::mem::offset_of!(follow_target_estimator_s, timestamp) - 0usize];
    ["Offset of field: follow_target_estimator_s::last_filter_reset_timestamp"]
        [::core::mem::offset_of!(follow_target_estimator_s, last_filter_reset_timestamp) - 8usize];
    ["Offset of field: follow_target_estimator_s::lat_est"]
        [::core::mem::offset_of!(follow_target_estimator_s, lat_est) - 16usize];
    ["Offset of field: follow_target_estimator_s::lon_est"]
        [::core::mem::offset_of!(follow_target_estimator_s, lon_est) - 24usize];
    ["Offset of field: follow_target_estimator_s::prediction_count"]
        [::core::mem::offset_of!(follow_target_estimator_s, prediction_count) - 32usize];
    ["Offset of field: follow_target_estimator_s::fusion_count"]
        [::core::mem::offset_of!(follow_target_estimator_s, fusion_count) - 40usize];
    ["Offset of field: follow_target_estimator_s::alt_est"]
        [::core::mem::offset_of!(follow_target_estimator_s, alt_est) - 48usize];
    ["Offset of field: follow_target_estimator_s::pos_est"]
        [::core::mem::offset_of!(follow_target_estimator_s, pos_est) - 52usize];
    ["Offset of field: follow_target_estimator_s::vel_est"]
        [::core::mem::offset_of!(follow_target_estimator_s, vel_est) - 64usize];
    ["Offset of field: follow_target_estimator_s::acc_est"]
        [::core::mem::offset_of!(follow_target_estimator_s, acc_est) - 76usize];
    ["Offset of field: follow_target_estimator_s::valid"]
        [::core::mem::offset_of!(follow_target_estimator_s, valid) - 88usize];
    ["Offset of field: follow_target_estimator_s::stale"]
        [::core::mem::offset_of!(follow_target_estimator_s, stale) - 89usize];
    ["Offset of field: follow_target_estimator_s::_padding0"]
        [::core::mem::offset_of!(follow_target_estimator_s, _padding0) - 90usize];
};
unsafe extern "C" {
    pub static __orb_follow_target_estimator: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct navigator_mission_item_s {
    pub timestamp: u64,
    pub latitude: f32,
    pub longitude: f32,
    pub time_inside: f32,
    pub acceptance_radius: f32,
    pub loiter_radius: f32,
    pub yaw: f32,
    pub altitude: f32,
    pub sequence_current: u16,
    pub nav_cmd: u16,
    pub frame: u8,
    pub origin: u8,
    pub loiter_exit_xtrack: bool,
    pub force_heading: bool,
    pub altitude_is_relative: bool,
    pub autocontinue: bool,
    pub vtol_back_transition: bool,
    pub _padding0: [u8; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of navigator_mission_item_s"]
        [::core::mem::size_of::<navigator_mission_item_s>() - 48usize];
    ["Alignment of navigator_mission_item_s"]
        [::core::mem::align_of::<navigator_mission_item_s>() - 8usize];
    ["Offset of field: navigator_mission_item_s::timestamp"]
        [::core::mem::offset_of!(navigator_mission_item_s, timestamp) - 0usize];
    ["Offset of field: navigator_mission_item_s::latitude"]
        [::core::mem::offset_of!(navigator_mission_item_s, latitude) - 8usize];
    ["Offset of field: navigator_mission_item_s::longitude"]
        [::core::mem::offset_of!(navigator_mission_item_s, longitude) - 12usize];
    ["Offset of field: navigator_mission_item_s::time_inside"]
        [::core::mem::offset_of!(navigator_mission_item_s, time_inside) - 16usize];
    ["Offset of field: navigator_mission_item_s::acceptance_radius"]
        [::core::mem::offset_of!(navigator_mission_item_s, acceptance_radius) - 20usize];
    ["Offset of field: navigator_mission_item_s::loiter_radius"]
        [::core::mem::offset_of!(navigator_mission_item_s, loiter_radius) - 24usize];
    ["Offset of field: navigator_mission_item_s::yaw"]
        [::core::mem::offset_of!(navigator_mission_item_s, yaw) - 28usize];
    ["Offset of field: navigator_mission_item_s::altitude"]
        [::core::mem::offset_of!(navigator_mission_item_s, altitude) - 32usize];
    ["Offset of field: navigator_mission_item_s::sequence_current"]
        [::core::mem::offset_of!(navigator_mission_item_s, sequence_current) - 36usize];
    ["Offset of field: navigator_mission_item_s::nav_cmd"]
        [::core::mem::offset_of!(navigator_mission_item_s, nav_cmd) - 38usize];
    ["Offset of field: navigator_mission_item_s::frame"]
        [::core::mem::offset_of!(navigator_mission_item_s, frame) - 40usize];
    ["Offset of field: navigator_mission_item_s::origin"]
        [::core::mem::offset_of!(navigator_mission_item_s, origin) - 41usize];
    ["Offset of field: navigator_mission_item_s::loiter_exit_xtrack"]
        [::core::mem::offset_of!(navigator_mission_item_s, loiter_exit_xtrack) - 42usize];
    ["Offset of field: navigator_mission_item_s::force_heading"]
        [::core::mem::offset_of!(navigator_mission_item_s, force_heading) - 43usize];
    ["Offset of field: navigator_mission_item_s::altitude_is_relative"]
        [::core::mem::offset_of!(navigator_mission_item_s, altitude_is_relative) - 44usize];
    ["Offset of field: navigator_mission_item_s::autocontinue"]
        [::core::mem::offset_of!(navigator_mission_item_s, autocontinue) - 45usize];
    ["Offset of field: navigator_mission_item_s::vtol_back_transition"]
        [::core::mem::offset_of!(navigator_mission_item_s, vtol_back_transition) - 46usize];
    ["Offset of field: navigator_mission_item_s::_padding0"]
        [::core::mem::offset_of!(navigator_mission_item_s, _padding0) - 47usize];
};
unsafe extern "C" {
    pub static __orb_navigator_mission_item: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_imu_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub accel_device_id: u32,
    pub gyro_device_id: u32,
    pub delta_angle: [f32; 3usize],
    pub delta_velocity: [f32; 3usize],
    pub delta_angle_dt: u32,
    pub delta_velocity_dt: u32,
    pub delta_angle_clipping: u8,
    pub delta_velocity_clipping: u8,
    pub accel_calibration_count: u8,
    pub gyro_calibration_count: u8,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_imu_s"][::core::mem::size_of::<vehicle_imu_s>() - 64usize];
    ["Alignment of vehicle_imu_s"][::core::mem::align_of::<vehicle_imu_s>() - 8usize];
    ["Offset of field: vehicle_imu_s::timestamp"]
        [::core::mem::offset_of!(vehicle_imu_s, timestamp) - 0usize];
    ["Offset of field: vehicle_imu_s::timestamp_sample"]
        [::core::mem::offset_of!(vehicle_imu_s, timestamp_sample) - 8usize];
    ["Offset of field: vehicle_imu_s::accel_device_id"]
        [::core::mem::offset_of!(vehicle_imu_s, accel_device_id) - 16usize];
    ["Offset of field: vehicle_imu_s::gyro_device_id"]
        [::core::mem::offset_of!(vehicle_imu_s, gyro_device_id) - 20usize];
    ["Offset of field: vehicle_imu_s::delta_angle"]
        [::core::mem::offset_of!(vehicle_imu_s, delta_angle) - 24usize];
    ["Offset of field: vehicle_imu_s::delta_velocity"]
        [::core::mem::offset_of!(vehicle_imu_s, delta_velocity) - 36usize];
    ["Offset of field: vehicle_imu_s::delta_angle_dt"]
        [::core::mem::offset_of!(vehicle_imu_s, delta_angle_dt) - 48usize];
    ["Offset of field: vehicle_imu_s::delta_velocity_dt"]
        [::core::mem::offset_of!(vehicle_imu_s, delta_velocity_dt) - 52usize];
    ["Offset of field: vehicle_imu_s::delta_angle_clipping"]
        [::core::mem::offset_of!(vehicle_imu_s, delta_angle_clipping) - 56usize];
    ["Offset of field: vehicle_imu_s::delta_velocity_clipping"]
        [::core::mem::offset_of!(vehicle_imu_s, delta_velocity_clipping) - 57usize];
    ["Offset of field: vehicle_imu_s::accel_calibration_count"]
        [::core::mem::offset_of!(vehicle_imu_s, accel_calibration_count) - 58usize];
    ["Offset of field: vehicle_imu_s::gyro_calibration_count"]
        [::core::mem::offset_of!(vehicle_imu_s, gyro_calibration_count) - 59usize];
    ["Offset of field: vehicle_imu_s::_padding0"]
        [::core::mem::offset_of!(vehicle_imu_s, _padding0) - 60usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_imu: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct camera_status_s {
    pub timestamp: u64,
    pub active_sys_id: u8,
    pub active_comp_id: u8,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of camera_status_s"][::core::mem::size_of::<camera_status_s>() - 16usize];
    ["Alignment of camera_status_s"][::core::mem::align_of::<camera_status_s>() - 8usize];
    ["Offset of field: camera_status_s::timestamp"]
        [::core::mem::offset_of!(camera_status_s, timestamp) - 0usize];
    ["Offset of field: camera_status_s::active_sys_id"]
        [::core::mem::offset_of!(camera_status_s, active_sys_id) - 8usize];
    ["Offset of field: camera_status_s::active_comp_id"]
        [::core::mem::offset_of!(camera_status_s, active_comp_id) - 9usize];
    ["Offset of field: camera_status_s::_padding0"]
        [::core::mem::offset_of!(camera_status_s, _padding0) - 10usize];
};
unsafe extern "C" {
    pub static __orb_camera_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct actuator_motors_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub control: [f32; 12usize],
    pub reversible_flags: u16,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of actuator_motors_s"][::core::mem::size_of::<actuator_motors_s>() - 72usize];
    ["Alignment of actuator_motors_s"][::core::mem::align_of::<actuator_motors_s>() - 8usize];
    ["Offset of field: actuator_motors_s::timestamp"]
        [::core::mem::offset_of!(actuator_motors_s, timestamp) - 0usize];
    ["Offset of field: actuator_motors_s::timestamp_sample"]
        [::core::mem::offset_of!(actuator_motors_s, timestamp_sample) - 8usize];
    ["Offset of field: actuator_motors_s::control"]
        [::core::mem::offset_of!(actuator_motors_s, control) - 16usize];
    ["Offset of field: actuator_motors_s::reversible_flags"]
        [::core::mem::offset_of!(actuator_motors_s, reversible_flags) - 64usize];
    ["Offset of field: actuator_motors_s::_padding0"]
        [::core::mem::offset_of!(actuator_motors_s, _padding0) - 66usize];
};
unsafe extern "C" {
    pub static __orb_actuator_motors: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_stack_info_s {
    pub timestamp: u64,
    pub stack_free: u16,
    pub task_name: [::core::ffi::c_char; 24usize],
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_stack_info_s"][::core::mem::size_of::<task_stack_info_s>() - 40usize];
    ["Alignment of task_stack_info_s"][::core::mem::align_of::<task_stack_info_s>() - 8usize];
    ["Offset of field: task_stack_info_s::timestamp"]
        [::core::mem::offset_of!(task_stack_info_s, timestamp) - 0usize];
    ["Offset of field: task_stack_info_s::stack_free"]
        [::core::mem::offset_of!(task_stack_info_s, stack_free) - 8usize];
    ["Offset of field: task_stack_info_s::task_name"]
        [::core::mem::offset_of!(task_stack_info_s, task_name) - 10usize];
    ["Offset of field: task_stack_info_s::_padding0"]
        [::core::mem::offset_of!(task_stack_info_s, _padding0) - 34usize];
};
unsafe extern "C" {
    pub static __orb_task_stack_info: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct estimator_selector_status_s {
    pub timestamp: u64,
    pub last_instance_change: u64,
    pub instance_changed_count: u32,
    pub accel_device_id: u32,
    pub baro_device_id: u32,
    pub gyro_device_id: u32,
    pub mag_device_id: u32,
    pub combined_test_ratio: [f32; 9usize],
    pub relative_test_ratio: [f32; 9usize],
    pub accumulated_gyro_error: [f32; 4usize],
    pub accumulated_accel_error: [f32; 4usize],
    pub primary_instance: u8,
    pub instances_available: u8,
    pub healthy: [bool; 9usize],
    pub gyro_fault_detected: bool,
    pub accel_fault_detected: bool,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of estimator_selector_status_s"]
        [::core::mem::size_of::<estimator_selector_status_s>() - 160usize];
    ["Alignment of estimator_selector_status_s"]
        [::core::mem::align_of::<estimator_selector_status_s>() - 8usize];
    ["Offset of field: estimator_selector_status_s::timestamp"]
        [::core::mem::offset_of!(estimator_selector_status_s, timestamp) - 0usize];
    ["Offset of field: estimator_selector_status_s::last_instance_change"]
        [::core::mem::offset_of!(estimator_selector_status_s, last_instance_change) - 8usize];
    ["Offset of field: estimator_selector_status_s::instance_changed_count"]
        [::core::mem::offset_of!(estimator_selector_status_s, instance_changed_count) - 16usize];
    ["Offset of field: estimator_selector_status_s::accel_device_id"]
        [::core::mem::offset_of!(estimator_selector_status_s, accel_device_id) - 20usize];
    ["Offset of field: estimator_selector_status_s::baro_device_id"]
        [::core::mem::offset_of!(estimator_selector_status_s, baro_device_id) - 24usize];
    ["Offset of field: estimator_selector_status_s::gyro_device_id"]
        [::core::mem::offset_of!(estimator_selector_status_s, gyro_device_id) - 28usize];
    ["Offset of field: estimator_selector_status_s::mag_device_id"]
        [::core::mem::offset_of!(estimator_selector_status_s, mag_device_id) - 32usize];
    ["Offset of field: estimator_selector_status_s::combined_test_ratio"]
        [::core::mem::offset_of!(estimator_selector_status_s, combined_test_ratio) - 36usize];
    ["Offset of field: estimator_selector_status_s::relative_test_ratio"]
        [::core::mem::offset_of!(estimator_selector_status_s, relative_test_ratio) - 72usize];
    ["Offset of field: estimator_selector_status_s::accumulated_gyro_error"]
        [::core::mem::offset_of!(estimator_selector_status_s, accumulated_gyro_error) - 108usize];
    ["Offset of field: estimator_selector_status_s::accumulated_accel_error"]
        [::core::mem::offset_of!(estimator_selector_status_s, accumulated_accel_error) - 124usize];
    ["Offset of field: estimator_selector_status_s::primary_instance"]
        [::core::mem::offset_of!(estimator_selector_status_s, primary_instance) - 140usize];
    ["Offset of field: estimator_selector_status_s::instances_available"]
        [::core::mem::offset_of!(estimator_selector_status_s, instances_available) - 141usize];
    ["Offset of field: estimator_selector_status_s::healthy"]
        [::core::mem::offset_of!(estimator_selector_status_s, healthy) - 142usize];
    ["Offset of field: estimator_selector_status_s::gyro_fault_detected"]
        [::core::mem::offset_of!(estimator_selector_status_s, gyro_fault_detected) - 151usize];
    ["Offset of field: estimator_selector_status_s::accel_fault_detected"]
        [::core::mem::offset_of!(estimator_selector_status_s, accel_fault_detected) - 152usize];
    ["Offset of field: estimator_selector_status_s::_padding0"]
        [::core::mem::offset_of!(estimator_selector_status_s, _padding0) - 153usize];
};
unsafe extern "C" {
    pub static __orb_estimator_selector_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct can_interface_status_s {
    pub timestamp: u64,
    pub io_errors: u64,
    pub frames_tx: u64,
    pub frames_rx: u64,
    pub interface: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of can_interface_status_s"][::core::mem::size_of::<can_interface_status_s>() - 40usize];
    ["Alignment of can_interface_status_s"]
        [::core::mem::align_of::<can_interface_status_s>() - 8usize];
    ["Offset of field: can_interface_status_s::timestamp"]
        [::core::mem::offset_of!(can_interface_status_s, timestamp) - 0usize];
    ["Offset of field: can_interface_status_s::io_errors"]
        [::core::mem::offset_of!(can_interface_status_s, io_errors) - 8usize];
    ["Offset of field: can_interface_status_s::frames_tx"]
        [::core::mem::offset_of!(can_interface_status_s, frames_tx) - 16usize];
    ["Offset of field: can_interface_status_s::frames_rx"]
        [::core::mem::offset_of!(can_interface_status_s, frames_rx) - 24usize];
    ["Offset of field: can_interface_status_s::interface"]
        [::core::mem::offset_of!(can_interface_status_s, interface) - 32usize];
    ["Offset of field: can_interface_status_s::_padding0"]
        [::core::mem::offset_of!(can_interface_status_s, _padding0) - 33usize];
};
unsafe extern "C" {
    pub static __orb_can_interface_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct differential_pressure_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub device_id: u32,
    pub differential_pressure_pa: f32,
    pub temperature: f32,
    pub error_count: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of differential_pressure_s"]
        [::core::mem::size_of::<differential_pressure_s>() - 32usize];
    ["Alignment of differential_pressure_s"]
        [::core::mem::align_of::<differential_pressure_s>() - 8usize];
    ["Offset of field: differential_pressure_s::timestamp"]
        [::core::mem::offset_of!(differential_pressure_s, timestamp) - 0usize];
    ["Offset of field: differential_pressure_s::timestamp_sample"]
        [::core::mem::offset_of!(differential_pressure_s, timestamp_sample) - 8usize];
    ["Offset of field: differential_pressure_s::device_id"]
        [::core::mem::offset_of!(differential_pressure_s, device_id) - 16usize];
    ["Offset of field: differential_pressure_s::differential_pressure_pa"]
        [::core::mem::offset_of!(differential_pressure_s, differential_pressure_pa) - 20usize];
    ["Offset of field: differential_pressure_s::temperature"]
        [::core::mem::offset_of!(differential_pressure_s, temperature) - 24usize];
    ["Offset of field: differential_pressure_s::error_count"]
        [::core::mem::offset_of!(differential_pressure_s, error_count) - 28usize];
};
unsafe extern "C" {
    pub static __orb_differential_pressure: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct launch_detection_status_s {
    pub timestamp: u64,
    pub launch_detection_state: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of launch_detection_status_s"]
        [::core::mem::size_of::<launch_detection_status_s>() - 16usize];
    ["Alignment of launch_detection_status_s"]
        [::core::mem::align_of::<launch_detection_status_s>() - 8usize];
    ["Offset of field: launch_detection_status_s::timestamp"]
        [::core::mem::offset_of!(launch_detection_status_s, timestamp) - 0usize];
    ["Offset of field: launch_detection_status_s::launch_detection_state"]
        [::core::mem::offset_of!(launch_detection_status_s, launch_detection_state) - 8usize];
    ["Offset of field: launch_detection_status_s::_padding0"]
        [::core::mem::offset_of!(launch_detection_status_s, _padding0) - 9usize];
};
unsafe extern "C" {
    pub static __orb_launch_detection_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct orb_test_s {
    pub timestamp: u64,
    pub val: i32,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of orb_test_s"][::core::mem::size_of::<orb_test_s>() - 16usize];
    ["Alignment of orb_test_s"][::core::mem::align_of::<orb_test_s>() - 8usize];
    ["Offset of field: orb_test_s::timestamp"]
        [::core::mem::offset_of!(orb_test_s, timestamp) - 0usize];
    ["Offset of field: orb_test_s::val"][::core::mem::offset_of!(orb_test_s, val) - 8usize];
    ["Offset of field: orb_test_s::_padding0"]
        [::core::mem::offset_of!(orb_test_s, _padding0) - 12usize];
};
unsafe extern "C" {
    pub static __orb_orb_test: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_orb_multitest: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct adc_report_s {
    pub timestamp: u64,
    pub device_id: u32,
    pub raw_data: [i32; 12usize],
    pub resolution: u32,
    pub v_ref: f32,
    pub channel_id: [i16; 12usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of adc_report_s"][::core::mem::size_of::<adc_report_s>() - 96usize];
    ["Alignment of adc_report_s"][::core::mem::align_of::<adc_report_s>() - 8usize];
    ["Offset of field: adc_report_s::timestamp"]
        [::core::mem::offset_of!(adc_report_s, timestamp) - 0usize];
    ["Offset of field: adc_report_s::device_id"]
        [::core::mem::offset_of!(adc_report_s, device_id) - 8usize];
    ["Offset of field: adc_report_s::raw_data"]
        [::core::mem::offset_of!(adc_report_s, raw_data) - 12usize];
    ["Offset of field: adc_report_s::resolution"]
        [::core::mem::offset_of!(adc_report_s, resolution) - 60usize];
    ["Offset of field: adc_report_s::v_ref"]
        [::core::mem::offset_of!(adc_report_s, v_ref) - 64usize];
    ["Offset of field: adc_report_s::channel_id"]
        [::core::mem::offset_of!(adc_report_s, channel_id) - 68usize];
    ["Offset of field: adc_report_s::_padding0"]
        [::core::mem::offset_of!(adc_report_s, _padding0) - 92usize];
};
unsafe extern "C" {
    pub static __orb_adc_report: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct register_ext_component_request_s {
    pub timestamp: u64,
    pub request_id: u64,
    pub px4_ros2_api_version: u16,
    pub name: [::core::ffi::c_char; 25usize],
    pub register_arming_check: bool,
    pub register_mode: bool,
    pub register_mode_executor: bool,
    pub enable_replace_internal_mode: bool,
    pub replace_internal_mode: u8,
    pub activate_mode_immediately: bool,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of register_ext_component_request_s"]
        [::core::mem::size_of::<register_ext_component_request_s>() - 56usize];
    ["Alignment of register_ext_component_request_s"]
        [::core::mem::align_of::<register_ext_component_request_s>() - 8usize];
    ["Offset of field: register_ext_component_request_s::timestamp"]
        [::core::mem::offset_of!(register_ext_component_request_s, timestamp) - 0usize];
    ["Offset of field: register_ext_component_request_s::request_id"]
        [::core::mem::offset_of!(register_ext_component_request_s, request_id) - 8usize];
    ["Offset of field: register_ext_component_request_s::px4_ros2_api_version"]
        [::core::mem::offset_of!(register_ext_component_request_s, px4_ros2_api_version) - 16usize];
    ["Offset of field: register_ext_component_request_s::name"]
        [::core::mem::offset_of!(register_ext_component_request_s, name) - 18usize];
    ["Offset of field: register_ext_component_request_s::register_arming_check"][::core::mem::offset_of!(
        register_ext_component_request_s,
        register_arming_check
    ) - 43usize];
    ["Offset of field: register_ext_component_request_s::register_mode"]
        [::core::mem::offset_of!(register_ext_component_request_s, register_mode) - 44usize];
    ["Offset of field: register_ext_component_request_s::register_mode_executor"][::core::mem::offset_of!(
        register_ext_component_request_s,
        register_mode_executor
    ) - 45usize];
    ["Offset of field: register_ext_component_request_s::enable_replace_internal_mode"][::core::mem::offset_of!(
        register_ext_component_request_s,
        enable_replace_internal_mode
    )
        - 46usize];
    ["Offset of field: register_ext_component_request_s::replace_internal_mode"][::core::mem::offset_of!(
        register_ext_component_request_s,
        replace_internal_mode
    ) - 47usize];
    ["Offset of field: register_ext_component_request_s::activate_mode_immediately"][::core::mem::offset_of!(
        register_ext_component_request_s,
        activate_mode_immediately
    ) - 48usize];
    ["Offset of field: register_ext_component_request_s::_padding0"]
        [::core::mem::offset_of!(register_ext_component_request_s, _padding0) - 49usize];
};
unsafe extern "C" {
    pub static __orb_register_ext_component_request: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct open_drone_id_arm_status_s {
    pub timestamp: u64,
    pub status: u8,
    pub error: [::core::ffi::c_char; 50usize],
    pub _padding0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of open_drone_id_arm_status_s"]
        [::core::mem::size_of::<open_drone_id_arm_status_s>() - 64usize];
    ["Alignment of open_drone_id_arm_status_s"]
        [::core::mem::align_of::<open_drone_id_arm_status_s>() - 8usize];
    ["Offset of field: open_drone_id_arm_status_s::timestamp"]
        [::core::mem::offset_of!(open_drone_id_arm_status_s, timestamp) - 0usize];
    ["Offset of field: open_drone_id_arm_status_s::status"]
        [::core::mem::offset_of!(open_drone_id_arm_status_s, status) - 8usize];
    ["Offset of field: open_drone_id_arm_status_s::error"]
        [::core::mem::offset_of!(open_drone_id_arm_status_s, error) - 9usize];
    ["Offset of field: open_drone_id_arm_status_s::_padding0"]
        [::core::mem::offset_of!(open_drone_id_arm_status_s, _padding0) - 59usize];
};
unsafe extern "C" {
    pub static __orb_open_drone_id_arm_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gripper_s {
    pub timestamp: u64,
    pub command: i8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gripper_s"][::core::mem::size_of::<gripper_s>() - 16usize];
    ["Alignment of gripper_s"][::core::mem::align_of::<gripper_s>() - 8usize];
    ["Offset of field: gripper_s::timestamp"]
        [::core::mem::offset_of!(gripper_s, timestamp) - 0usize];
    ["Offset of field: gripper_s::command"][::core::mem::offset_of!(gripper_s, command) - 8usize];
    ["Offset of field: gripper_s::_padding0"]
        [::core::mem::offset_of!(gripper_s, _padding0) - 9usize];
};
unsafe extern "C" {
    pub static __orb_gripper: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_magnetometer_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub device_id: u32,
    pub magnetometer_ga: [f32; 3usize],
    pub calibration_count: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_magnetometer_s"][::core::mem::size_of::<vehicle_magnetometer_s>() - 40usize];
    ["Alignment of vehicle_magnetometer_s"]
        [::core::mem::align_of::<vehicle_magnetometer_s>() - 8usize];
    ["Offset of field: vehicle_magnetometer_s::timestamp"]
        [::core::mem::offset_of!(vehicle_magnetometer_s, timestamp) - 0usize];
    ["Offset of field: vehicle_magnetometer_s::timestamp_sample"]
        [::core::mem::offset_of!(vehicle_magnetometer_s, timestamp_sample) - 8usize];
    ["Offset of field: vehicle_magnetometer_s::device_id"]
        [::core::mem::offset_of!(vehicle_magnetometer_s, device_id) - 16usize];
    ["Offset of field: vehicle_magnetometer_s::magnetometer_ga"]
        [::core::mem::offset_of!(vehicle_magnetometer_s, magnetometer_ga) - 20usize];
    ["Offset of field: vehicle_magnetometer_s::calibration_count"]
        [::core::mem::offset_of!(vehicle_magnetometer_s, calibration_count) - 32usize];
    ["Offset of field: vehicle_magnetometer_s::_padding0"]
        [::core::mem::offset_of!(vehicle_magnetometer_s, _padding0) - 33usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_magnetometer: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_status_s {
    pub timestamp: u64,
    pub armed_time: u64,
    pub takeoff_time: u64,
    pub nav_state_timestamp: u64,
    pub valid_nav_states_mask: u32,
    pub can_set_nav_states_mask: u32,
    pub failure_detector_status: u16,
    pub arming_state: u8,
    pub latest_arming_reason: u8,
    pub latest_disarming_reason: u8,
    pub nav_state_user_intention: u8,
    pub nav_state: u8,
    pub executor_in_charge: u8,
    pub hil_state: u8,
    pub vehicle_type: u8,
    pub failsafe: bool,
    pub failsafe_and_user_took_over: bool,
    pub failsafe_defer_state: u8,
    pub gcs_connection_lost: bool,
    pub gcs_connection_lost_counter: u8,
    pub high_latency_data_link_lost: bool,
    pub is_vtol: bool,
    pub is_vtol_tailsitter: bool,
    pub in_transition_mode: bool,
    pub in_transition_to_fw: bool,
    pub system_type: u8,
    pub system_id: u8,
    pub component_id: u8,
    pub safety_button_available: bool,
    pub safety_off: bool,
    pub power_input_valid: bool,
    pub usb_connected: bool,
    pub open_drone_id_system_present: bool,
    pub open_drone_id_system_healthy: bool,
    pub parachute_system_present: bool,
    pub parachute_system_healthy: bool,
    pub rc_calibration_in_progress: bool,
    pub calibration_enabled: bool,
    pub pre_flight_checks_pass: bool,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_status_s"][::core::mem::size_of::<vehicle_status_s>() - 80usize];
    ["Alignment of vehicle_status_s"][::core::mem::align_of::<vehicle_status_s>() - 8usize];
    ["Offset of field: vehicle_status_s::timestamp"]
        [::core::mem::offset_of!(vehicle_status_s, timestamp) - 0usize];
    ["Offset of field: vehicle_status_s::armed_time"]
        [::core::mem::offset_of!(vehicle_status_s, armed_time) - 8usize];
    ["Offset of field: vehicle_status_s::takeoff_time"]
        [::core::mem::offset_of!(vehicle_status_s, takeoff_time) - 16usize];
    ["Offset of field: vehicle_status_s::nav_state_timestamp"]
        [::core::mem::offset_of!(vehicle_status_s, nav_state_timestamp) - 24usize];
    ["Offset of field: vehicle_status_s::valid_nav_states_mask"]
        [::core::mem::offset_of!(vehicle_status_s, valid_nav_states_mask) - 32usize];
    ["Offset of field: vehicle_status_s::can_set_nav_states_mask"]
        [::core::mem::offset_of!(vehicle_status_s, can_set_nav_states_mask) - 36usize];
    ["Offset of field: vehicle_status_s::failure_detector_status"]
        [::core::mem::offset_of!(vehicle_status_s, failure_detector_status) - 40usize];
    ["Offset of field: vehicle_status_s::arming_state"]
        [::core::mem::offset_of!(vehicle_status_s, arming_state) - 42usize];
    ["Offset of field: vehicle_status_s::latest_arming_reason"]
        [::core::mem::offset_of!(vehicle_status_s, latest_arming_reason) - 43usize];
    ["Offset of field: vehicle_status_s::latest_disarming_reason"]
        [::core::mem::offset_of!(vehicle_status_s, latest_disarming_reason) - 44usize];
    ["Offset of field: vehicle_status_s::nav_state_user_intention"]
        [::core::mem::offset_of!(vehicle_status_s, nav_state_user_intention) - 45usize];
    ["Offset of field: vehicle_status_s::nav_state"]
        [::core::mem::offset_of!(vehicle_status_s, nav_state) - 46usize];
    ["Offset of field: vehicle_status_s::executor_in_charge"]
        [::core::mem::offset_of!(vehicle_status_s, executor_in_charge) - 47usize];
    ["Offset of field: vehicle_status_s::hil_state"]
        [::core::mem::offset_of!(vehicle_status_s, hil_state) - 48usize];
    ["Offset of field: vehicle_status_s::vehicle_type"]
        [::core::mem::offset_of!(vehicle_status_s, vehicle_type) - 49usize];
    ["Offset of field: vehicle_status_s::failsafe"]
        [::core::mem::offset_of!(vehicle_status_s, failsafe) - 50usize];
    ["Offset of field: vehicle_status_s::failsafe_and_user_took_over"]
        [::core::mem::offset_of!(vehicle_status_s, failsafe_and_user_took_over) - 51usize];
    ["Offset of field: vehicle_status_s::failsafe_defer_state"]
        [::core::mem::offset_of!(vehicle_status_s, failsafe_defer_state) - 52usize];
    ["Offset of field: vehicle_status_s::gcs_connection_lost"]
        [::core::mem::offset_of!(vehicle_status_s, gcs_connection_lost) - 53usize];
    ["Offset of field: vehicle_status_s::gcs_connection_lost_counter"]
        [::core::mem::offset_of!(vehicle_status_s, gcs_connection_lost_counter) - 54usize];
    ["Offset of field: vehicle_status_s::high_latency_data_link_lost"]
        [::core::mem::offset_of!(vehicle_status_s, high_latency_data_link_lost) - 55usize];
    ["Offset of field: vehicle_status_s::is_vtol"]
        [::core::mem::offset_of!(vehicle_status_s, is_vtol) - 56usize];
    ["Offset of field: vehicle_status_s::is_vtol_tailsitter"]
        [::core::mem::offset_of!(vehicle_status_s, is_vtol_tailsitter) - 57usize];
    ["Offset of field: vehicle_status_s::in_transition_mode"]
        [::core::mem::offset_of!(vehicle_status_s, in_transition_mode) - 58usize];
    ["Offset of field: vehicle_status_s::in_transition_to_fw"]
        [::core::mem::offset_of!(vehicle_status_s, in_transition_to_fw) - 59usize];
    ["Offset of field: vehicle_status_s::system_type"]
        [::core::mem::offset_of!(vehicle_status_s, system_type) - 60usize];
    ["Offset of field: vehicle_status_s::system_id"]
        [::core::mem::offset_of!(vehicle_status_s, system_id) - 61usize];
    ["Offset of field: vehicle_status_s::component_id"]
        [::core::mem::offset_of!(vehicle_status_s, component_id) - 62usize];
    ["Offset of field: vehicle_status_s::safety_button_available"]
        [::core::mem::offset_of!(vehicle_status_s, safety_button_available) - 63usize];
    ["Offset of field: vehicle_status_s::safety_off"]
        [::core::mem::offset_of!(vehicle_status_s, safety_off) - 64usize];
    ["Offset of field: vehicle_status_s::power_input_valid"]
        [::core::mem::offset_of!(vehicle_status_s, power_input_valid) - 65usize];
    ["Offset of field: vehicle_status_s::usb_connected"]
        [::core::mem::offset_of!(vehicle_status_s, usb_connected) - 66usize];
    ["Offset of field: vehicle_status_s::open_drone_id_system_present"]
        [::core::mem::offset_of!(vehicle_status_s, open_drone_id_system_present) - 67usize];
    ["Offset of field: vehicle_status_s::open_drone_id_system_healthy"]
        [::core::mem::offset_of!(vehicle_status_s, open_drone_id_system_healthy) - 68usize];
    ["Offset of field: vehicle_status_s::parachute_system_present"]
        [::core::mem::offset_of!(vehicle_status_s, parachute_system_present) - 69usize];
    ["Offset of field: vehicle_status_s::parachute_system_healthy"]
        [::core::mem::offset_of!(vehicle_status_s, parachute_system_healthy) - 70usize];
    ["Offset of field: vehicle_status_s::rc_calibration_in_progress"]
        [::core::mem::offset_of!(vehicle_status_s, rc_calibration_in_progress) - 71usize];
    ["Offset of field: vehicle_status_s::calibration_enabled"]
        [::core::mem::offset_of!(vehicle_status_s, calibration_enabled) - 72usize];
    ["Offset of field: vehicle_status_s::pre_flight_checks_pass"]
        [::core::mem::offset_of!(vehicle_status_s, pre_flight_checks_pass) - 73usize];
    ["Offset of field: vehicle_status_s::_padding0"]
        [::core::mem::offset_of!(vehicle_status_s, _padding0) - 74usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct internal_combustion_engine_control_s {
    pub timestamp: u64,
    pub throttle_control: f32,
    pub choke_control: f32,
    pub starter_engine_control: f32,
    pub ignition_on: bool,
    pub user_request: u8,
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of internal_combustion_engine_control_s"]
        [::core::mem::size_of::<internal_combustion_engine_control_s>() - 24usize];
    ["Alignment of internal_combustion_engine_control_s"]
        [::core::mem::align_of::<internal_combustion_engine_control_s>() - 8usize];
    ["Offset of field: internal_combustion_engine_control_s::timestamp"]
        [::core::mem::offset_of!(internal_combustion_engine_control_s, timestamp) - 0usize];
    ["Offset of field: internal_combustion_engine_control_s::throttle_control"]
        [::core::mem::offset_of!(internal_combustion_engine_control_s, throttle_control) - 8usize];
    ["Offset of field: internal_combustion_engine_control_s::choke_control"]
        [::core::mem::offset_of!(internal_combustion_engine_control_s, choke_control) - 12usize];
    ["Offset of field: internal_combustion_engine_control_s::starter_engine_control"][::core::mem::offset_of!(
        internal_combustion_engine_control_s,
        starter_engine_control
    ) - 16usize];
    ["Offset of field: internal_combustion_engine_control_s::ignition_on"]
        [::core::mem::offset_of!(internal_combustion_engine_control_s, ignition_on) - 20usize];
    ["Offset of field: internal_combustion_engine_control_s::user_request"]
        [::core::mem::offset_of!(internal_combustion_engine_control_s, user_request) - 21usize];
    ["Offset of field: internal_combustion_engine_control_s::_padding0"]
        [::core::mem::offset_of!(internal_combustion_engine_control_s, _padding0) - 22usize];
};
unsafe extern "C" {
    pub static __orb_internal_combustion_engine_control: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct landing_gear_s {
    pub timestamp: u64,
    pub landing_gear: i8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of landing_gear_s"][::core::mem::size_of::<landing_gear_s>() - 16usize];
    ["Alignment of landing_gear_s"][::core::mem::align_of::<landing_gear_s>() - 8usize];
    ["Offset of field: landing_gear_s::timestamp"]
        [::core::mem::offset_of!(landing_gear_s, timestamp) - 0usize];
    ["Offset of field: landing_gear_s::landing_gear"]
        [::core::mem::offset_of!(landing_gear_s, landing_gear) - 8usize];
    ["Offset of field: landing_gear_s::_padding0"]
        [::core::mem::offset_of!(landing_gear_s, _padding0) - 9usize];
};
unsafe extern "C" {
    pub static __orb_landing_gear: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct generator_status_s {
    pub timestamp: u64,
    pub status: u64,
    pub battery_current: f32,
    pub load_current: f32,
    pub power_generated: f32,
    pub bus_voltage: f32,
    pub bat_current_setpoint: f32,
    pub runtime: u32,
    pub time_until_maintenance: i32,
    pub generator_speed: u16,
    pub rectifier_temperature: i16,
    pub generator_temperature: i16,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of generator_status_s"][::core::mem::size_of::<generator_status_s>() - 56usize];
    ["Alignment of generator_status_s"][::core::mem::align_of::<generator_status_s>() - 8usize];
    ["Offset of field: generator_status_s::timestamp"]
        [::core::mem::offset_of!(generator_status_s, timestamp) - 0usize];
    ["Offset of field: generator_status_s::status"]
        [::core::mem::offset_of!(generator_status_s, status) - 8usize];
    ["Offset of field: generator_status_s::battery_current"]
        [::core::mem::offset_of!(generator_status_s, battery_current) - 16usize];
    ["Offset of field: generator_status_s::load_current"]
        [::core::mem::offset_of!(generator_status_s, load_current) - 20usize];
    ["Offset of field: generator_status_s::power_generated"]
        [::core::mem::offset_of!(generator_status_s, power_generated) - 24usize];
    ["Offset of field: generator_status_s::bus_voltage"]
        [::core::mem::offset_of!(generator_status_s, bus_voltage) - 28usize];
    ["Offset of field: generator_status_s::bat_current_setpoint"]
        [::core::mem::offset_of!(generator_status_s, bat_current_setpoint) - 32usize];
    ["Offset of field: generator_status_s::runtime"]
        [::core::mem::offset_of!(generator_status_s, runtime) - 36usize];
    ["Offset of field: generator_status_s::time_until_maintenance"]
        [::core::mem::offset_of!(generator_status_s, time_until_maintenance) - 40usize];
    ["Offset of field: generator_status_s::generator_speed"]
        [::core::mem::offset_of!(generator_status_s, generator_speed) - 44usize];
    ["Offset of field: generator_status_s::rectifier_temperature"]
        [::core::mem::offset_of!(generator_status_s, rectifier_temperature) - 46usize];
    ["Offset of field: generator_status_s::generator_temperature"]
        [::core::mem::offset_of!(generator_status_s, generator_temperature) - 48usize];
    ["Offset of field: generator_status_s::_padding0"]
        [::core::mem::offset_of!(generator_status_s, _padding0) - 50usize];
};
unsafe extern "C" {
    pub static __orb_generator_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct control_allocator_status_s {
    pub timestamp: u64,
    pub unallocated_torque: [f32; 3usize],
    pub unallocated_thrust: [f32; 3usize],
    pub handled_motor_failure_mask: u16,
    pub torque_setpoint_achieved: bool,
    pub thrust_setpoint_achieved: bool,
    pub actuator_saturation: [i8; 16usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of control_allocator_status_s"]
        [::core::mem::size_of::<control_allocator_status_s>() - 56usize];
    ["Alignment of control_allocator_status_s"]
        [::core::mem::align_of::<control_allocator_status_s>() - 8usize];
    ["Offset of field: control_allocator_status_s::timestamp"]
        [::core::mem::offset_of!(control_allocator_status_s, timestamp) - 0usize];
    ["Offset of field: control_allocator_status_s::unallocated_torque"]
        [::core::mem::offset_of!(control_allocator_status_s, unallocated_torque) - 8usize];
    ["Offset of field: control_allocator_status_s::unallocated_thrust"]
        [::core::mem::offset_of!(control_allocator_status_s, unallocated_thrust) - 20usize];
    ["Offset of field: control_allocator_status_s::handled_motor_failure_mask"]
        [::core::mem::offset_of!(control_allocator_status_s, handled_motor_failure_mask) - 32usize];
    ["Offset of field: control_allocator_status_s::torque_setpoint_achieved"]
        [::core::mem::offset_of!(control_allocator_status_s, torque_setpoint_achieved) - 34usize];
    ["Offset of field: control_allocator_status_s::thrust_setpoint_achieved"]
        [::core::mem::offset_of!(control_allocator_status_s, thrust_setpoint_achieved) - 35usize];
    ["Offset of field: control_allocator_status_s::actuator_saturation"]
        [::core::mem::offset_of!(control_allocator_status_s, actuator_saturation) - 36usize];
    ["Offset of field: control_allocator_status_s::_padding0"]
        [::core::mem::offset_of!(control_allocator_status_s, _padding0) - 52usize];
};
unsafe extern "C" {
    pub static __orb_control_allocator_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct manual_control_setpoint_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub roll: f32,
    pub pitch: f32,
    pub yaw: f32,
    pub throttle: f32,
    pub flaps: f32,
    pub aux1: f32,
    pub aux2: f32,
    pub aux3: f32,
    pub aux4: f32,
    pub aux5: f32,
    pub aux6: f32,
    pub buttons: u16,
    pub valid: bool,
    pub data_source: u8,
    pub sticks_moving: bool,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of manual_control_setpoint_s"]
        [::core::mem::size_of::<manual_control_setpoint_s>() - 72usize];
    ["Alignment of manual_control_setpoint_s"]
        [::core::mem::align_of::<manual_control_setpoint_s>() - 8usize];
    ["Offset of field: manual_control_setpoint_s::timestamp"]
        [::core::mem::offset_of!(manual_control_setpoint_s, timestamp) - 0usize];
    ["Offset of field: manual_control_setpoint_s::timestamp_sample"]
        [::core::mem::offset_of!(manual_control_setpoint_s, timestamp_sample) - 8usize];
    ["Offset of field: manual_control_setpoint_s::roll"]
        [::core::mem::offset_of!(manual_control_setpoint_s, roll) - 16usize];
    ["Offset of field: manual_control_setpoint_s::pitch"]
        [::core::mem::offset_of!(manual_control_setpoint_s, pitch) - 20usize];
    ["Offset of field: manual_control_setpoint_s::yaw"]
        [::core::mem::offset_of!(manual_control_setpoint_s, yaw) - 24usize];
    ["Offset of field: manual_control_setpoint_s::throttle"]
        [::core::mem::offset_of!(manual_control_setpoint_s, throttle) - 28usize];
    ["Offset of field: manual_control_setpoint_s::flaps"]
        [::core::mem::offset_of!(manual_control_setpoint_s, flaps) - 32usize];
    ["Offset of field: manual_control_setpoint_s::aux1"]
        [::core::mem::offset_of!(manual_control_setpoint_s, aux1) - 36usize];
    ["Offset of field: manual_control_setpoint_s::aux2"]
        [::core::mem::offset_of!(manual_control_setpoint_s, aux2) - 40usize];
    ["Offset of field: manual_control_setpoint_s::aux3"]
        [::core::mem::offset_of!(manual_control_setpoint_s, aux3) - 44usize];
    ["Offset of field: manual_control_setpoint_s::aux4"]
        [::core::mem::offset_of!(manual_control_setpoint_s, aux4) - 48usize];
    ["Offset of field: manual_control_setpoint_s::aux5"]
        [::core::mem::offset_of!(manual_control_setpoint_s, aux5) - 52usize];
    ["Offset of field: manual_control_setpoint_s::aux6"]
        [::core::mem::offset_of!(manual_control_setpoint_s, aux6) - 56usize];
    ["Offset of field: manual_control_setpoint_s::buttons"]
        [::core::mem::offset_of!(manual_control_setpoint_s, buttons) - 60usize];
    ["Offset of field: manual_control_setpoint_s::valid"]
        [::core::mem::offset_of!(manual_control_setpoint_s, valid) - 62usize];
    ["Offset of field: manual_control_setpoint_s::data_source"]
        [::core::mem::offset_of!(manual_control_setpoint_s, data_source) - 63usize];
    ["Offset of field: manual_control_setpoint_s::sticks_moving"]
        [::core::mem::offset_of!(manual_control_setpoint_s, sticks_moving) - 64usize];
    ["Offset of field: manual_control_setpoint_s::_padding0"]
        [::core::mem::offset_of!(manual_control_setpoint_s, _padding0) - 65usize];
};
unsafe extern "C" {
    pub static __orb_manual_control_setpoint: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_manual_control_input: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct collision_constraints_s {
    pub timestamp: u64,
    pub original_setpoint: [f32; 2usize],
    pub adapted_setpoint: [f32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of collision_constraints_s"]
        [::core::mem::size_of::<collision_constraints_s>() - 24usize];
    ["Alignment of collision_constraints_s"]
        [::core::mem::align_of::<collision_constraints_s>() - 8usize];
    ["Offset of field: collision_constraints_s::timestamp"]
        [::core::mem::offset_of!(collision_constraints_s, timestamp) - 0usize];
    ["Offset of field: collision_constraints_s::original_setpoint"]
        [::core::mem::offset_of!(collision_constraints_s, original_setpoint) - 8usize];
    ["Offset of field: collision_constraints_s::adapted_setpoint"]
        [::core::mem::offset_of!(collision_constraints_s, adapted_setpoint) - 16usize];
};
unsafe extern "C" {
    pub static __orb_collision_constraints: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gimbal_manager_set_manual_control_s {
    pub timestamp: u64,
    pub flags: u32,
    pub pitch: f32,
    pub yaw: f32,
    pub pitch_rate: f32,
    pub yaw_rate: f32,
    pub origin_sysid: u8,
    pub origin_compid: u8,
    pub target_system: u8,
    pub target_component: u8,
    pub gimbal_device_id: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gimbal_manager_set_manual_control_s"]
        [::core::mem::size_of::<gimbal_manager_set_manual_control_s>() - 40usize];
    ["Alignment of gimbal_manager_set_manual_control_s"]
        [::core::mem::align_of::<gimbal_manager_set_manual_control_s>() - 8usize];
    ["Offset of field: gimbal_manager_set_manual_control_s::timestamp"]
        [::core::mem::offset_of!(gimbal_manager_set_manual_control_s, timestamp) - 0usize];
    ["Offset of field: gimbal_manager_set_manual_control_s::flags"]
        [::core::mem::offset_of!(gimbal_manager_set_manual_control_s, flags) - 8usize];
    ["Offset of field: gimbal_manager_set_manual_control_s::pitch"]
        [::core::mem::offset_of!(gimbal_manager_set_manual_control_s, pitch) - 12usize];
    ["Offset of field: gimbal_manager_set_manual_control_s::yaw"]
        [::core::mem::offset_of!(gimbal_manager_set_manual_control_s, yaw) - 16usize];
    ["Offset of field: gimbal_manager_set_manual_control_s::pitch_rate"]
        [::core::mem::offset_of!(gimbal_manager_set_manual_control_s, pitch_rate) - 20usize];
    ["Offset of field: gimbal_manager_set_manual_control_s::yaw_rate"]
        [::core::mem::offset_of!(gimbal_manager_set_manual_control_s, yaw_rate) - 24usize];
    ["Offset of field: gimbal_manager_set_manual_control_s::origin_sysid"]
        [::core::mem::offset_of!(gimbal_manager_set_manual_control_s, origin_sysid) - 28usize];
    ["Offset of field: gimbal_manager_set_manual_control_s::origin_compid"]
        [::core::mem::offset_of!(gimbal_manager_set_manual_control_s, origin_compid) - 29usize];
    ["Offset of field: gimbal_manager_set_manual_control_s::target_system"]
        [::core::mem::offset_of!(gimbal_manager_set_manual_control_s, target_system) - 30usize];
    ["Offset of field: gimbal_manager_set_manual_control_s::target_component"]
        [::core::mem::offset_of!(gimbal_manager_set_manual_control_s, target_component) - 31usize];
    ["Offset of field: gimbal_manager_set_manual_control_s::gimbal_device_id"]
        [::core::mem::offset_of!(gimbal_manager_set_manual_control_s, gimbal_device_id) - 32usize];
    ["Offset of field: gimbal_manager_set_manual_control_s::_padding0"]
        [::core::mem::offset_of!(gimbal_manager_set_manual_control_s, _padding0) - 33usize];
};
unsafe extern "C" {
    pub static __orb_gimbal_manager_set_manual_control: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_correction_s {
    pub timestamp: u64,
    pub accel_device_ids: [u32; 4usize],
    pub accel_temperature: [f32; 4usize],
    pub accel_offset_0: [f32; 3usize],
    pub accel_offset_1: [f32; 3usize],
    pub accel_offset_2: [f32; 3usize],
    pub accel_offset_3: [f32; 3usize],
    pub gyro_device_ids: [u32; 4usize],
    pub gyro_temperature: [f32; 4usize],
    pub gyro_offset_0: [f32; 3usize],
    pub gyro_offset_1: [f32; 3usize],
    pub gyro_offset_2: [f32; 3usize],
    pub gyro_offset_3: [f32; 3usize],
    pub mag_device_ids: [u32; 4usize],
    pub mag_temperature: [f32; 4usize],
    pub mag_offset_0: [f32; 3usize],
    pub mag_offset_1: [f32; 3usize],
    pub mag_offset_2: [f32; 3usize],
    pub mag_offset_3: [f32; 3usize],
    pub baro_device_ids: [u32; 4usize],
    pub baro_temperature: [f32; 4usize],
    pub baro_offset_0: f32,
    pub baro_offset_1: f32,
    pub baro_offset_2: f32,
    pub baro_offset_3: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_correction_s"][::core::mem::size_of::<sensor_correction_s>() - 296usize];
    ["Alignment of sensor_correction_s"][::core::mem::align_of::<sensor_correction_s>() - 8usize];
    ["Offset of field: sensor_correction_s::timestamp"]
        [::core::mem::offset_of!(sensor_correction_s, timestamp) - 0usize];
    ["Offset of field: sensor_correction_s::accel_device_ids"]
        [::core::mem::offset_of!(sensor_correction_s, accel_device_ids) - 8usize];
    ["Offset of field: sensor_correction_s::accel_temperature"]
        [::core::mem::offset_of!(sensor_correction_s, accel_temperature) - 24usize];
    ["Offset of field: sensor_correction_s::accel_offset_0"]
        [::core::mem::offset_of!(sensor_correction_s, accel_offset_0) - 40usize];
    ["Offset of field: sensor_correction_s::accel_offset_1"]
        [::core::mem::offset_of!(sensor_correction_s, accel_offset_1) - 52usize];
    ["Offset of field: sensor_correction_s::accel_offset_2"]
        [::core::mem::offset_of!(sensor_correction_s, accel_offset_2) - 64usize];
    ["Offset of field: sensor_correction_s::accel_offset_3"]
        [::core::mem::offset_of!(sensor_correction_s, accel_offset_3) - 76usize];
    ["Offset of field: sensor_correction_s::gyro_device_ids"]
        [::core::mem::offset_of!(sensor_correction_s, gyro_device_ids) - 88usize];
    ["Offset of field: sensor_correction_s::gyro_temperature"]
        [::core::mem::offset_of!(sensor_correction_s, gyro_temperature) - 104usize];
    ["Offset of field: sensor_correction_s::gyro_offset_0"]
        [::core::mem::offset_of!(sensor_correction_s, gyro_offset_0) - 120usize];
    ["Offset of field: sensor_correction_s::gyro_offset_1"]
        [::core::mem::offset_of!(sensor_correction_s, gyro_offset_1) - 132usize];
    ["Offset of field: sensor_correction_s::gyro_offset_2"]
        [::core::mem::offset_of!(sensor_correction_s, gyro_offset_2) - 144usize];
    ["Offset of field: sensor_correction_s::gyro_offset_3"]
        [::core::mem::offset_of!(sensor_correction_s, gyro_offset_3) - 156usize];
    ["Offset of field: sensor_correction_s::mag_device_ids"]
        [::core::mem::offset_of!(sensor_correction_s, mag_device_ids) - 168usize];
    ["Offset of field: sensor_correction_s::mag_temperature"]
        [::core::mem::offset_of!(sensor_correction_s, mag_temperature) - 184usize];
    ["Offset of field: sensor_correction_s::mag_offset_0"]
        [::core::mem::offset_of!(sensor_correction_s, mag_offset_0) - 200usize];
    ["Offset of field: sensor_correction_s::mag_offset_1"]
        [::core::mem::offset_of!(sensor_correction_s, mag_offset_1) - 212usize];
    ["Offset of field: sensor_correction_s::mag_offset_2"]
        [::core::mem::offset_of!(sensor_correction_s, mag_offset_2) - 224usize];
    ["Offset of field: sensor_correction_s::mag_offset_3"]
        [::core::mem::offset_of!(sensor_correction_s, mag_offset_3) - 236usize];
    ["Offset of field: sensor_correction_s::baro_device_ids"]
        [::core::mem::offset_of!(sensor_correction_s, baro_device_ids) - 248usize];
    ["Offset of field: sensor_correction_s::baro_temperature"]
        [::core::mem::offset_of!(sensor_correction_s, baro_temperature) - 264usize];
    ["Offset of field: sensor_correction_s::baro_offset_0"]
        [::core::mem::offset_of!(sensor_correction_s, baro_offset_0) - 280usize];
    ["Offset of field: sensor_correction_s::baro_offset_1"]
        [::core::mem::offset_of!(sensor_correction_s, baro_offset_1) - 284usize];
    ["Offset of field: sensor_correction_s::baro_offset_2"]
        [::core::mem::offset_of!(sensor_correction_s, baro_offset_2) - 288usize];
    ["Offset of field: sensor_correction_s::baro_offset_3"]
        [::core::mem::offset_of!(sensor_correction_s, baro_offset_3) - 292usize];
};
unsafe extern "C" {
    pub static __orb_sensor_correction: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_selection_s {
    pub timestamp: u64,
    pub accel_device_id: u32,
    pub gyro_device_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_selection_s"][::core::mem::size_of::<sensor_selection_s>() - 16usize];
    ["Alignment of sensor_selection_s"][::core::mem::align_of::<sensor_selection_s>() - 8usize];
    ["Offset of field: sensor_selection_s::timestamp"]
        [::core::mem::offset_of!(sensor_selection_s, timestamp) - 0usize];
    ["Offset of field: sensor_selection_s::accel_device_id"]
        [::core::mem::offset_of!(sensor_selection_s, accel_device_id) - 8usize];
    ["Offset of field: sensor_selection_s::gyro_device_id"]
        [::core::mem::offset_of!(sensor_selection_s, gyro_device_id) - 12usize];
};
unsafe extern "C" {
    pub static __orb_sensor_selection: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct landing_target_innovations_s {
    pub timestamp: u64,
    pub innov_x: f32,
    pub innov_y: f32,
    pub innov_cov_x: f32,
    pub innov_cov_y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of landing_target_innovations_s"]
        [::core::mem::size_of::<landing_target_innovations_s>() - 24usize];
    ["Alignment of landing_target_innovations_s"]
        [::core::mem::align_of::<landing_target_innovations_s>() - 8usize];
    ["Offset of field: landing_target_innovations_s::timestamp"]
        [::core::mem::offset_of!(landing_target_innovations_s, timestamp) - 0usize];
    ["Offset of field: landing_target_innovations_s::innov_x"]
        [::core::mem::offset_of!(landing_target_innovations_s, innov_x) - 8usize];
    ["Offset of field: landing_target_innovations_s::innov_y"]
        [::core::mem::offset_of!(landing_target_innovations_s, innov_y) - 12usize];
    ["Offset of field: landing_target_innovations_s::innov_cov_x"]
        [::core::mem::offset_of!(landing_target_innovations_s, innov_cov_x) - 16usize];
    ["Offset of field: landing_target_innovations_s::innov_cov_y"]
        [::core::mem::offset_of!(landing_target_innovations_s, innov_cov_y) - 20usize];
};
unsafe extern "C" {
    pub static __orb_landing_target_innovations: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct estimator_status_flags_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub control_status_changes: u32,
    pub fault_status_changes: u32,
    pub innovation_fault_status_changes: u32,
    pub cs_tilt_align: bool,
    pub cs_yaw_align: bool,
    pub cs_gnss_pos: bool,
    pub cs_opt_flow: bool,
    pub cs_mag_hdg: bool,
    pub cs_mag_3d: bool,
    pub cs_mag_dec: bool,
    pub cs_in_air: bool,
    pub cs_wind: bool,
    pub cs_baro_hgt: bool,
    pub cs_rng_hgt: bool,
    pub cs_gps_hgt: bool,
    pub cs_ev_pos: bool,
    pub cs_ev_yaw: bool,
    pub cs_ev_hgt: bool,
    pub cs_fuse_beta: bool,
    pub cs_mag_field_disturbed: bool,
    pub cs_fixed_wing: bool,
    pub cs_mag_fault: bool,
    pub cs_fuse_aspd: bool,
    pub cs_gnd_effect: bool,
    pub cs_rng_stuck: bool,
    pub cs_gnss_yaw: bool,
    pub cs_mag_aligned_in_flight: bool,
    pub cs_ev_vel: bool,
    pub cs_synthetic_mag_z: bool,
    pub cs_vehicle_at_rest: bool,
    pub cs_gnss_yaw_fault: bool,
    pub cs_rng_fault: bool,
    pub cs_inertial_dead_reckoning: bool,
    pub cs_wind_dead_reckoning: bool,
    pub cs_rng_kin_consistent: bool,
    pub cs_fake_pos: bool,
    pub cs_fake_hgt: bool,
    pub cs_gravity_vector: bool,
    pub cs_mag: bool,
    pub cs_ev_yaw_fault: bool,
    pub cs_mag_heading_consistent: bool,
    pub cs_aux_gpos: bool,
    pub cs_rng_terrain: bool,
    pub cs_opt_flow_terrain: bool,
    pub cs_valid_fake_pos: bool,
    pub cs_constant_pos: bool,
    pub cs_baro_fault: bool,
    pub cs_gnss_vel: bool,
    pub fs_bad_mag_x: bool,
    pub fs_bad_mag_y: bool,
    pub fs_bad_mag_z: bool,
    pub fs_bad_hdg: bool,
    pub fs_bad_mag_decl: bool,
    pub fs_bad_airspeed: bool,
    pub fs_bad_sideslip: bool,
    pub fs_bad_optflow_x: bool,
    pub fs_bad_optflow_y: bool,
    pub fs_bad_acc_vertical: bool,
    pub fs_bad_acc_clipping: bool,
    pub reject_hor_vel: bool,
    pub reject_ver_vel: bool,
    pub reject_hor_pos: bool,
    pub reject_ver_pos: bool,
    pub reject_yaw: bool,
    pub reject_airspeed: bool,
    pub reject_sideslip: bool,
    pub reject_hagl: bool,
    pub reject_optflow_x: bool,
    pub reject_optflow_y: bool,
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of estimator_status_flags_s"]
        [::core::mem::size_of::<estimator_status_flags_s>() - 96usize];
    ["Alignment of estimator_status_flags_s"]
        [::core::mem::align_of::<estimator_status_flags_s>() - 8usize];
    ["Offset of field: estimator_status_flags_s::timestamp"]
        [::core::mem::offset_of!(estimator_status_flags_s, timestamp) - 0usize];
    ["Offset of field: estimator_status_flags_s::timestamp_sample"]
        [::core::mem::offset_of!(estimator_status_flags_s, timestamp_sample) - 8usize];
    ["Offset of field: estimator_status_flags_s::control_status_changes"]
        [::core::mem::offset_of!(estimator_status_flags_s, control_status_changes) - 16usize];
    ["Offset of field: estimator_status_flags_s::fault_status_changes"]
        [::core::mem::offset_of!(estimator_status_flags_s, fault_status_changes) - 20usize];
    ["Offset of field: estimator_status_flags_s::innovation_fault_status_changes"][::core::mem::offset_of!(
        estimator_status_flags_s,
        innovation_fault_status_changes
    ) - 24usize];
    ["Offset of field: estimator_status_flags_s::cs_tilt_align"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_tilt_align) - 28usize];
    ["Offset of field: estimator_status_flags_s::cs_yaw_align"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_yaw_align) - 29usize];
    ["Offset of field: estimator_status_flags_s::cs_gnss_pos"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_gnss_pos) - 30usize];
    ["Offset of field: estimator_status_flags_s::cs_opt_flow"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_opt_flow) - 31usize];
    ["Offset of field: estimator_status_flags_s::cs_mag_hdg"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_mag_hdg) - 32usize];
    ["Offset of field: estimator_status_flags_s::cs_mag_3d"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_mag_3d) - 33usize];
    ["Offset of field: estimator_status_flags_s::cs_mag_dec"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_mag_dec) - 34usize];
    ["Offset of field: estimator_status_flags_s::cs_in_air"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_in_air) - 35usize];
    ["Offset of field: estimator_status_flags_s::cs_wind"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_wind) - 36usize];
    ["Offset of field: estimator_status_flags_s::cs_baro_hgt"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_baro_hgt) - 37usize];
    ["Offset of field: estimator_status_flags_s::cs_rng_hgt"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_rng_hgt) - 38usize];
    ["Offset of field: estimator_status_flags_s::cs_gps_hgt"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_gps_hgt) - 39usize];
    ["Offset of field: estimator_status_flags_s::cs_ev_pos"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_ev_pos) - 40usize];
    ["Offset of field: estimator_status_flags_s::cs_ev_yaw"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_ev_yaw) - 41usize];
    ["Offset of field: estimator_status_flags_s::cs_ev_hgt"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_ev_hgt) - 42usize];
    ["Offset of field: estimator_status_flags_s::cs_fuse_beta"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_fuse_beta) - 43usize];
    ["Offset of field: estimator_status_flags_s::cs_mag_field_disturbed"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_mag_field_disturbed) - 44usize];
    ["Offset of field: estimator_status_flags_s::cs_fixed_wing"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_fixed_wing) - 45usize];
    ["Offset of field: estimator_status_flags_s::cs_mag_fault"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_mag_fault) - 46usize];
    ["Offset of field: estimator_status_flags_s::cs_fuse_aspd"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_fuse_aspd) - 47usize];
    ["Offset of field: estimator_status_flags_s::cs_gnd_effect"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_gnd_effect) - 48usize];
    ["Offset of field: estimator_status_flags_s::cs_rng_stuck"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_rng_stuck) - 49usize];
    ["Offset of field: estimator_status_flags_s::cs_gnss_yaw"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_gnss_yaw) - 50usize];
    ["Offset of field: estimator_status_flags_s::cs_mag_aligned_in_flight"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_mag_aligned_in_flight) - 51usize];
    ["Offset of field: estimator_status_flags_s::cs_ev_vel"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_ev_vel) - 52usize];
    ["Offset of field: estimator_status_flags_s::cs_synthetic_mag_z"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_synthetic_mag_z) - 53usize];
    ["Offset of field: estimator_status_flags_s::cs_vehicle_at_rest"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_vehicle_at_rest) - 54usize];
    ["Offset of field: estimator_status_flags_s::cs_gnss_yaw_fault"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_gnss_yaw_fault) - 55usize];
    ["Offset of field: estimator_status_flags_s::cs_rng_fault"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_rng_fault) - 56usize];
    ["Offset of field: estimator_status_flags_s::cs_inertial_dead_reckoning"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_inertial_dead_reckoning) - 57usize];
    ["Offset of field: estimator_status_flags_s::cs_wind_dead_reckoning"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_wind_dead_reckoning) - 58usize];
    ["Offset of field: estimator_status_flags_s::cs_rng_kin_consistent"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_rng_kin_consistent) - 59usize];
    ["Offset of field: estimator_status_flags_s::cs_fake_pos"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_fake_pos) - 60usize];
    ["Offset of field: estimator_status_flags_s::cs_fake_hgt"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_fake_hgt) - 61usize];
    ["Offset of field: estimator_status_flags_s::cs_gravity_vector"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_gravity_vector) - 62usize];
    ["Offset of field: estimator_status_flags_s::cs_mag"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_mag) - 63usize];
    ["Offset of field: estimator_status_flags_s::cs_ev_yaw_fault"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_ev_yaw_fault) - 64usize];
    ["Offset of field: estimator_status_flags_s::cs_mag_heading_consistent"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_mag_heading_consistent) - 65usize];
    ["Offset of field: estimator_status_flags_s::cs_aux_gpos"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_aux_gpos) - 66usize];
    ["Offset of field: estimator_status_flags_s::cs_rng_terrain"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_rng_terrain) - 67usize];
    ["Offset of field: estimator_status_flags_s::cs_opt_flow_terrain"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_opt_flow_terrain) - 68usize];
    ["Offset of field: estimator_status_flags_s::cs_valid_fake_pos"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_valid_fake_pos) - 69usize];
    ["Offset of field: estimator_status_flags_s::cs_constant_pos"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_constant_pos) - 70usize];
    ["Offset of field: estimator_status_flags_s::cs_baro_fault"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_baro_fault) - 71usize];
    ["Offset of field: estimator_status_flags_s::cs_gnss_vel"]
        [::core::mem::offset_of!(estimator_status_flags_s, cs_gnss_vel) - 72usize];
    ["Offset of field: estimator_status_flags_s::fs_bad_mag_x"]
        [::core::mem::offset_of!(estimator_status_flags_s, fs_bad_mag_x) - 73usize];
    ["Offset of field: estimator_status_flags_s::fs_bad_mag_y"]
        [::core::mem::offset_of!(estimator_status_flags_s, fs_bad_mag_y) - 74usize];
    ["Offset of field: estimator_status_flags_s::fs_bad_mag_z"]
        [::core::mem::offset_of!(estimator_status_flags_s, fs_bad_mag_z) - 75usize];
    ["Offset of field: estimator_status_flags_s::fs_bad_hdg"]
        [::core::mem::offset_of!(estimator_status_flags_s, fs_bad_hdg) - 76usize];
    ["Offset of field: estimator_status_flags_s::fs_bad_mag_decl"]
        [::core::mem::offset_of!(estimator_status_flags_s, fs_bad_mag_decl) - 77usize];
    ["Offset of field: estimator_status_flags_s::fs_bad_airspeed"]
        [::core::mem::offset_of!(estimator_status_flags_s, fs_bad_airspeed) - 78usize];
    ["Offset of field: estimator_status_flags_s::fs_bad_sideslip"]
        [::core::mem::offset_of!(estimator_status_flags_s, fs_bad_sideslip) - 79usize];
    ["Offset of field: estimator_status_flags_s::fs_bad_optflow_x"]
        [::core::mem::offset_of!(estimator_status_flags_s, fs_bad_optflow_x) - 80usize];
    ["Offset of field: estimator_status_flags_s::fs_bad_optflow_y"]
        [::core::mem::offset_of!(estimator_status_flags_s, fs_bad_optflow_y) - 81usize];
    ["Offset of field: estimator_status_flags_s::fs_bad_acc_vertical"]
        [::core::mem::offset_of!(estimator_status_flags_s, fs_bad_acc_vertical) - 82usize];
    ["Offset of field: estimator_status_flags_s::fs_bad_acc_clipping"]
        [::core::mem::offset_of!(estimator_status_flags_s, fs_bad_acc_clipping) - 83usize];
    ["Offset of field: estimator_status_flags_s::reject_hor_vel"]
        [::core::mem::offset_of!(estimator_status_flags_s, reject_hor_vel) - 84usize];
    ["Offset of field: estimator_status_flags_s::reject_ver_vel"]
        [::core::mem::offset_of!(estimator_status_flags_s, reject_ver_vel) - 85usize];
    ["Offset of field: estimator_status_flags_s::reject_hor_pos"]
        [::core::mem::offset_of!(estimator_status_flags_s, reject_hor_pos) - 86usize];
    ["Offset of field: estimator_status_flags_s::reject_ver_pos"]
        [::core::mem::offset_of!(estimator_status_flags_s, reject_ver_pos) - 87usize];
    ["Offset of field: estimator_status_flags_s::reject_yaw"]
        [::core::mem::offset_of!(estimator_status_flags_s, reject_yaw) - 88usize];
    ["Offset of field: estimator_status_flags_s::reject_airspeed"]
        [::core::mem::offset_of!(estimator_status_flags_s, reject_airspeed) - 89usize];
    ["Offset of field: estimator_status_flags_s::reject_sideslip"]
        [::core::mem::offset_of!(estimator_status_flags_s, reject_sideslip) - 90usize];
    ["Offset of field: estimator_status_flags_s::reject_hagl"]
        [::core::mem::offset_of!(estimator_status_flags_s, reject_hagl) - 91usize];
    ["Offset of field: estimator_status_flags_s::reject_optflow_x"]
        [::core::mem::offset_of!(estimator_status_flags_s, reject_optflow_x) - 92usize];
    ["Offset of field: estimator_status_flags_s::reject_optflow_y"]
        [::core::mem::offset_of!(estimator_status_flags_s, reject_optflow_y) - 93usize];
    ["Offset of field: estimator_status_flags_s::_padding0"]
        [::core::mem::offset_of!(estimator_status_flags_s, _padding0) - 94usize];
};
unsafe extern "C" {
    pub static __orb_estimator_status_flags: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct landing_gear_wheel_s {
    pub timestamp: u64,
    pub normalized_wheel_setpoint: f32,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of landing_gear_wheel_s"][::core::mem::size_of::<landing_gear_wheel_s>() - 16usize];
    ["Alignment of landing_gear_wheel_s"][::core::mem::align_of::<landing_gear_wheel_s>() - 8usize];
    ["Offset of field: landing_gear_wheel_s::timestamp"]
        [::core::mem::offset_of!(landing_gear_wheel_s, timestamp) - 0usize];
    ["Offset of field: landing_gear_wheel_s::normalized_wheel_setpoint"]
        [::core::mem::offset_of!(landing_gear_wheel_s, normalized_wheel_setpoint) - 8usize];
    ["Offset of field: landing_gear_wheel_s::_padding0"]
        [::core::mem::offset_of!(landing_gear_wheel_s, _padding0) - 12usize];
};
unsafe extern "C" {
    pub static __orb_landing_gear_wheel: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct geofence_result_s {
    pub timestamp: u64,
    pub geofence_max_dist_triggered: bool,
    pub geofence_max_alt_triggered: bool,
    pub geofence_custom_fence_triggered: bool,
    pub geofence_action: u8,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of geofence_result_s"][::core::mem::size_of::<geofence_result_s>() - 16usize];
    ["Alignment of geofence_result_s"][::core::mem::align_of::<geofence_result_s>() - 8usize];
    ["Offset of field: geofence_result_s::timestamp"]
        [::core::mem::offset_of!(geofence_result_s, timestamp) - 0usize];
    ["Offset of field: geofence_result_s::geofence_max_dist_triggered"]
        [::core::mem::offset_of!(geofence_result_s, geofence_max_dist_triggered) - 8usize];
    ["Offset of field: geofence_result_s::geofence_max_alt_triggered"]
        [::core::mem::offset_of!(geofence_result_s, geofence_max_alt_triggered) - 9usize];
    ["Offset of field: geofence_result_s::geofence_custom_fence_triggered"]
        [::core::mem::offset_of!(geofence_result_s, geofence_custom_fence_triggered) - 10usize];
    ["Offset of field: geofence_result_s::geofence_action"]
        [::core::mem::offset_of!(geofence_result_s, geofence_action) - 11usize];
    ["Offset of field: geofence_result_s::_padding0"]
        [::core::mem::offset_of!(geofence_result_s, _padding0) - 12usize];
};
unsafe extern "C" {
    pub static __orb_geofence_result: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct npfg_status_s {
    pub timestamp: u64,
    pub lat_accel: f32,
    pub lat_accel_ff: f32,
    pub bearing_feas: f32,
    pub bearing_feas_on_track: f32,
    pub signed_track_error: f32,
    pub track_error_bound: f32,
    pub airspeed_ref: f32,
    pub bearing: f32,
    pub heading_ref: f32,
    pub min_ground_speed_ref: f32,
    pub adapted_period: f32,
    pub p_gain: f32,
    pub time_const: f32,
    pub can_run_factor: f32,
    pub wind_est_valid: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of npfg_status_s"][::core::mem::size_of::<npfg_status_s>() - 72usize];
    ["Alignment of npfg_status_s"][::core::mem::align_of::<npfg_status_s>() - 8usize];
    ["Offset of field: npfg_status_s::timestamp"]
        [::core::mem::offset_of!(npfg_status_s, timestamp) - 0usize];
    ["Offset of field: npfg_status_s::lat_accel"]
        [::core::mem::offset_of!(npfg_status_s, lat_accel) - 8usize];
    ["Offset of field: npfg_status_s::lat_accel_ff"]
        [::core::mem::offset_of!(npfg_status_s, lat_accel_ff) - 12usize];
    ["Offset of field: npfg_status_s::bearing_feas"]
        [::core::mem::offset_of!(npfg_status_s, bearing_feas) - 16usize];
    ["Offset of field: npfg_status_s::bearing_feas_on_track"]
        [::core::mem::offset_of!(npfg_status_s, bearing_feas_on_track) - 20usize];
    ["Offset of field: npfg_status_s::signed_track_error"]
        [::core::mem::offset_of!(npfg_status_s, signed_track_error) - 24usize];
    ["Offset of field: npfg_status_s::track_error_bound"]
        [::core::mem::offset_of!(npfg_status_s, track_error_bound) - 28usize];
    ["Offset of field: npfg_status_s::airspeed_ref"]
        [::core::mem::offset_of!(npfg_status_s, airspeed_ref) - 32usize];
    ["Offset of field: npfg_status_s::bearing"]
        [::core::mem::offset_of!(npfg_status_s, bearing) - 36usize];
    ["Offset of field: npfg_status_s::heading_ref"]
        [::core::mem::offset_of!(npfg_status_s, heading_ref) - 40usize];
    ["Offset of field: npfg_status_s::min_ground_speed_ref"]
        [::core::mem::offset_of!(npfg_status_s, min_ground_speed_ref) - 44usize];
    ["Offset of field: npfg_status_s::adapted_period"]
        [::core::mem::offset_of!(npfg_status_s, adapted_period) - 48usize];
    ["Offset of field: npfg_status_s::p_gain"]
        [::core::mem::offset_of!(npfg_status_s, p_gain) - 52usize];
    ["Offset of field: npfg_status_s::time_const"]
        [::core::mem::offset_of!(npfg_status_s, time_const) - 56usize];
    ["Offset of field: npfg_status_s::can_run_factor"]
        [::core::mem::offset_of!(npfg_status_s, can_run_factor) - 60usize];
    ["Offset of field: npfg_status_s::wind_est_valid"]
        [::core::mem::offset_of!(npfg_status_s, wind_est_valid) - 64usize];
    ["Offset of field: npfg_status_s::_padding0"]
        [::core::mem::offset_of!(npfg_status_s, _padding0) - 65usize];
};
unsafe extern "C" {
    pub static __orb_npfg_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rc_parameter_map_s {
    pub timestamp: u64,
    pub param_index: [i32; 3usize],
    pub scale: [f32; 3usize],
    pub value0: [f32; 3usize],
    pub value_min: [f32; 3usize],
    pub value_max: [f32; 3usize],
    pub valid: [bool; 3usize],
    pub param_id: [::core::ffi::c_char; 51usize],
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rc_parameter_map_s"][::core::mem::size_of::<rc_parameter_map_s>() - 128usize];
    ["Alignment of rc_parameter_map_s"][::core::mem::align_of::<rc_parameter_map_s>() - 8usize];
    ["Offset of field: rc_parameter_map_s::timestamp"]
        [::core::mem::offset_of!(rc_parameter_map_s, timestamp) - 0usize];
    ["Offset of field: rc_parameter_map_s::param_index"]
        [::core::mem::offset_of!(rc_parameter_map_s, param_index) - 8usize];
    ["Offset of field: rc_parameter_map_s::scale"]
        [::core::mem::offset_of!(rc_parameter_map_s, scale) - 20usize];
    ["Offset of field: rc_parameter_map_s::value0"]
        [::core::mem::offset_of!(rc_parameter_map_s, value0) - 32usize];
    ["Offset of field: rc_parameter_map_s::value_min"]
        [::core::mem::offset_of!(rc_parameter_map_s, value_min) - 44usize];
    ["Offset of field: rc_parameter_map_s::value_max"]
        [::core::mem::offset_of!(rc_parameter_map_s, value_max) - 56usize];
    ["Offset of field: rc_parameter_map_s::valid"]
        [::core::mem::offset_of!(rc_parameter_map_s, valid) - 68usize];
    ["Offset of field: rc_parameter_map_s::param_id"]
        [::core::mem::offset_of!(rc_parameter_map_s, param_id) - 71usize];
    ["Offset of field: rc_parameter_map_s::_padding0"]
        [::core::mem::offset_of!(rc_parameter_map_s, _padding0) - 122usize];
};
unsafe extern "C" {
    pub static __orb_rc_parameter_map: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtl_time_estimate_s {
    pub timestamp: u64,
    pub time_estimate: f32,
    pub safe_time_estimate: f32,
    pub valid: bool,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rtl_time_estimate_s"][::core::mem::size_of::<rtl_time_estimate_s>() - 24usize];
    ["Alignment of rtl_time_estimate_s"][::core::mem::align_of::<rtl_time_estimate_s>() - 8usize];
    ["Offset of field: rtl_time_estimate_s::timestamp"]
        [::core::mem::offset_of!(rtl_time_estimate_s, timestamp) - 0usize];
    ["Offset of field: rtl_time_estimate_s::time_estimate"]
        [::core::mem::offset_of!(rtl_time_estimate_s, time_estimate) - 8usize];
    ["Offset of field: rtl_time_estimate_s::safe_time_estimate"]
        [::core::mem::offset_of!(rtl_time_estimate_s, safe_time_estimate) - 12usize];
    ["Offset of field: rtl_time_estimate_s::valid"]
        [::core::mem::offset_of!(rtl_time_estimate_s, valid) - 16usize];
    ["Offset of field: rtl_time_estimate_s::_padding0"]
        [::core::mem::offset_of!(rtl_time_estimate_s, _padding0) - 17usize];
};
unsafe extern "C" {
    pub static __orb_rtl_time_estimate: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct actuator_armed_s {
    pub timestamp: u64,
    pub armed: bool,
    pub prearmed: bool,
    pub ready_to_arm: bool,
    pub lockdown: bool,
    pub manual_lockdown: bool,
    pub force_failsafe: bool,
    pub in_esc_calibration_mode: bool,
    pub _padding0: [u8; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of actuator_armed_s"][::core::mem::size_of::<actuator_armed_s>() - 16usize];
    ["Alignment of actuator_armed_s"][::core::mem::align_of::<actuator_armed_s>() - 8usize];
    ["Offset of field: actuator_armed_s::timestamp"]
        [::core::mem::offset_of!(actuator_armed_s, timestamp) - 0usize];
    ["Offset of field: actuator_armed_s::armed"]
        [::core::mem::offset_of!(actuator_armed_s, armed) - 8usize];
    ["Offset of field: actuator_armed_s::prearmed"]
        [::core::mem::offset_of!(actuator_armed_s, prearmed) - 9usize];
    ["Offset of field: actuator_armed_s::ready_to_arm"]
        [::core::mem::offset_of!(actuator_armed_s, ready_to_arm) - 10usize];
    ["Offset of field: actuator_armed_s::lockdown"]
        [::core::mem::offset_of!(actuator_armed_s, lockdown) - 11usize];
    ["Offset of field: actuator_armed_s::manual_lockdown"]
        [::core::mem::offset_of!(actuator_armed_s, manual_lockdown) - 12usize];
    ["Offset of field: actuator_armed_s::force_failsafe"]
        [::core::mem::offset_of!(actuator_armed_s, force_failsafe) - 13usize];
    ["Offset of field: actuator_armed_s::in_esc_calibration_mode"]
        [::core::mem::offset_of!(actuator_armed_s, in_esc_calibration_mode) - 14usize];
    ["Offset of field: actuator_armed_s::_padding0"]
        [::core::mem::offset_of!(actuator_armed_s, _padding0) - 15usize];
};
unsafe extern "C" {
    pub static __orb_actuator_armed: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct actuator_controls_status_s {
    pub timestamp: u64,
    pub control_power: [f32; 3usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of actuator_controls_status_s"]
        [::core::mem::size_of::<actuator_controls_status_s>() - 24usize];
    ["Alignment of actuator_controls_status_s"]
        [::core::mem::align_of::<actuator_controls_status_s>() - 8usize];
    ["Offset of field: actuator_controls_status_s::timestamp"]
        [::core::mem::offset_of!(actuator_controls_status_s, timestamp) - 0usize];
    ["Offset of field: actuator_controls_status_s::control_power"]
        [::core::mem::offset_of!(actuator_controls_status_s, control_power) - 8usize];
    ["Offset of field: actuator_controls_status_s::_padding0"]
        [::core::mem::offset_of!(actuator_controls_status_s, _padding0) - 20usize];
};
unsafe extern "C" {
    pub static __orb_actuator_controls_status_0: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_actuator_controls_status_1: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct debug_vect_s {
    pub timestamp: u64,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub name: [::core::ffi::c_char; 10usize],
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of debug_vect_s"][::core::mem::size_of::<debug_vect_s>() - 32usize];
    ["Alignment of debug_vect_s"][::core::mem::align_of::<debug_vect_s>() - 8usize];
    ["Offset of field: debug_vect_s::timestamp"]
        [::core::mem::offset_of!(debug_vect_s, timestamp) - 0usize];
    ["Offset of field: debug_vect_s::x"][::core::mem::offset_of!(debug_vect_s, x) - 8usize];
    ["Offset of field: debug_vect_s::y"][::core::mem::offset_of!(debug_vect_s, y) - 12usize];
    ["Offset of field: debug_vect_s::z"][::core::mem::offset_of!(debug_vect_s, z) - 16usize];
    ["Offset of field: debug_vect_s::name"][::core::mem::offset_of!(debug_vect_s, name) - 20usize];
    ["Offset of field: debug_vect_s::_padding0"]
        [::core::mem::offset_of!(debug_vect_s, _padding0) - 30usize];
};
unsafe extern "C" {
    pub static __orb_debug_vect: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct distance_sensor_mode_change_request_s {
    pub timestamp: u64,
    pub request_on_off: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of distance_sensor_mode_change_request_s"]
        [::core::mem::size_of::<distance_sensor_mode_change_request_s>() - 16usize];
    ["Alignment of distance_sensor_mode_change_request_s"]
        [::core::mem::align_of::<distance_sensor_mode_change_request_s>() - 8usize];
    ["Offset of field: distance_sensor_mode_change_request_s::timestamp"]
        [::core::mem::offset_of!(distance_sensor_mode_change_request_s, timestamp) - 0usize];
    ["Offset of field: distance_sensor_mode_change_request_s::request_on_off"]
        [::core::mem::offset_of!(distance_sensor_mode_change_request_s, request_on_off) - 8usize];
    ["Offset of field: distance_sensor_mode_change_request_s::_padding0"]
        [::core::mem::offset_of!(distance_sensor_mode_change_request_s, _padding0) - 9usize];
};
unsafe extern "C" {
    pub static __orb_distance_sensor_mode_change_request: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parameter_set_value_request_s {
    pub timestamp: u64,
    pub int_value: i32,
    pub float_value: f32,
    pub parameter_index: u16,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of parameter_set_value_request_s"]
        [::core::mem::size_of::<parameter_set_value_request_s>() - 24usize];
    ["Alignment of parameter_set_value_request_s"]
        [::core::mem::align_of::<parameter_set_value_request_s>() - 8usize];
    ["Offset of field: parameter_set_value_request_s::timestamp"]
        [::core::mem::offset_of!(parameter_set_value_request_s, timestamp) - 0usize];
    ["Offset of field: parameter_set_value_request_s::int_value"]
        [::core::mem::offset_of!(parameter_set_value_request_s, int_value) - 8usize];
    ["Offset of field: parameter_set_value_request_s::float_value"]
        [::core::mem::offset_of!(parameter_set_value_request_s, float_value) - 12usize];
    ["Offset of field: parameter_set_value_request_s::parameter_index"]
        [::core::mem::offset_of!(parameter_set_value_request_s, parameter_index) - 16usize];
    ["Offset of field: parameter_set_value_request_s::_padding0"]
        [::core::mem::offset_of!(parameter_set_value_request_s, _padding0) - 18usize];
};
unsafe extern "C" {
    pub static __orb_parameter_set_value_request: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_parameter_remote_set_value_request: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_parameter_primary_set_value_request: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qshell_retval_s {
    pub timestamp: u64,
    pub return_value: i32,
    pub return_sequence: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qshell_retval_s"][::core::mem::size_of::<qshell_retval_s>() - 16usize];
    ["Alignment of qshell_retval_s"][::core::mem::align_of::<qshell_retval_s>() - 8usize];
    ["Offset of field: qshell_retval_s::timestamp"]
        [::core::mem::offset_of!(qshell_retval_s, timestamp) - 0usize];
    ["Offset of field: qshell_retval_s::return_value"]
        [::core::mem::offset_of!(qshell_retval_s, return_value) - 8usize];
    ["Offset of field: qshell_retval_s::return_sequence"]
        [::core::mem::offset_of!(qshell_retval_s, return_sequence) - 12usize];
};
unsafe extern "C" {
    pub static __orb_qshell_retval: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct geofence_status_s {
    pub timestamp: u64,
    pub geofence_id: u32,
    pub status: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of geofence_status_s"][::core::mem::size_of::<geofence_status_s>() - 16usize];
    ["Alignment of geofence_status_s"][::core::mem::align_of::<geofence_status_s>() - 8usize];
    ["Offset of field: geofence_status_s::timestamp"]
        [::core::mem::offset_of!(geofence_status_s, timestamp) - 0usize];
    ["Offset of field: geofence_status_s::geofence_id"]
        [::core::mem::offset_of!(geofence_status_s, geofence_id) - 8usize];
    ["Offset of field: geofence_status_s::status"]
        [::core::mem::offset_of!(geofence_status_s, status) - 12usize];
    ["Offset of field: geofence_status_s::_padding0"]
        [::core::mem::offset_of!(geofence_status_s, _padding0) - 13usize];
};
unsafe extern "C" {
    pub static __orb_geofence_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct estimator_bias_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub device_id: u32,
    pub bias: f32,
    pub bias_var: f32,
    pub innov: f32,
    pub innov_var: f32,
    pub innov_test_ratio: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of estimator_bias_s"][::core::mem::size_of::<estimator_bias_s>() - 40usize];
    ["Alignment of estimator_bias_s"][::core::mem::align_of::<estimator_bias_s>() - 8usize];
    ["Offset of field: estimator_bias_s::timestamp"]
        [::core::mem::offset_of!(estimator_bias_s, timestamp) - 0usize];
    ["Offset of field: estimator_bias_s::timestamp_sample"]
        [::core::mem::offset_of!(estimator_bias_s, timestamp_sample) - 8usize];
    ["Offset of field: estimator_bias_s::device_id"]
        [::core::mem::offset_of!(estimator_bias_s, device_id) - 16usize];
    ["Offset of field: estimator_bias_s::bias"]
        [::core::mem::offset_of!(estimator_bias_s, bias) - 20usize];
    ["Offset of field: estimator_bias_s::bias_var"]
        [::core::mem::offset_of!(estimator_bias_s, bias_var) - 24usize];
    ["Offset of field: estimator_bias_s::innov"]
        [::core::mem::offset_of!(estimator_bias_s, innov) - 28usize];
    ["Offset of field: estimator_bias_s::innov_var"]
        [::core::mem::offset_of!(estimator_bias_s, innov_var) - 32usize];
    ["Offset of field: estimator_bias_s::innov_test_ratio"]
        [::core::mem::offset_of!(estimator_bias_s, innov_test_ratio) - 36usize];
};
unsafe extern "C" {
    pub static __orb_estimator_baro_bias: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_gnss_hgt_bias: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_accel_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub device_id: u32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub temperature: f32,
    pub error_count: u32,
    pub clip_counter: [u8; 3usize],
    pub samples: u8,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sensor_accel_s"][::core::mem::size_of::<sensor_accel_s>() - 48usize];
    ["Alignment of sensor_accel_s"][::core::mem::align_of::<sensor_accel_s>() - 8usize];
    ["Offset of field: sensor_accel_s::timestamp"]
        [::core::mem::offset_of!(sensor_accel_s, timestamp) - 0usize];
    ["Offset of field: sensor_accel_s::timestamp_sample"]
        [::core::mem::offset_of!(sensor_accel_s, timestamp_sample) - 8usize];
    ["Offset of field: sensor_accel_s::device_id"]
        [::core::mem::offset_of!(sensor_accel_s, device_id) - 16usize];
    ["Offset of field: sensor_accel_s::x"][::core::mem::offset_of!(sensor_accel_s, x) - 20usize];
    ["Offset of field: sensor_accel_s::y"][::core::mem::offset_of!(sensor_accel_s, y) - 24usize];
    ["Offset of field: sensor_accel_s::z"][::core::mem::offset_of!(sensor_accel_s, z) - 28usize];
    ["Offset of field: sensor_accel_s::temperature"]
        [::core::mem::offset_of!(sensor_accel_s, temperature) - 32usize];
    ["Offset of field: sensor_accel_s::error_count"]
        [::core::mem::offset_of!(sensor_accel_s, error_count) - 36usize];
    ["Offset of field: sensor_accel_s::clip_counter"]
        [::core::mem::offset_of!(sensor_accel_s, clip_counter) - 40usize];
    ["Offset of field: sensor_accel_s::samples"]
        [::core::mem::offset_of!(sensor_accel_s, samples) - 43usize];
    ["Offset of field: sensor_accel_s::_padding0"]
        [::core::mem::offset_of!(sensor_accel_s, _padding0) - 44usize];
};
unsafe extern "C" {
    pub static __orb_sensor_accel: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cellular_status_s {
    pub timestamp: u64,
    pub status: u16,
    pub mcc: u16,
    pub mnc: u16,
    pub lac: u16,
    pub failure_reason: u8,
    pub type_: u8,
    pub quality: u8,
    pub _padding0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cellular_status_s"][::core::mem::size_of::<cellular_status_s>() - 24usize];
    ["Alignment of cellular_status_s"][::core::mem::align_of::<cellular_status_s>() - 8usize];
    ["Offset of field: cellular_status_s::timestamp"]
        [::core::mem::offset_of!(cellular_status_s, timestamp) - 0usize];
    ["Offset of field: cellular_status_s::status"]
        [::core::mem::offset_of!(cellular_status_s, status) - 8usize];
    ["Offset of field: cellular_status_s::mcc"]
        [::core::mem::offset_of!(cellular_status_s, mcc) - 10usize];
    ["Offset of field: cellular_status_s::mnc"]
        [::core::mem::offset_of!(cellular_status_s, mnc) - 12usize];
    ["Offset of field: cellular_status_s::lac"]
        [::core::mem::offset_of!(cellular_status_s, lac) - 14usize];
    ["Offset of field: cellular_status_s::failure_reason"]
        [::core::mem::offset_of!(cellular_status_s, failure_reason) - 16usize];
    ["Offset of field: cellular_status_s::type_"]
        [::core::mem::offset_of!(cellular_status_s, type_) - 17usize];
    ["Offset of field: cellular_status_s::quality"]
        [::core::mem::offset_of!(cellular_status_s, quality) - 18usize];
    ["Offset of field: cellular_status_s::_padding0"]
        [::core::mem::offset_of!(cellular_status_s, _padding0) - 19usize];
};
unsafe extern "C" {
    pub static __orb_cellular_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gimbal_manager_set_attitude_s {
    pub timestamp: u64,
    pub flags: u32,
    pub q: [f32; 4usize],
    pub angular_velocity_x: f32,
    pub angular_velocity_y: f32,
    pub angular_velocity_z: f32,
    pub origin_sysid: u8,
    pub origin_compid: u8,
    pub target_system: u8,
    pub target_component: u8,
    pub gimbal_device_id: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gimbal_manager_set_attitude_s"]
        [::core::mem::size_of::<gimbal_manager_set_attitude_s>() - 48usize];
    ["Alignment of gimbal_manager_set_attitude_s"]
        [::core::mem::align_of::<gimbal_manager_set_attitude_s>() - 8usize];
    ["Offset of field: gimbal_manager_set_attitude_s::timestamp"]
        [::core::mem::offset_of!(gimbal_manager_set_attitude_s, timestamp) - 0usize];
    ["Offset of field: gimbal_manager_set_attitude_s::flags"]
        [::core::mem::offset_of!(gimbal_manager_set_attitude_s, flags) - 8usize];
    ["Offset of field: gimbal_manager_set_attitude_s::q"]
        [::core::mem::offset_of!(gimbal_manager_set_attitude_s, q) - 12usize];
    ["Offset of field: gimbal_manager_set_attitude_s::angular_velocity_x"]
        [::core::mem::offset_of!(gimbal_manager_set_attitude_s, angular_velocity_x) - 28usize];
    ["Offset of field: gimbal_manager_set_attitude_s::angular_velocity_y"]
        [::core::mem::offset_of!(gimbal_manager_set_attitude_s, angular_velocity_y) - 32usize];
    ["Offset of field: gimbal_manager_set_attitude_s::angular_velocity_z"]
        [::core::mem::offset_of!(gimbal_manager_set_attitude_s, angular_velocity_z) - 36usize];
    ["Offset of field: gimbal_manager_set_attitude_s::origin_sysid"]
        [::core::mem::offset_of!(gimbal_manager_set_attitude_s, origin_sysid) - 40usize];
    ["Offset of field: gimbal_manager_set_attitude_s::origin_compid"]
        [::core::mem::offset_of!(gimbal_manager_set_attitude_s, origin_compid) - 41usize];
    ["Offset of field: gimbal_manager_set_attitude_s::target_system"]
        [::core::mem::offset_of!(gimbal_manager_set_attitude_s, target_system) - 42usize];
    ["Offset of field: gimbal_manager_set_attitude_s::target_component"]
        [::core::mem::offset_of!(gimbal_manager_set_attitude_s, target_component) - 43usize];
    ["Offset of field: gimbal_manager_set_attitude_s::gimbal_device_id"]
        [::core::mem::offset_of!(gimbal_manager_set_attitude_s, gimbal_device_id) - 44usize];
    ["Offset of field: gimbal_manager_set_attitude_s::_padding0"]
        [::core::mem::offset_of!(gimbal_manager_set_attitude_s, _padding0) - 45usize];
};
unsafe extern "C" {
    pub static __orb_gimbal_manager_set_attitude: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct orb_test_large_s {
    pub timestamp: u64,
    pub val: i32,
    pub junk: [u8; 512usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of orb_test_large_s"][::core::mem::size_of::<orb_test_large_s>() - 528usize];
    ["Alignment of orb_test_large_s"][::core::mem::align_of::<orb_test_large_s>() - 8usize];
    ["Offset of field: orb_test_large_s::timestamp"]
        [::core::mem::offset_of!(orb_test_large_s, timestamp) - 0usize];
    ["Offset of field: orb_test_large_s::val"]
        [::core::mem::offset_of!(orb_test_large_s, val) - 8usize];
    ["Offset of field: orb_test_large_s::junk"]
        [::core::mem::offset_of!(orb_test_large_s, junk) - 12usize];
    ["Offset of field: orb_test_large_s::_padding0"]
        [::core::mem::offset_of!(orb_test_large_s, _padding0) - 524usize];
};
unsafe extern "C" {
    pub static __orb_orb_test_large: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct airspeed_wind_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub windspeed_north: f32,
    pub windspeed_east: f32,
    pub variance_north: f32,
    pub variance_east: f32,
    pub tas_innov: f32,
    pub tas_innov_var: f32,
    pub tas_scale_raw: f32,
    pub tas_scale_raw_var: f32,
    pub tas_scale_validated: f32,
    pub beta_innov: f32,
    pub beta_innov_var: f32,
    pub source: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of airspeed_wind_s"][::core::mem::size_of::<airspeed_wind_s>() - 64usize];
    ["Alignment of airspeed_wind_s"][::core::mem::align_of::<airspeed_wind_s>() - 8usize];
    ["Offset of field: airspeed_wind_s::timestamp"]
        [::core::mem::offset_of!(airspeed_wind_s, timestamp) - 0usize];
    ["Offset of field: airspeed_wind_s::timestamp_sample"]
        [::core::mem::offset_of!(airspeed_wind_s, timestamp_sample) - 8usize];
    ["Offset of field: airspeed_wind_s::windspeed_north"]
        [::core::mem::offset_of!(airspeed_wind_s, windspeed_north) - 16usize];
    ["Offset of field: airspeed_wind_s::windspeed_east"]
        [::core::mem::offset_of!(airspeed_wind_s, windspeed_east) - 20usize];
    ["Offset of field: airspeed_wind_s::variance_north"]
        [::core::mem::offset_of!(airspeed_wind_s, variance_north) - 24usize];
    ["Offset of field: airspeed_wind_s::variance_east"]
        [::core::mem::offset_of!(airspeed_wind_s, variance_east) - 28usize];
    ["Offset of field: airspeed_wind_s::tas_innov"]
        [::core::mem::offset_of!(airspeed_wind_s, tas_innov) - 32usize];
    ["Offset of field: airspeed_wind_s::tas_innov_var"]
        [::core::mem::offset_of!(airspeed_wind_s, tas_innov_var) - 36usize];
    ["Offset of field: airspeed_wind_s::tas_scale_raw"]
        [::core::mem::offset_of!(airspeed_wind_s, tas_scale_raw) - 40usize];
    ["Offset of field: airspeed_wind_s::tas_scale_raw_var"]
        [::core::mem::offset_of!(airspeed_wind_s, tas_scale_raw_var) - 44usize];
    ["Offset of field: airspeed_wind_s::tas_scale_validated"]
        [::core::mem::offset_of!(airspeed_wind_s, tas_scale_validated) - 48usize];
    ["Offset of field: airspeed_wind_s::beta_innov"]
        [::core::mem::offset_of!(airspeed_wind_s, beta_innov) - 52usize];
    ["Offset of field: airspeed_wind_s::beta_innov_var"]
        [::core::mem::offset_of!(airspeed_wind_s, beta_innov_var) - 56usize];
    ["Offset of field: airspeed_wind_s::source"]
        [::core::mem::offset_of!(airspeed_wind_s, source) - 60usize];
    ["Offset of field: airspeed_wind_s::_padding0"]
        [::core::mem::offset_of!(airspeed_wind_s, _padding0) - 61usize];
};
unsafe extern "C" {
    pub static __orb_airspeed_wind: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct message_format_request_s {
    pub timestamp: u64,
    pub protocol_version: u16,
    pub topic_name: [::core::ffi::c_char; 50usize],
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of message_format_request_s"]
        [::core::mem::size_of::<message_format_request_s>() - 64usize];
    ["Alignment of message_format_request_s"]
        [::core::mem::align_of::<message_format_request_s>() - 8usize];
    ["Offset of field: message_format_request_s::timestamp"]
        [::core::mem::offset_of!(message_format_request_s, timestamp) - 0usize];
    ["Offset of field: message_format_request_s::protocol_version"]
        [::core::mem::offset_of!(message_format_request_s, protocol_version) - 8usize];
    ["Offset of field: message_format_request_s::topic_name"]
        [::core::mem::offset_of!(message_format_request_s, topic_name) - 10usize];
    ["Offset of field: message_format_request_s::_padding0"]
        [::core::mem::offset_of!(message_format_request_s, _padding0) - 60usize];
};
unsafe extern "C" {
    pub static __orb_message_format_request: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_control_mode_s {
    pub timestamp: u64,
    pub flag_armed: bool,
    pub flag_multicopter_position_control_enabled: bool,
    pub flag_control_manual_enabled: bool,
    pub flag_control_auto_enabled: bool,
    pub flag_control_offboard_enabled: bool,
    pub flag_control_position_enabled: bool,
    pub flag_control_velocity_enabled: bool,
    pub flag_control_altitude_enabled: bool,
    pub flag_control_climb_rate_enabled: bool,
    pub flag_control_acceleration_enabled: bool,
    pub flag_control_attitude_enabled: bool,
    pub flag_control_rates_enabled: bool,
    pub flag_control_allocation_enabled: bool,
    pub flag_control_termination_enabled: bool,
    pub source_id: u8,
    pub _padding0: [u8; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_control_mode_s"][::core::mem::size_of::<vehicle_control_mode_s>() - 24usize];
    ["Alignment of vehicle_control_mode_s"]
        [::core::mem::align_of::<vehicle_control_mode_s>() - 8usize];
    ["Offset of field: vehicle_control_mode_s::timestamp"]
        [::core::mem::offset_of!(vehicle_control_mode_s, timestamp) - 0usize];
    ["Offset of field: vehicle_control_mode_s::flag_armed"]
        [::core::mem::offset_of!(vehicle_control_mode_s, flag_armed) - 8usize];
    ["Offset of field: vehicle_control_mode_s::flag_multicopter_position_control_enabled"][::core::mem::offset_of!(
        vehicle_control_mode_s,
        flag_multicopter_position_control_enabled
    )
        - 9usize];
    ["Offset of field: vehicle_control_mode_s::flag_control_manual_enabled"]
        [::core::mem::offset_of!(vehicle_control_mode_s, flag_control_manual_enabled) - 10usize];
    ["Offset of field: vehicle_control_mode_s::flag_control_auto_enabled"]
        [::core::mem::offset_of!(vehicle_control_mode_s, flag_control_auto_enabled) - 11usize];
    ["Offset of field: vehicle_control_mode_s::flag_control_offboard_enabled"]
        [::core::mem::offset_of!(vehicle_control_mode_s, flag_control_offboard_enabled) - 12usize];
    ["Offset of field: vehicle_control_mode_s::flag_control_position_enabled"]
        [::core::mem::offset_of!(vehicle_control_mode_s, flag_control_position_enabled) - 13usize];
    ["Offset of field: vehicle_control_mode_s::flag_control_velocity_enabled"]
        [::core::mem::offset_of!(vehicle_control_mode_s, flag_control_velocity_enabled) - 14usize];
    ["Offset of field: vehicle_control_mode_s::flag_control_altitude_enabled"]
        [::core::mem::offset_of!(vehicle_control_mode_s, flag_control_altitude_enabled) - 15usize];
    ["Offset of field: vehicle_control_mode_s::flag_control_climb_rate_enabled"][::core::mem::offset_of!(
        vehicle_control_mode_s,
        flag_control_climb_rate_enabled
    ) - 16usize];
    ["Offset of field: vehicle_control_mode_s::flag_control_acceleration_enabled"][::core::mem::offset_of!(
        vehicle_control_mode_s,
        flag_control_acceleration_enabled
    ) - 17usize];
    ["Offset of field: vehicle_control_mode_s::flag_control_attitude_enabled"]
        [::core::mem::offset_of!(vehicle_control_mode_s, flag_control_attitude_enabled) - 18usize];
    ["Offset of field: vehicle_control_mode_s::flag_control_rates_enabled"]
        [::core::mem::offset_of!(vehicle_control_mode_s, flag_control_rates_enabled) - 19usize];
    ["Offset of field: vehicle_control_mode_s::flag_control_allocation_enabled"][::core::mem::offset_of!(
        vehicle_control_mode_s,
        flag_control_allocation_enabled
    ) - 20usize];
    ["Offset of field: vehicle_control_mode_s::flag_control_termination_enabled"][::core::mem::offset_of!(
        vehicle_control_mode_s,
        flag_control_termination_enabled
    ) - 21usize];
    ["Offset of field: vehicle_control_mode_s::source_id"]
        [::core::mem::offset_of!(vehicle_control_mode_s, source_id) - 22usize];
    ["Offset of field: vehicle_control_mode_s::_padding0"]
        [::core::mem::offset_of!(vehicle_control_mode_s, _padding0) - 23usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_control_mode: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_config_control_setpoints: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct button_event_s {
    pub timestamp: u64,
    pub triggered: bool,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of button_event_s"][::core::mem::size_of::<button_event_s>() - 16usize];
    ["Alignment of button_event_s"][::core::mem::align_of::<button_event_s>() - 8usize];
    ["Offset of field: button_event_s::timestamp"]
        [::core::mem::offset_of!(button_event_s, timestamp) - 0usize];
    ["Offset of field: button_event_s::triggered"]
        [::core::mem::offset_of!(button_event_s, triggered) - 8usize];
    ["Offset of field: button_event_s::_padding0"]
        [::core::mem::offset_of!(button_event_s, _padding0) - 9usize];
};
unsafe extern "C" {
    pub static __orb_button_event: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_safety_button: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct airspeed_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub indicated_airspeed_m_s: f32,
    pub true_airspeed_m_s: f32,
    pub confidence: f32,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of airspeed_s"][::core::mem::size_of::<airspeed_s>() - 32usize];
    ["Alignment of airspeed_s"][::core::mem::align_of::<airspeed_s>() - 8usize];
    ["Offset of field: airspeed_s::timestamp"]
        [::core::mem::offset_of!(airspeed_s, timestamp) - 0usize];
    ["Offset of field: airspeed_s::timestamp_sample"]
        [::core::mem::offset_of!(airspeed_s, timestamp_sample) - 8usize];
    ["Offset of field: airspeed_s::indicated_airspeed_m_s"]
        [::core::mem::offset_of!(airspeed_s, indicated_airspeed_m_s) - 16usize];
    ["Offset of field: airspeed_s::true_airspeed_m_s"]
        [::core::mem::offset_of!(airspeed_s, true_airspeed_m_s) - 20usize];
    ["Offset of field: airspeed_s::confidence"]
        [::core::mem::offset_of!(airspeed_s, confidence) - 24usize];
    ["Offset of field: airspeed_s::_padding0"]
        [::core::mem::offset_of!(airspeed_s, _padding0) - 28usize];
};
unsafe extern "C" {
    pub static __orb_airspeed: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pps_capture_s {
    pub timestamp: u64,
    pub rtc_timestamp: u64,
    pub pps_rate_exceeded_counter: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pps_capture_s"][::core::mem::size_of::<pps_capture_s>() - 24usize];
    ["Alignment of pps_capture_s"][::core::mem::align_of::<pps_capture_s>() - 8usize];
    ["Offset of field: pps_capture_s::timestamp"]
        [::core::mem::offset_of!(pps_capture_s, timestamp) - 0usize];
    ["Offset of field: pps_capture_s::rtc_timestamp"]
        [::core::mem::offset_of!(pps_capture_s, rtc_timestamp) - 8usize];
    ["Offset of field: pps_capture_s::pps_rate_exceeded_counter"]
        [::core::mem::offset_of!(pps_capture_s, pps_rate_exceeded_counter) - 16usize];
    ["Offset of field: pps_capture_s::_padding0"]
        [::core::mem::offset_of!(pps_capture_s, _padding0) - 17usize];
};
unsafe extern "C" {
    pub static __orb_pps_capture: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parameter_set_used_request_s {
    pub timestamp: u64,
    pub parameter_index: u16,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of parameter_set_used_request_s"]
        [::core::mem::size_of::<parameter_set_used_request_s>() - 16usize];
    ["Alignment of parameter_set_used_request_s"]
        [::core::mem::align_of::<parameter_set_used_request_s>() - 8usize];
    ["Offset of field: parameter_set_used_request_s::timestamp"]
        [::core::mem::offset_of!(parameter_set_used_request_s, timestamp) - 0usize];
    ["Offset of field: parameter_set_used_request_s::parameter_index"]
        [::core::mem::offset_of!(parameter_set_used_request_s, parameter_index) - 8usize];
    ["Offset of field: parameter_set_used_request_s::_padding0"]
        [::core::mem::offset_of!(parameter_set_used_request_s, _padding0) - 10usize];
};
unsafe extern "C" {
    pub static __orb_parameter_set_used_request: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uavcan_parameter_value_s {
    pub timestamp: u64,
    pub int_value: i64,
    pub real_value: f32,
    pub param_index: i16,
    pub param_count: u16,
    pub node_id: u8,
    pub param_id: [::core::ffi::c_char; 17usize],
    pub param_type: u8,
    pub _padding0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uavcan_parameter_value_s"]
        [::core::mem::size_of::<uavcan_parameter_value_s>() - 48usize];
    ["Alignment of uavcan_parameter_value_s"]
        [::core::mem::align_of::<uavcan_parameter_value_s>() - 8usize];
    ["Offset of field: uavcan_parameter_value_s::timestamp"]
        [::core::mem::offset_of!(uavcan_parameter_value_s, timestamp) - 0usize];
    ["Offset of field: uavcan_parameter_value_s::int_value"]
        [::core::mem::offset_of!(uavcan_parameter_value_s, int_value) - 8usize];
    ["Offset of field: uavcan_parameter_value_s::real_value"]
        [::core::mem::offset_of!(uavcan_parameter_value_s, real_value) - 16usize];
    ["Offset of field: uavcan_parameter_value_s::param_index"]
        [::core::mem::offset_of!(uavcan_parameter_value_s, param_index) - 20usize];
    ["Offset of field: uavcan_parameter_value_s::param_count"]
        [::core::mem::offset_of!(uavcan_parameter_value_s, param_count) - 22usize];
    ["Offset of field: uavcan_parameter_value_s::node_id"]
        [::core::mem::offset_of!(uavcan_parameter_value_s, node_id) - 24usize];
    ["Offset of field: uavcan_parameter_value_s::param_id"]
        [::core::mem::offset_of!(uavcan_parameter_value_s, param_id) - 25usize];
    ["Offset of field: uavcan_parameter_value_s::param_type"]
        [::core::mem::offset_of!(uavcan_parameter_value_s, param_type) - 42usize];
    ["Offset of field: uavcan_parameter_value_s::_padding0"]
        [::core::mem::offset_of!(uavcan_parameter_value_s, _padding0) - 43usize];
};
unsafe extern "C" {
    pub static __orb_uavcan_parameter_value: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct actuator_test_s {
    pub timestamp: u64,
    pub value: f32,
    pub timeout_ms: u32,
    pub function: u16,
    pub action: u8,
    pub _padding0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of actuator_test_s"][::core::mem::size_of::<actuator_test_s>() - 24usize];
    ["Alignment of actuator_test_s"][::core::mem::align_of::<actuator_test_s>() - 8usize];
    ["Offset of field: actuator_test_s::timestamp"]
        [::core::mem::offset_of!(actuator_test_s, timestamp) - 0usize];
    ["Offset of field: actuator_test_s::value"]
        [::core::mem::offset_of!(actuator_test_s, value) - 8usize];
    ["Offset of field: actuator_test_s::timeout_ms"]
        [::core::mem::offset_of!(actuator_test_s, timeout_ms) - 12usize];
    ["Offset of field: actuator_test_s::function"]
        [::core::mem::offset_of!(actuator_test_s, function) - 16usize];
    ["Offset of field: actuator_test_s::action"]
        [::core::mem::offset_of!(actuator_test_s, action) - 18usize];
    ["Offset of field: actuator_test_s::_padding0"]
        [::core::mem::offset_of!(actuator_test_s, _padding0) - 19usize];
};
unsafe extern "C" {
    pub static __orb_actuator_test: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct debug_value_s {
    pub timestamp: u64,
    pub value: f32,
    pub ind: i8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of debug_value_s"][::core::mem::size_of::<debug_value_s>() - 16usize];
    ["Alignment of debug_value_s"][::core::mem::align_of::<debug_value_s>() - 8usize];
    ["Offset of field: debug_value_s::timestamp"]
        [::core::mem::offset_of!(debug_value_s, timestamp) - 0usize];
    ["Offset of field: debug_value_s::value"]
        [::core::mem::offset_of!(debug_value_s, value) - 8usize];
    ["Offset of field: debug_value_s::ind"][::core::mem::offset_of!(debug_value_s, ind) - 12usize];
    ["Offset of field: debug_value_s::_padding0"]
        [::core::mem::offset_of!(debug_value_s, _padding0) - 13usize];
};
unsafe extern "C" {
    pub static __orb_debug_value: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct px4io_status_s {
    pub timestamp: u64,
    pub voltage_v: f32,
    pub rssi_v: f32,
    pub free_memory_bytes: u16,
    pub pwm: [u16; 8usize],
    pub pwm_disarmed: [u16; 8usize],
    pub pwm_failsafe: [u16; 8usize],
    pub pwm_rate_hz: [u16; 8usize],
    pub raw_inputs: [u16; 18usize],
    pub status_arm_sync: bool,
    pub status_failsafe: bool,
    pub status_fmu_initialized: bool,
    pub status_fmu_ok: bool,
    pub status_init_ok: bool,
    pub status_outputs_armed: bool,
    pub status_raw_pwm: bool,
    pub status_rc_ok: bool,
    pub status_rc_dsm: bool,
    pub status_rc_ppm: bool,
    pub status_rc_sbus: bool,
    pub status_rc_st24: bool,
    pub status_rc_sumd: bool,
    pub status_safety_button_event: bool,
    pub alarm_pwm_error: bool,
    pub alarm_rc_lost: bool,
    pub arming_failsafe_custom: bool,
    pub arming_fmu_armed: bool,
    pub arming_fmu_prearmed: bool,
    pub arming_force_failsafe: bool,
    pub arming_io_arm_ok: bool,
    pub arming_lockdown: bool,
    pub arming_termination_failsafe: bool,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of px4io_status_s"][::core::mem::size_of::<px4io_status_s>() - 144usize];
    ["Alignment of px4io_status_s"][::core::mem::align_of::<px4io_status_s>() - 8usize];
    ["Offset of field: px4io_status_s::timestamp"]
        [::core::mem::offset_of!(px4io_status_s, timestamp) - 0usize];
    ["Offset of field: px4io_status_s::voltage_v"]
        [::core::mem::offset_of!(px4io_status_s, voltage_v) - 8usize];
    ["Offset of field: px4io_status_s::rssi_v"]
        [::core::mem::offset_of!(px4io_status_s, rssi_v) - 12usize];
    ["Offset of field: px4io_status_s::free_memory_bytes"]
        [::core::mem::offset_of!(px4io_status_s, free_memory_bytes) - 16usize];
    ["Offset of field: px4io_status_s::pwm"]
        [::core::mem::offset_of!(px4io_status_s, pwm) - 18usize];
    ["Offset of field: px4io_status_s::pwm_disarmed"]
        [::core::mem::offset_of!(px4io_status_s, pwm_disarmed) - 34usize];
    ["Offset of field: px4io_status_s::pwm_failsafe"]
        [::core::mem::offset_of!(px4io_status_s, pwm_failsafe) - 50usize];
    ["Offset of field: px4io_status_s::pwm_rate_hz"]
        [::core::mem::offset_of!(px4io_status_s, pwm_rate_hz) - 66usize];
    ["Offset of field: px4io_status_s::raw_inputs"]
        [::core::mem::offset_of!(px4io_status_s, raw_inputs) - 82usize];
    ["Offset of field: px4io_status_s::status_arm_sync"]
        [::core::mem::offset_of!(px4io_status_s, status_arm_sync) - 118usize];
    ["Offset of field: px4io_status_s::status_failsafe"]
        [::core::mem::offset_of!(px4io_status_s, status_failsafe) - 119usize];
    ["Offset of field: px4io_status_s::status_fmu_initialized"]
        [::core::mem::offset_of!(px4io_status_s, status_fmu_initialized) - 120usize];
    ["Offset of field: px4io_status_s::status_fmu_ok"]
        [::core::mem::offset_of!(px4io_status_s, status_fmu_ok) - 121usize];
    ["Offset of field: px4io_status_s::status_init_ok"]
        [::core::mem::offset_of!(px4io_status_s, status_init_ok) - 122usize];
    ["Offset of field: px4io_status_s::status_outputs_armed"]
        [::core::mem::offset_of!(px4io_status_s, status_outputs_armed) - 123usize];
    ["Offset of field: px4io_status_s::status_raw_pwm"]
        [::core::mem::offset_of!(px4io_status_s, status_raw_pwm) - 124usize];
    ["Offset of field: px4io_status_s::status_rc_ok"]
        [::core::mem::offset_of!(px4io_status_s, status_rc_ok) - 125usize];
    ["Offset of field: px4io_status_s::status_rc_dsm"]
        [::core::mem::offset_of!(px4io_status_s, status_rc_dsm) - 126usize];
    ["Offset of field: px4io_status_s::status_rc_ppm"]
        [::core::mem::offset_of!(px4io_status_s, status_rc_ppm) - 127usize];
    ["Offset of field: px4io_status_s::status_rc_sbus"]
        [::core::mem::offset_of!(px4io_status_s, status_rc_sbus) - 128usize];
    ["Offset of field: px4io_status_s::status_rc_st24"]
        [::core::mem::offset_of!(px4io_status_s, status_rc_st24) - 129usize];
    ["Offset of field: px4io_status_s::status_rc_sumd"]
        [::core::mem::offset_of!(px4io_status_s, status_rc_sumd) - 130usize];
    ["Offset of field: px4io_status_s::status_safety_button_event"]
        [::core::mem::offset_of!(px4io_status_s, status_safety_button_event) - 131usize];
    ["Offset of field: px4io_status_s::alarm_pwm_error"]
        [::core::mem::offset_of!(px4io_status_s, alarm_pwm_error) - 132usize];
    ["Offset of field: px4io_status_s::alarm_rc_lost"]
        [::core::mem::offset_of!(px4io_status_s, alarm_rc_lost) - 133usize];
    ["Offset of field: px4io_status_s::arming_failsafe_custom"]
        [::core::mem::offset_of!(px4io_status_s, arming_failsafe_custom) - 134usize];
    ["Offset of field: px4io_status_s::arming_fmu_armed"]
        [::core::mem::offset_of!(px4io_status_s, arming_fmu_armed) - 135usize];
    ["Offset of field: px4io_status_s::arming_fmu_prearmed"]
        [::core::mem::offset_of!(px4io_status_s, arming_fmu_prearmed) - 136usize];
    ["Offset of field: px4io_status_s::arming_force_failsafe"]
        [::core::mem::offset_of!(px4io_status_s, arming_force_failsafe) - 137usize];
    ["Offset of field: px4io_status_s::arming_io_arm_ok"]
        [::core::mem::offset_of!(px4io_status_s, arming_io_arm_ok) - 138usize];
    ["Offset of field: px4io_status_s::arming_lockdown"]
        [::core::mem::offset_of!(px4io_status_s, arming_lockdown) - 139usize];
    ["Offset of field: px4io_status_s::arming_termination_failsafe"]
        [::core::mem::offset_of!(px4io_status_s, arming_termination_failsafe) - 140usize];
    ["Offset of field: px4io_status_s::_padding0"]
        [::core::mem::offset_of!(px4io_status_s, _padding0) - 141usize];
};
unsafe extern "C" {
    pub static __orb_px4io_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct manual_control_switches_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub switch_changes: u32,
    pub mode_slot: u8,
    pub arm_switch: u8,
    pub return_switch: u8,
    pub loiter_switch: u8,
    pub offboard_switch: u8,
    pub kill_switch: u8,
    pub gear_switch: u8,
    pub transition_switch: u8,
    pub photo_switch: u8,
    pub video_switch: u8,
    pub payload_power_switch: u8,
    pub engage_main_motor_switch: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of manual_control_switches_s"]
        [::core::mem::size_of::<manual_control_switches_s>() - 32usize];
    ["Alignment of manual_control_switches_s"]
        [::core::mem::align_of::<manual_control_switches_s>() - 8usize];
    ["Offset of field: manual_control_switches_s::timestamp"]
        [::core::mem::offset_of!(manual_control_switches_s, timestamp) - 0usize];
    ["Offset of field: manual_control_switches_s::timestamp_sample"]
        [::core::mem::offset_of!(manual_control_switches_s, timestamp_sample) - 8usize];
    ["Offset of field: manual_control_switches_s::switch_changes"]
        [::core::mem::offset_of!(manual_control_switches_s, switch_changes) - 16usize];
    ["Offset of field: manual_control_switches_s::mode_slot"]
        [::core::mem::offset_of!(manual_control_switches_s, mode_slot) - 20usize];
    ["Offset of field: manual_control_switches_s::arm_switch"]
        [::core::mem::offset_of!(manual_control_switches_s, arm_switch) - 21usize];
    ["Offset of field: manual_control_switches_s::return_switch"]
        [::core::mem::offset_of!(manual_control_switches_s, return_switch) - 22usize];
    ["Offset of field: manual_control_switches_s::loiter_switch"]
        [::core::mem::offset_of!(manual_control_switches_s, loiter_switch) - 23usize];
    ["Offset of field: manual_control_switches_s::offboard_switch"]
        [::core::mem::offset_of!(manual_control_switches_s, offboard_switch) - 24usize];
    ["Offset of field: manual_control_switches_s::kill_switch"]
        [::core::mem::offset_of!(manual_control_switches_s, kill_switch) - 25usize];
    ["Offset of field: manual_control_switches_s::gear_switch"]
        [::core::mem::offset_of!(manual_control_switches_s, gear_switch) - 26usize];
    ["Offset of field: manual_control_switches_s::transition_switch"]
        [::core::mem::offset_of!(manual_control_switches_s, transition_switch) - 27usize];
    ["Offset of field: manual_control_switches_s::photo_switch"]
        [::core::mem::offset_of!(manual_control_switches_s, photo_switch) - 28usize];
    ["Offset of field: manual_control_switches_s::video_switch"]
        [::core::mem::offset_of!(manual_control_switches_s, video_switch) - 29usize];
    ["Offset of field: manual_control_switches_s::payload_power_switch"]
        [::core::mem::offset_of!(manual_control_switches_s, payload_power_switch) - 30usize];
    ["Offset of field: manual_control_switches_s::engage_main_motor_switch"]
        [::core::mem::offset_of!(manual_control_switches_s, engage_main_motor_switch) - 31usize];
};
unsafe extern "C" {
    pub static __orb_manual_control_switches: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct open_drone_id_system_s {
    pub timestamp: u64,
    pub operator_latitude: i32,
    pub operator_longitude: i32,
    pub area_ceiling: f32,
    pub area_floor: f32,
    pub operator_altitude_geo: f32,
    pub area_count: u16,
    pub area_radius: u16,
    pub id_or_mac: [u8; 20usize],
    pub operator_location_type: u8,
    pub classification_type: u8,
    pub category_eu: u8,
    pub class_eu: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of open_drone_id_system_s"][::core::mem::size_of::<open_drone_id_system_s>() - 56usize];
    ["Alignment of open_drone_id_system_s"]
        [::core::mem::align_of::<open_drone_id_system_s>() - 8usize];
    ["Offset of field: open_drone_id_system_s::timestamp"]
        [::core::mem::offset_of!(open_drone_id_system_s, timestamp) - 0usize];
    ["Offset of field: open_drone_id_system_s::operator_latitude"]
        [::core::mem::offset_of!(open_drone_id_system_s, operator_latitude) - 8usize];
    ["Offset of field: open_drone_id_system_s::operator_longitude"]
        [::core::mem::offset_of!(open_drone_id_system_s, operator_longitude) - 12usize];
    ["Offset of field: open_drone_id_system_s::area_ceiling"]
        [::core::mem::offset_of!(open_drone_id_system_s, area_ceiling) - 16usize];
    ["Offset of field: open_drone_id_system_s::area_floor"]
        [::core::mem::offset_of!(open_drone_id_system_s, area_floor) - 20usize];
    ["Offset of field: open_drone_id_system_s::operator_altitude_geo"]
        [::core::mem::offset_of!(open_drone_id_system_s, operator_altitude_geo) - 24usize];
    ["Offset of field: open_drone_id_system_s::area_count"]
        [::core::mem::offset_of!(open_drone_id_system_s, area_count) - 28usize];
    ["Offset of field: open_drone_id_system_s::area_radius"]
        [::core::mem::offset_of!(open_drone_id_system_s, area_radius) - 30usize];
    ["Offset of field: open_drone_id_system_s::id_or_mac"]
        [::core::mem::offset_of!(open_drone_id_system_s, id_or_mac) - 32usize];
    ["Offset of field: open_drone_id_system_s::operator_location_type"]
        [::core::mem::offset_of!(open_drone_id_system_s, operator_location_type) - 52usize];
    ["Offset of field: open_drone_id_system_s::classification_type"]
        [::core::mem::offset_of!(open_drone_id_system_s, classification_type) - 53usize];
    ["Offset of field: open_drone_id_system_s::category_eu"]
        [::core::mem::offset_of!(open_drone_id_system_s, category_eu) - 54usize];
    ["Offset of field: open_drone_id_system_s::class_eu"]
        [::core::mem::offset_of!(open_drone_id_system_s, class_eu) - 55usize];
};
unsafe extern "C" {
    pub static __orb_open_drone_id_system: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tecs_status_s {
    pub timestamp: u64,
    pub altitude_sp: f32,
    pub altitude_reference: f32,
    pub altitude_time_constant: f32,
    pub height_rate_reference: f32,
    pub height_rate_direct: f32,
    pub height_rate_setpoint: f32,
    pub height_rate: f32,
    pub equivalent_airspeed_sp: f32,
    pub true_airspeed_sp: f32,
    pub true_airspeed_filtered: f32,
    pub true_airspeed_derivative_sp: f32,
    pub true_airspeed_derivative: f32,
    pub true_airspeed_derivative_raw: f32,
    pub total_energy_rate_sp: f32,
    pub total_energy_rate: f32,
    pub total_energy_balance_rate_sp: f32,
    pub total_energy_balance_rate: f32,
    pub throttle_integ: f32,
    pub pitch_integ: f32,
    pub throttle_sp: f32,
    pub pitch_sp_rad: f32,
    pub throttle_trim: f32,
    pub underspeed_ratio: f32,
    pub fast_descend_ratio: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tecs_status_s"][::core::mem::size_of::<tecs_status_s>() - 104usize];
    ["Alignment of tecs_status_s"][::core::mem::align_of::<tecs_status_s>() - 8usize];
    ["Offset of field: tecs_status_s::timestamp"]
        [::core::mem::offset_of!(tecs_status_s, timestamp) - 0usize];
    ["Offset of field: tecs_status_s::altitude_sp"]
        [::core::mem::offset_of!(tecs_status_s, altitude_sp) - 8usize];
    ["Offset of field: tecs_status_s::altitude_reference"]
        [::core::mem::offset_of!(tecs_status_s, altitude_reference) - 12usize];
    ["Offset of field: tecs_status_s::altitude_time_constant"]
        [::core::mem::offset_of!(tecs_status_s, altitude_time_constant) - 16usize];
    ["Offset of field: tecs_status_s::height_rate_reference"]
        [::core::mem::offset_of!(tecs_status_s, height_rate_reference) - 20usize];
    ["Offset of field: tecs_status_s::height_rate_direct"]
        [::core::mem::offset_of!(tecs_status_s, height_rate_direct) - 24usize];
    ["Offset of field: tecs_status_s::height_rate_setpoint"]
        [::core::mem::offset_of!(tecs_status_s, height_rate_setpoint) - 28usize];
    ["Offset of field: tecs_status_s::height_rate"]
        [::core::mem::offset_of!(tecs_status_s, height_rate) - 32usize];
    ["Offset of field: tecs_status_s::equivalent_airspeed_sp"]
        [::core::mem::offset_of!(tecs_status_s, equivalent_airspeed_sp) - 36usize];
    ["Offset of field: tecs_status_s::true_airspeed_sp"]
        [::core::mem::offset_of!(tecs_status_s, true_airspeed_sp) - 40usize];
    ["Offset of field: tecs_status_s::true_airspeed_filtered"]
        [::core::mem::offset_of!(tecs_status_s, true_airspeed_filtered) - 44usize];
    ["Offset of field: tecs_status_s::true_airspeed_derivative_sp"]
        [::core::mem::offset_of!(tecs_status_s, true_airspeed_derivative_sp) - 48usize];
    ["Offset of field: tecs_status_s::true_airspeed_derivative"]
        [::core::mem::offset_of!(tecs_status_s, true_airspeed_derivative) - 52usize];
    ["Offset of field: tecs_status_s::true_airspeed_derivative_raw"]
        [::core::mem::offset_of!(tecs_status_s, true_airspeed_derivative_raw) - 56usize];
    ["Offset of field: tecs_status_s::total_energy_rate_sp"]
        [::core::mem::offset_of!(tecs_status_s, total_energy_rate_sp) - 60usize];
    ["Offset of field: tecs_status_s::total_energy_rate"]
        [::core::mem::offset_of!(tecs_status_s, total_energy_rate) - 64usize];
    ["Offset of field: tecs_status_s::total_energy_balance_rate_sp"]
        [::core::mem::offset_of!(tecs_status_s, total_energy_balance_rate_sp) - 68usize];
    ["Offset of field: tecs_status_s::total_energy_balance_rate"]
        [::core::mem::offset_of!(tecs_status_s, total_energy_balance_rate) - 72usize];
    ["Offset of field: tecs_status_s::throttle_integ"]
        [::core::mem::offset_of!(tecs_status_s, throttle_integ) - 76usize];
    ["Offset of field: tecs_status_s::pitch_integ"]
        [::core::mem::offset_of!(tecs_status_s, pitch_integ) - 80usize];
    ["Offset of field: tecs_status_s::throttle_sp"]
        [::core::mem::offset_of!(tecs_status_s, throttle_sp) - 84usize];
    ["Offset of field: tecs_status_s::pitch_sp_rad"]
        [::core::mem::offset_of!(tecs_status_s, pitch_sp_rad) - 88usize];
    ["Offset of field: tecs_status_s::throttle_trim"]
        [::core::mem::offset_of!(tecs_status_s, throttle_trim) - 92usize];
    ["Offset of field: tecs_status_s::underspeed_ratio"]
        [::core::mem::offset_of!(tecs_status_s, underspeed_ratio) - 96usize];
    ["Offset of field: tecs_status_s::fast_descend_ratio"]
        [::core::mem::offset_of!(tecs_status_s, fast_descend_ratio) - 100usize];
};
unsafe extern "C" {
    pub static __orb_tecs_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_constraints_s {
    pub timestamp: u64,
    pub speed_up: f32,
    pub speed_down: f32,
    pub want_takeoff: bool,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_constraints_s"][::core::mem::size_of::<vehicle_constraints_s>() - 24usize];
    ["Alignment of vehicle_constraints_s"]
        [::core::mem::align_of::<vehicle_constraints_s>() - 8usize];
    ["Offset of field: vehicle_constraints_s::timestamp"]
        [::core::mem::offset_of!(vehicle_constraints_s, timestamp) - 0usize];
    ["Offset of field: vehicle_constraints_s::speed_up"]
        [::core::mem::offset_of!(vehicle_constraints_s, speed_up) - 8usize];
    ["Offset of field: vehicle_constraints_s::speed_down"]
        [::core::mem::offset_of!(vehicle_constraints_s, speed_down) - 12usize];
    ["Offset of field: vehicle_constraints_s::want_takeoff"]
        [::core::mem::offset_of!(vehicle_constraints_s, want_takeoff) - 16usize];
    ["Offset of field: vehicle_constraints_s::_padding0"]
        [::core::mem::offset_of!(vehicle_constraints_s, _padding0) - 17usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_constraints: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gps_inject_data_s {
    pub timestamp: u64,
    pub device_id: u32,
    pub len: u16,
    pub flags: u8,
    pub data: [u8; 300usize],
    pub _padding0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gps_inject_data_s"][::core::mem::size_of::<gps_inject_data_s>() - 320usize];
    ["Alignment of gps_inject_data_s"][::core::mem::align_of::<gps_inject_data_s>() - 8usize];
    ["Offset of field: gps_inject_data_s::timestamp"]
        [::core::mem::offset_of!(gps_inject_data_s, timestamp) - 0usize];
    ["Offset of field: gps_inject_data_s::device_id"]
        [::core::mem::offset_of!(gps_inject_data_s, device_id) - 8usize];
    ["Offset of field: gps_inject_data_s::len"]
        [::core::mem::offset_of!(gps_inject_data_s, len) - 12usize];
    ["Offset of field: gps_inject_data_s::flags"]
        [::core::mem::offset_of!(gps_inject_data_s, flags) - 14usize];
    ["Offset of field: gps_inject_data_s::data"]
        [::core::mem::offset_of!(gps_inject_data_s, data) - 15usize];
    ["Offset of field: gps_inject_data_s::_padding0"]
        [::core::mem::offset_of!(gps_inject_data_s, _padding0) - 315usize];
};
unsafe extern "C" {
    pub static __orb_gps_inject_data: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_air_data_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub baro_device_id: u32,
    pub baro_alt_meter: f32,
    pub baro_pressure_pa: f32,
    pub ambient_temperature: f32,
    pub rho: f32,
    pub temperature_source: u8,
    pub calibration_count: u8,
    pub _padding0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_air_data_s"][::core::mem::size_of::<vehicle_air_data_s>() - 40usize];
    ["Alignment of vehicle_air_data_s"][::core::mem::align_of::<vehicle_air_data_s>() - 8usize];
    ["Offset of field: vehicle_air_data_s::timestamp"]
        [::core::mem::offset_of!(vehicle_air_data_s, timestamp) - 0usize];
    ["Offset of field: vehicle_air_data_s::timestamp_sample"]
        [::core::mem::offset_of!(vehicle_air_data_s, timestamp_sample) - 8usize];
    ["Offset of field: vehicle_air_data_s::baro_device_id"]
        [::core::mem::offset_of!(vehicle_air_data_s, baro_device_id) - 16usize];
    ["Offset of field: vehicle_air_data_s::baro_alt_meter"]
        [::core::mem::offset_of!(vehicle_air_data_s, baro_alt_meter) - 20usize];
    ["Offset of field: vehicle_air_data_s::baro_pressure_pa"]
        [::core::mem::offset_of!(vehicle_air_data_s, baro_pressure_pa) - 24usize];
    ["Offset of field: vehicle_air_data_s::ambient_temperature"]
        [::core::mem::offset_of!(vehicle_air_data_s, ambient_temperature) - 28usize];
    ["Offset of field: vehicle_air_data_s::rho"]
        [::core::mem::offset_of!(vehicle_air_data_s, rho) - 32usize];
    ["Offset of field: vehicle_air_data_s::temperature_source"]
        [::core::mem::offset_of!(vehicle_air_data_s, temperature_source) - 36usize];
    ["Offset of field: vehicle_air_data_s::calibration_count"]
        [::core::mem::offset_of!(vehicle_air_data_s, calibration_count) - 37usize];
    ["Offset of field: vehicle_air_data_s::_padding0"]
        [::core::mem::offset_of!(vehicle_air_data_s, _padding0) - 38usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_air_data: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_local_position_setpoint_s {
    pub timestamp: u64,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub vx: f32,
    pub vy: f32,
    pub vz: f32,
    pub acceleration: [f32; 3usize],
    pub thrust: [f32; 3usize],
    pub yaw: f32,
    pub yawspeed: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_local_position_setpoint_s"]
        [::core::mem::size_of::<vehicle_local_position_setpoint_s>() - 64usize];
    ["Alignment of vehicle_local_position_setpoint_s"]
        [::core::mem::align_of::<vehicle_local_position_setpoint_s>() - 8usize];
    ["Offset of field: vehicle_local_position_setpoint_s::timestamp"]
        [::core::mem::offset_of!(vehicle_local_position_setpoint_s, timestamp) - 0usize];
    ["Offset of field: vehicle_local_position_setpoint_s::x"]
        [::core::mem::offset_of!(vehicle_local_position_setpoint_s, x) - 8usize];
    ["Offset of field: vehicle_local_position_setpoint_s::y"]
        [::core::mem::offset_of!(vehicle_local_position_setpoint_s, y) - 12usize];
    ["Offset of field: vehicle_local_position_setpoint_s::z"]
        [::core::mem::offset_of!(vehicle_local_position_setpoint_s, z) - 16usize];
    ["Offset of field: vehicle_local_position_setpoint_s::vx"]
        [::core::mem::offset_of!(vehicle_local_position_setpoint_s, vx) - 20usize];
    ["Offset of field: vehicle_local_position_setpoint_s::vy"]
        [::core::mem::offset_of!(vehicle_local_position_setpoint_s, vy) - 24usize];
    ["Offset of field: vehicle_local_position_setpoint_s::vz"]
        [::core::mem::offset_of!(vehicle_local_position_setpoint_s, vz) - 28usize];
    ["Offset of field: vehicle_local_position_setpoint_s::acceleration"]
        [::core::mem::offset_of!(vehicle_local_position_setpoint_s, acceleration) - 32usize];
    ["Offset of field: vehicle_local_position_setpoint_s::thrust"]
        [::core::mem::offset_of!(vehicle_local_position_setpoint_s, thrust) - 44usize];
    ["Offset of field: vehicle_local_position_setpoint_s::yaw"]
        [::core::mem::offset_of!(vehicle_local_position_setpoint_s, yaw) - 56usize];
    ["Offset of field: vehicle_local_position_setpoint_s::yawspeed"]
        [::core::mem::offset_of!(vehicle_local_position_setpoint_s, yawspeed) - 60usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_local_position_setpoint: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mavlink_tunnel_s {
    pub timestamp: u64,
    pub payload_type: u16,
    pub target_system: u8,
    pub target_component: u8,
    pub payload_length: u8,
    pub payload: [u8; 128usize],
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mavlink_tunnel_s"][::core::mem::size_of::<mavlink_tunnel_s>() - 144usize];
    ["Alignment of mavlink_tunnel_s"][::core::mem::align_of::<mavlink_tunnel_s>() - 8usize];
    ["Offset of field: mavlink_tunnel_s::timestamp"]
        [::core::mem::offset_of!(mavlink_tunnel_s, timestamp) - 0usize];
    ["Offset of field: mavlink_tunnel_s::payload_type"]
        [::core::mem::offset_of!(mavlink_tunnel_s, payload_type) - 8usize];
    ["Offset of field: mavlink_tunnel_s::target_system"]
        [::core::mem::offset_of!(mavlink_tunnel_s, target_system) - 10usize];
    ["Offset of field: mavlink_tunnel_s::target_component"]
        [::core::mem::offset_of!(mavlink_tunnel_s, target_component) - 11usize];
    ["Offset of field: mavlink_tunnel_s::payload_length"]
        [::core::mem::offset_of!(mavlink_tunnel_s, payload_length) - 12usize];
    ["Offset of field: mavlink_tunnel_s::payload"]
        [::core::mem::offset_of!(mavlink_tunnel_s, payload) - 13usize];
    ["Offset of field: mavlink_tunnel_s::_padding0"]
        [::core::mem::offset_of!(mavlink_tunnel_s, _padding0) - 141usize];
};
unsafe extern "C" {
    pub static __orb_mavlink_tunnel: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_esc_serial_passthru: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flight_phase_estimation_s {
    pub timestamp: u64,
    pub flight_phase: u8,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of flight_phase_estimation_s"]
        [::core::mem::size_of::<flight_phase_estimation_s>() - 16usize];
    ["Alignment of flight_phase_estimation_s"]
        [::core::mem::align_of::<flight_phase_estimation_s>() - 8usize];
    ["Offset of field: flight_phase_estimation_s::timestamp"]
        [::core::mem::offset_of!(flight_phase_estimation_s, timestamp) - 0usize];
    ["Offset of field: flight_phase_estimation_s::flight_phase"]
        [::core::mem::offset_of!(flight_phase_estimation_s, flight_phase) - 8usize];
    ["Offset of field: flight_phase_estimation_s::_padding0"]
        [::core::mem::offset_of!(flight_phase_estimation_s, _padding0) - 9usize];
};
unsafe extern "C" {
    pub static __orb_flight_phase_estimation: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct differential_velocity_setpoint_s {
    pub timestamp: u64,
    pub speed: f32,
    pub bearing: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of differential_velocity_setpoint_s"]
        [::core::mem::size_of::<differential_velocity_setpoint_s>() - 16usize];
    ["Alignment of differential_velocity_setpoint_s"]
        [::core::mem::align_of::<differential_velocity_setpoint_s>() - 8usize];
    ["Offset of field: differential_velocity_setpoint_s::timestamp"]
        [::core::mem::offset_of!(differential_velocity_setpoint_s, timestamp) - 0usize];
    ["Offset of field: differential_velocity_setpoint_s::speed"]
        [::core::mem::offset_of!(differential_velocity_setpoint_s, speed) - 8usize];
    ["Offset of field: differential_velocity_setpoint_s::bearing"]
        [::core::mem::offset_of!(differential_velocity_setpoint_s, bearing) - 12usize];
};
unsafe extern "C" {
    pub static __orb_differential_velocity_setpoint: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct velocity_limits_s {
    pub timestamp: u64,
    pub horizontal_velocity: f32,
    pub vertical_velocity: f32,
    pub yaw_rate: f32,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of velocity_limits_s"][::core::mem::size_of::<velocity_limits_s>() - 24usize];
    ["Alignment of velocity_limits_s"][::core::mem::align_of::<velocity_limits_s>() - 8usize];
    ["Offset of field: velocity_limits_s::timestamp"]
        [::core::mem::offset_of!(velocity_limits_s, timestamp) - 0usize];
    ["Offset of field: velocity_limits_s::horizontal_velocity"]
        [::core::mem::offset_of!(velocity_limits_s, horizontal_velocity) - 8usize];
    ["Offset of field: velocity_limits_s::vertical_velocity"]
        [::core::mem::offset_of!(velocity_limits_s, vertical_velocity) - 12usize];
    ["Offset of field: velocity_limits_s::yaw_rate"]
        [::core::mem::offset_of!(velocity_limits_s, yaw_rate) - 16usize];
    ["Offset of field: velocity_limits_s::_padding0"]
        [::core::mem::offset_of!(velocity_limits_s, _padding0) - 20usize];
};
unsafe extern "C" {
    pub static __orb_velocity_limits: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gpio_out_s {
    pub timestamp: u64,
    pub device_id: u32,
    pub mask: u32,
    pub state: u32,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpio_out_s"][::core::mem::size_of::<gpio_out_s>() - 24usize];
    ["Alignment of gpio_out_s"][::core::mem::align_of::<gpio_out_s>() - 8usize];
    ["Offset of field: gpio_out_s::timestamp"]
        [::core::mem::offset_of!(gpio_out_s, timestamp) - 0usize];
    ["Offset of field: gpio_out_s::device_id"]
        [::core::mem::offset_of!(gpio_out_s, device_id) - 8usize];
    ["Offset of field: gpio_out_s::mask"][::core::mem::offset_of!(gpio_out_s, mask) - 12usize];
    ["Offset of field: gpio_out_s::state"][::core::mem::offset_of!(gpio_out_s, state) - 16usize];
    ["Offset of field: gpio_out_s::_padding0"]
        [::core::mem::offset_of!(gpio_out_s, _padding0) - 20usize];
};
unsafe extern "C" {
    pub static __orb_gpio_out: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct estimator_aid_source1d_s {
    pub timestamp: u64,
    pub timestamp_sample: u64,
    pub time_last_fuse: u64,
    pub device_id: u32,
    pub observation: f32,
    pub observation_variance: f32,
    pub innovation: f32,
    pub innovation_filtered: f32,
    pub innovation_variance: f32,
    pub test_ratio: f32,
    pub test_ratio_filtered: f32,
    pub estimator_instance: u8,
    pub innovation_rejected: bool,
    pub fused: bool,
    pub _padding0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of estimator_aid_source1d_s"]
        [::core::mem::size_of::<estimator_aid_source1d_s>() - 64usize];
    ["Alignment of estimator_aid_source1d_s"]
        [::core::mem::align_of::<estimator_aid_source1d_s>() - 8usize];
    ["Offset of field: estimator_aid_source1d_s::timestamp"]
        [::core::mem::offset_of!(estimator_aid_source1d_s, timestamp) - 0usize];
    ["Offset of field: estimator_aid_source1d_s::timestamp_sample"]
        [::core::mem::offset_of!(estimator_aid_source1d_s, timestamp_sample) - 8usize];
    ["Offset of field: estimator_aid_source1d_s::time_last_fuse"]
        [::core::mem::offset_of!(estimator_aid_source1d_s, time_last_fuse) - 16usize];
    ["Offset of field: estimator_aid_source1d_s::device_id"]
        [::core::mem::offset_of!(estimator_aid_source1d_s, device_id) - 24usize];
    ["Offset of field: estimator_aid_source1d_s::observation"]
        [::core::mem::offset_of!(estimator_aid_source1d_s, observation) - 28usize];
    ["Offset of field: estimator_aid_source1d_s::observation_variance"]
        [::core::mem::offset_of!(estimator_aid_source1d_s, observation_variance) - 32usize];
    ["Offset of field: estimator_aid_source1d_s::innovation"]
        [::core::mem::offset_of!(estimator_aid_source1d_s, innovation) - 36usize];
    ["Offset of field: estimator_aid_source1d_s::innovation_filtered"]
        [::core::mem::offset_of!(estimator_aid_source1d_s, innovation_filtered) - 40usize];
    ["Offset of field: estimator_aid_source1d_s::innovation_variance"]
        [::core::mem::offset_of!(estimator_aid_source1d_s, innovation_variance) - 44usize];
    ["Offset of field: estimator_aid_source1d_s::test_ratio"]
        [::core::mem::offset_of!(estimator_aid_source1d_s, test_ratio) - 48usize];
    ["Offset of field: estimator_aid_source1d_s::test_ratio_filtered"]
        [::core::mem::offset_of!(estimator_aid_source1d_s, test_ratio_filtered) - 52usize];
    ["Offset of field: estimator_aid_source1d_s::estimator_instance"]
        [::core::mem::offset_of!(estimator_aid_source1d_s, estimator_instance) - 56usize];
    ["Offset of field: estimator_aid_source1d_s::innovation_rejected"]
        [::core::mem::offset_of!(estimator_aid_source1d_s, innovation_rejected) - 57usize];
    ["Offset of field: estimator_aid_source1d_s::fused"]
        [::core::mem::offset_of!(estimator_aid_source1d_s, fused) - 58usize];
    ["Offset of field: estimator_aid_source1d_s::_padding0"]
        [::core::mem::offset_of!(estimator_aid_source1d_s, _padding0) - 59usize];
};
unsafe extern "C" {
    pub static __orb_estimator_aid_src_baro_hgt: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_ev_hgt: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_gnss_hgt: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_rng_hgt: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_airspeed: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_sideslip: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_fake_hgt: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_gnss_yaw: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_estimator_aid_src_ev_yaw: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vehicle_attitude_setpoint_s {
    pub timestamp: u64,
    pub yaw_sp_move_rate: f32,
    pub q_d: [f32; 4usize],
    pub thrust_body: [f32; 3usize],
    pub reset_integral: bool,
    pub fw_control_yaw_wheel: bool,
    pub _padding0: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vehicle_attitude_setpoint_s"]
        [::core::mem::size_of::<vehicle_attitude_setpoint_s>() - 48usize];
    ["Alignment of vehicle_attitude_setpoint_s"]
        [::core::mem::align_of::<vehicle_attitude_setpoint_s>() - 8usize];
    ["Offset of field: vehicle_attitude_setpoint_s::timestamp"]
        [::core::mem::offset_of!(vehicle_attitude_setpoint_s, timestamp) - 0usize];
    ["Offset of field: vehicle_attitude_setpoint_s::yaw_sp_move_rate"]
        [::core::mem::offset_of!(vehicle_attitude_setpoint_s, yaw_sp_move_rate) - 8usize];
    ["Offset of field: vehicle_attitude_setpoint_s::q_d"]
        [::core::mem::offset_of!(vehicle_attitude_setpoint_s, q_d) - 12usize];
    ["Offset of field: vehicle_attitude_setpoint_s::thrust_body"]
        [::core::mem::offset_of!(vehicle_attitude_setpoint_s, thrust_body) - 28usize];
    ["Offset of field: vehicle_attitude_setpoint_s::reset_integral"]
        [::core::mem::offset_of!(vehicle_attitude_setpoint_s, reset_integral) - 40usize];
    ["Offset of field: vehicle_attitude_setpoint_s::fw_control_yaw_wheel"]
        [::core::mem::offset_of!(vehicle_attitude_setpoint_s, fw_control_yaw_wheel) - 41usize];
    ["Offset of field: vehicle_attitude_setpoint_s::_padding0"]
        [::core::mem::offset_of!(vehicle_attitude_setpoint_s, _padding0) - 42usize];
};
unsafe extern "C" {
    pub static __orb_vehicle_attitude_setpoint: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_mc_virtual_attitude_setpoint: orb_metadata;
}
unsafe extern "C" {
    pub static __orb_fw_virtual_attitude_setpoint: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct telemetry_status_s {
    pub timestamp: u64,
    pub data_rate: f32,
    pub rate_multiplier: f32,
    pub tx_rate_avg: f32,
    pub tx_error_rate_avg: f32,
    pub tx_message_count: u32,
    pub tx_buffer_overruns: u32,
    pub rx_rate_avg: f32,
    pub rx_message_count: u32,
    pub rx_message_lost_count: u32,
    pub rx_buffer_overruns: u32,
    pub rx_parse_errors: u32,
    pub rx_packet_drop_count: u32,
    pub rx_message_lost_rate: f32,
    pub type_: u8,
    pub mode: u8,
    pub flow_control: bool,
    pub forwarding: bool,
    pub mavlink_v2: bool,
    pub ftp: bool,
    pub streams: u8,
    pub heartbeat_type_antenna_tracker: bool,
    pub heartbeat_type_gcs: bool,
    pub heartbeat_type_onboard_controller: bool,
    pub heartbeat_type_gimbal: bool,
    pub heartbeat_type_adsb: bool,
    pub heartbeat_type_camera: bool,
    pub heartbeat_type_parachute: bool,
    pub heartbeat_type_open_drone_id: bool,
    pub heartbeat_component_telemetry_radio: bool,
    pub heartbeat_component_log: bool,
    pub heartbeat_component_osd: bool,
    pub heartbeat_component_vio: bool,
    pub heartbeat_component_pairing_manager: bool,
    pub heartbeat_component_udp_bridge: bool,
    pub heartbeat_component_uart_bridge: bool,
    pub open_drone_id_system_healthy: bool,
    pub parachute_system_healthy: bool,
    pub _padding0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of telemetry_status_s"][::core::mem::size_of::<telemetry_status_s>() - 88usize];
    ["Alignment of telemetry_status_s"][::core::mem::align_of::<telemetry_status_s>() - 8usize];
    ["Offset of field: telemetry_status_s::timestamp"]
        [::core::mem::offset_of!(telemetry_status_s, timestamp) - 0usize];
    ["Offset of field: telemetry_status_s::data_rate"]
        [::core::mem::offset_of!(telemetry_status_s, data_rate) - 8usize];
    ["Offset of field: telemetry_status_s::rate_multiplier"]
        [::core::mem::offset_of!(telemetry_status_s, rate_multiplier) - 12usize];
    ["Offset of field: telemetry_status_s::tx_rate_avg"]
        [::core::mem::offset_of!(telemetry_status_s, tx_rate_avg) - 16usize];
    ["Offset of field: telemetry_status_s::tx_error_rate_avg"]
        [::core::mem::offset_of!(telemetry_status_s, tx_error_rate_avg) - 20usize];
    ["Offset of field: telemetry_status_s::tx_message_count"]
        [::core::mem::offset_of!(telemetry_status_s, tx_message_count) - 24usize];
    ["Offset of field: telemetry_status_s::tx_buffer_overruns"]
        [::core::mem::offset_of!(telemetry_status_s, tx_buffer_overruns) - 28usize];
    ["Offset of field: telemetry_status_s::rx_rate_avg"]
        [::core::mem::offset_of!(telemetry_status_s, rx_rate_avg) - 32usize];
    ["Offset of field: telemetry_status_s::rx_message_count"]
        [::core::mem::offset_of!(telemetry_status_s, rx_message_count) - 36usize];
    ["Offset of field: telemetry_status_s::rx_message_lost_count"]
        [::core::mem::offset_of!(telemetry_status_s, rx_message_lost_count) - 40usize];
    ["Offset of field: telemetry_status_s::rx_buffer_overruns"]
        [::core::mem::offset_of!(telemetry_status_s, rx_buffer_overruns) - 44usize];
    ["Offset of field: telemetry_status_s::rx_parse_errors"]
        [::core::mem::offset_of!(telemetry_status_s, rx_parse_errors) - 48usize];
    ["Offset of field: telemetry_status_s::rx_packet_drop_count"]
        [::core::mem::offset_of!(telemetry_status_s, rx_packet_drop_count) - 52usize];
    ["Offset of field: telemetry_status_s::rx_message_lost_rate"]
        [::core::mem::offset_of!(telemetry_status_s, rx_message_lost_rate) - 56usize];
    ["Offset of field: telemetry_status_s::type_"]
        [::core::mem::offset_of!(telemetry_status_s, type_) - 60usize];
    ["Offset of field: telemetry_status_s::mode"]
        [::core::mem::offset_of!(telemetry_status_s, mode) - 61usize];
    ["Offset of field: telemetry_status_s::flow_control"]
        [::core::mem::offset_of!(telemetry_status_s, flow_control) - 62usize];
    ["Offset of field: telemetry_status_s::forwarding"]
        [::core::mem::offset_of!(telemetry_status_s, forwarding) - 63usize];
    ["Offset of field: telemetry_status_s::mavlink_v2"]
        [::core::mem::offset_of!(telemetry_status_s, mavlink_v2) - 64usize];
    ["Offset of field: telemetry_status_s::ftp"]
        [::core::mem::offset_of!(telemetry_status_s, ftp) - 65usize];
    ["Offset of field: telemetry_status_s::streams"]
        [::core::mem::offset_of!(telemetry_status_s, streams) - 66usize];
    ["Offset of field: telemetry_status_s::heartbeat_type_antenna_tracker"]
        [::core::mem::offset_of!(telemetry_status_s, heartbeat_type_antenna_tracker) - 67usize];
    ["Offset of field: telemetry_status_s::heartbeat_type_gcs"]
        [::core::mem::offset_of!(telemetry_status_s, heartbeat_type_gcs) - 68usize];
    ["Offset of field: telemetry_status_s::heartbeat_type_onboard_controller"]
        [::core::mem::offset_of!(telemetry_status_s, heartbeat_type_onboard_controller) - 69usize];
    ["Offset of field: telemetry_status_s::heartbeat_type_gimbal"]
        [::core::mem::offset_of!(telemetry_status_s, heartbeat_type_gimbal) - 70usize];
    ["Offset of field: telemetry_status_s::heartbeat_type_adsb"]
        [::core::mem::offset_of!(telemetry_status_s, heartbeat_type_adsb) - 71usize];
    ["Offset of field: telemetry_status_s::heartbeat_type_camera"]
        [::core::mem::offset_of!(telemetry_status_s, heartbeat_type_camera) - 72usize];
    ["Offset of field: telemetry_status_s::heartbeat_type_parachute"]
        [::core::mem::offset_of!(telemetry_status_s, heartbeat_type_parachute) - 73usize];
    ["Offset of field: telemetry_status_s::heartbeat_type_open_drone_id"]
        [::core::mem::offset_of!(telemetry_status_s, heartbeat_type_open_drone_id) - 74usize];
    ["Offset of field: telemetry_status_s::heartbeat_component_telemetry_radio"][::core::mem::offset_of!(
        telemetry_status_s,
        heartbeat_component_telemetry_radio
    ) - 75usize];
    ["Offset of field: telemetry_status_s::heartbeat_component_log"]
        [::core::mem::offset_of!(telemetry_status_s, heartbeat_component_log) - 76usize];
    ["Offset of field: telemetry_status_s::heartbeat_component_osd"]
        [::core::mem::offset_of!(telemetry_status_s, heartbeat_component_osd) - 77usize];
    ["Offset of field: telemetry_status_s::heartbeat_component_vio"]
        [::core::mem::offset_of!(telemetry_status_s, heartbeat_component_vio) - 78usize];
    ["Offset of field: telemetry_status_s::heartbeat_component_pairing_manager"][::core::mem::offset_of!(
        telemetry_status_s,
        heartbeat_component_pairing_manager
    ) - 79usize];
    ["Offset of field: telemetry_status_s::heartbeat_component_udp_bridge"]
        [::core::mem::offset_of!(telemetry_status_s, heartbeat_component_udp_bridge) - 80usize];
    ["Offset of field: telemetry_status_s::heartbeat_component_uart_bridge"]
        [::core::mem::offset_of!(telemetry_status_s, heartbeat_component_uart_bridge) - 81usize];
    ["Offset of field: telemetry_status_s::open_drone_id_system_healthy"]
        [::core::mem::offset_of!(telemetry_status_s, open_drone_id_system_healthy) - 82usize];
    ["Offset of field: telemetry_status_s::parachute_system_healthy"]
        [::core::mem::offset_of!(telemetry_status_s, parachute_system_healthy) - 83usize];
    ["Offset of field: telemetry_status_s::_padding0"]
        [::core::mem::offset_of!(telemetry_status_s, _padding0) - 84usize];
};
unsafe extern "C" {
    pub static __orb_telemetry_status: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ackermann_velocity_setpoint_s {
    pub timestamp: u64,
    pub velocity_ned: [f32; 2usize],
    pub backwards: bool,
    pub _padding0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ackermann_velocity_setpoint_s"]
        [::core::mem::size_of::<ackermann_velocity_setpoint_s>() - 24usize];
    ["Alignment of ackermann_velocity_setpoint_s"]
        [::core::mem::align_of::<ackermann_velocity_setpoint_s>() - 8usize];
    ["Offset of field: ackermann_velocity_setpoint_s::timestamp"]
        [::core::mem::offset_of!(ackermann_velocity_setpoint_s, timestamp) - 0usize];
    ["Offset of field: ackermann_velocity_setpoint_s::velocity_ned"]
        [::core::mem::offset_of!(ackermann_velocity_setpoint_s, velocity_ned) - 8usize];
    ["Offset of field: ackermann_velocity_setpoint_s::backwards"]
        [::core::mem::offset_of!(ackermann_velocity_setpoint_s, backwards) - 16usize];
    ["Offset of field: ackermann_velocity_setpoint_s::_padding0"]
        [::core::mem::offset_of!(ackermann_velocity_setpoint_s, _padding0) - 17usize];
};
unsafe extern "C" {
    pub static __orb_ackermann_velocity_setpoint: orb_metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gimbal_device_information_s {
    pub timestamp: u64,
    pub uid: u64,
    pub firmware_version: u32,
    pub hardware_version: u32,
    pub roll_min: f32,
    pub roll_max: f32,
    pub pitch_min: f32,
    pub pitch_max: f32,
    pub yaw_min: f32,
    pub yaw_max: f32,
    pub cap_flags: u16,
    pub custom_cap_flags: u16,
    pub vendor_name: [u8; 32usize],
    pub model_name: [u8; 32usize],
    pub custom_name: [u8; 32usize],
    pub gimbal_device_id: u8,
    pub _padding0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gimbal_device_information_s"]
        [::core::mem::size_of::<gimbal_device_information_s>() - 152usize];
    ["Alignment of gimbal_device_information_s"]
        [::core::mem::align_of::<gimbal_device_information_s>() - 8usize];
    ["Offset of field: gimbal_device_information_s::timestamp"]
        [::core::mem::offset_of!(gimbal_device_information_s, timestamp) - 0usize];
    ["Offset of field: gimbal_device_information_s::uid"]
        [::core::mem::offset_of!(gimbal_device_information_s, uid) - 8usize];
    ["Offset of field: gimbal_device_information_s::firmware_version"]
        [::core::mem::offset_of!(gimbal_device_information_s, firmware_version) - 16usize];
    ["Offset of field: gimbal_device_information_s::hardware_version"]
        [::core::mem::offset_of!(gimbal_device_information_s, hardware_version) - 20usize];
    ["Offset of field: gimbal_device_information_s::roll_min"]
        [::core::mem::offset_of!(gimbal_device_information_s, roll_min) - 24usize];
    ["Offset of field: gimbal_device_information_s::roll_max"]
        [::core::mem::offset_of!(gimbal_device_information_s, roll_max) - 28usize];
    ["Offset of field: gimbal_device_information_s::pitch_min"]
        [::core::mem::offset_of!(gimbal_device_information_s, pitch_min) - 32usize];
    ["Offset of field: gimbal_device_information_s::pitch_max"]
        [::core::mem::offset_of!(gimbal_device_information_s, pitch_max) - 36usize];
    ["Offset of field: gimbal_device_information_s::yaw_min"]
        [::core::mem::offset_of!(gimbal_device_information_s, yaw_min) - 40usize];
    ["Offset of field: gimbal_device_information_s::yaw_max"]
        [::core::mem::offset_of!(gimbal_device_information_s, yaw_max) - 44usize];
    ["Offset of field: gimbal_device_information_s::cap_flags"]
        [::core::mem::offset_of!(gimbal_device_information_s, cap_flags) - 48usize];
    ["Offset of field: gimbal_device_information_s::custom_cap_flags"]
        [::core::mem::offset_of!(gimbal_device_information_s, custom_cap_flags) - 50usize];
    ["Offset of field: gimbal_device_information_s::vendor_name"]
        [::core::mem::offset_of!(gimbal_device_information_s, vendor_name) - 52usize];
    ["Offset of field: gimbal_device_information_s::model_name"]
        [::core::mem::offset_of!(gimbal_device_information_s, model_name) - 84usize];
    ["Offset of field: gimbal_device_information_s::custom_name"]
        [::core::mem::offset_of!(gimbal_device_information_s, custom_name) - 116usize];
    ["Offset of field: gimbal_device_information_s::gimbal_device_id"]
        [::core::mem::offset_of!(gimbal_device_information_s, gimbal_device_id) - 148usize];
    ["Offset of field: gimbal_device_information_s::_padding0"]
        [::core::mem::offset_of!(gimbal_device_information_s, _padding0) - 149usize];
};
unsafe extern "C" {
    pub static __orb_gimbal_device_information: orb_metadata;
}
