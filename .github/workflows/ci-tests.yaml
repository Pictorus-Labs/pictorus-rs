name: Pictorus Rust CI

on:
  pull_request:
    paths:
      - "**/*.rs"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Make sure CI fails on all warnings, including Clippy lints
env:
  RUSTFLAGS: "-Dwarnings"

jobs:
  test:
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set Up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
          components: rustfmt, clippy
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features
      - name: Run Cargo Deny
        uses: EmbarkStudios/cargo-deny-action@v2
      - name: Run all tests
        run: cargo test --all-features
      - name: Run no_std tests
        run: cargo test --no-default-features
  compile:
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    strategy:
      matrix:
        target:
          [
            x86_64-unknown-linux-gnu,
            arm-unknown-linux-musleabi,
            thumbv6m-none-eabi,
            thumbv7em-none-eabihf,
            thumbv8m.main-none-eabi,
          ]
        include:
          - target: x86_64-unknown-linux-gnu
            platforms: "pictorus-linux pictorus-sim"
            run_tests: true
          - target: arm-unknown-linux-musleabi
            linker: arm-linux-gnueabihf
            platforms: "pictorus-linux"
          - target: thumbv6m-none-eabi
            no_std: true
            platforms: "pictorus-stm32"
            feature_variants: "_fdcan_interrupt_uart"
          - target: thumbv7em-none-eabihf
            no_std: true
            platforms: "pictorus-stm32"
            feature_variants: "_std_can_std_uart _fdcan_interrupt_uart"
          - target: thumbv8m.main-none-eabi
            no_std: true
            platforms: "pictorus-stm32"
            feature_variants: "_std_can_std_uart _fdcan_interrupt_uart"
          - target: thumbv8m.main-none-eabi
            no_std: true
            platforms: "pictorus-renesas"
            feature_variants: ""
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set Up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
          components: rustfmt, clippy
      - name: Add target
        run: rustup target add ${{ matrix.target }}
      - name: Add Linker
        run: sudo apt-get install -y gcc-${{ matrix.linker }}
        if: ${{ matrix.linker }}
      - name: Set linker
        run: |
          LINKER_VAR=CARGO_TARGET_${{ matrix.target }}_LINKER
          LINKER_VAR="${LINKER_VAR//-/_}"
          LINKER_VAR="${LINKER_VAR^^}"
          echo "$LINKER_VAR=${{ matrix.linker }}-ld" >>${GITHUB_ENV}
        if: ${{ matrix.linker }}
      - name: install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev
      - name: Run check std
        run: cargo check --target ${{ matrix.target }} --all-features
        if: ${{ !matrix.no_std }}
      - name: Run check no_std
        run: cargo check --target ${{ matrix.target }} --no-default-features
      - name: Platform Checks
        run: |
          for platform in ${{ matrix.platforms }}; do
            echo "Checking platform $platform"

            if [ "${{ matrix.feature_variants }}" != "" ]; then
              for feature in ${{ matrix.feature_variants }}; do
                echo "Checking feature $feature"
                cargo clippy --manifest-path $platform/Cargo.toml --target ${{ matrix.target }} --features $feature
                cargo check --manifest-path $platform/Cargo.toml --target ${{ matrix.target }} --features $feature
              done
            else
              echo "Checking all features"
              cargo clippy --manifest-path $platform/Cargo.toml --all-features --target ${{ matrix.target }}
              cargo check --manifest-path $platform/Cargo.toml --all-features --target ${{ matrix.target }}
            fi

            if [ "${{ matrix.run_tests }}" = "true" ]; then
              cargo test --manifest-path $platform/Cargo.toml --all-features;
            fi

          done
