use pictorus_traits::{Matrix, Pass, PassBy};

/// Core trait for PX4 uORB message types
///
/// This trait provides the fundamental operations needed to serialize and deserialize
/// PX4 messages for transmission over the uORB system. All PX4 message structs
/// implement this trait to enable safe conversion between byte arrays and typed data.
///
/// # Safety
///
/// Implementations must ensure that:
/// - The message struct uses `#[repr(C)]` layout matching PX4's C structures
/// - `view_from_bytes` validates input buffer size and alignment
/// - `as_bytes` produces a valid byte representation of the struct
pub trait UorbMessage: Sized + Copy {
    /// Convert a byte buffer into a reference to this message type
    ///
    /// # Arguments
    /// * `bytes` - Raw message data buffer from uORB
    ///
    /// # Safety
    /// The caller must ensure that `bytes` contains valid message data with:
    /// - Sufficient length for the complete message struct
    /// - Proper alignment for the message type
    /// - Valid field values according to message specification
    fn view_from_bytes(bytes: &[u8]) -> &Self;

    /// Convert this message into a byte slice for transmission
    ///
    /// Returns a byte slice view of this message struct that can be safely
    /// transmitted over uORB or stored in message buffers.
    ///
    /// # Returns
    /// Byte slice containing the binary representation of this message
    fn as_bytes(&self) -> &[u8];
}

/// Trait representing a PX4 uORB topic with associated message type and metadata
///
/// This trait provides a type-safe way to work with PX4 uORB topics, associating
/// each topic with its corresponding message struct and metadata. It enables
/// compile-time topic identification and runtime access to topic properties.
///
/// # Type Safety
///
/// Each topic type is a zero-sized struct (ZST) that acts as a type-level identifier
/// for the associated message type. This prevents mixing up different message types
/// at compile time while providing runtime access to topic metadata.
///
/// # Examples
///
/// ```rust
/// use pictorus_px4::message_impls::{Topic, SensorAccel};
/// use px4_msgs_sys::message_defs::sensor_accel_s;
///
/// // SensorAccel implements Topic
/// assert_eq!(SensorAccel::name(), "sensor_accel");
/// assert_eq!(SensorAccel::size(), std::mem::size_of::<sensor_accel_s>() as u16);
///
/// // Type-safe topic identification
/// let topic_id = SensorAccel::id();
/// ```
pub trait Topic: Sized + Copy + 'static + Default {
    /// The PX4 message struct associated with this topic
    type Message: UorbMessage;

    /// Get the uORB metadata pointer for this topic
    ///
    /// Returns a pointer to the static `orb_metadata` structure that describes
    /// this topic's properties. The metadata is generated by PX4's build system
    /// and remains valid for the program lifetime.
    ///
    /// # Returns
    /// Pointer to static uORB metadata for this topic
    fn id() -> *const orb_metadata;

    /// Get a reference to this topic's uORB metadata
    ///
    /// Provides safe access to the topic's metadata structure containing
    /// information like topic name, message size, and internal identifiers.
    ///
    /// # Returns
    /// Reference to the static metadata for this topic
    fn metadata() -> &'static orb_metadata {
        // SAFETY: Self::id() returns a pointer to static orb_metadata that is valid
        // for the entire program lifetime. These are generated by PX4's build system
        // and point to statically allocated metadata structures.
        unsafe { &*Self::id() }
    }

    /// Get the total size of this topic's message including padding
    ///
    /// # Returns
    /// Message size in bytes including any struct padding
    fn size() -> u16 {
        Self::metadata().o_size
    }

    /// Get the size of this topic's message without padding
    ///
    /// # Returns
    /// Message size in bytes excluding struct padding
    fn size_no_padding() -> u16 {
        Self::metadata().o_size_no_padding
    }

    /// Get the human-readable name of this topic
    ///
    /// # Returns
    /// Topic name as defined in PX4 (e.g., "sensor_accel", "vehicle_attitude")
    fn name() -> &'static str {
        // SAFETY: Self::metadata().o_name is a pointer to a null-terminated C string
        // that is statically allocated by PX4's build system. The string contains
        // message names like "sensor_accel" which use only ASCII characters.
        unsafe { core::ffi::CStr::from_ptr(Self::metadata().o_name) }
            .to_str()
            .expect("PX4 message names should be valid ASCII/UTF-8")
    }

    /// Create a new instance of this topic type
    ///
    /// Since topic types are zero-sized, this just returns the default instance.
    ///
    /// # Returns
    /// New instance of this topic type
    fn new() -> Self {
        Self::default()
    }
}

/// Trait for converting PX4 messages to Pictorus data types for input processing
///
/// This trait enables PX4 uORB messages to be used as inputs to Pictorus computation blocks.
/// It defines how to convert from a PX4 message struct to the appropriate Pictorus data type
/// that can be processed by the block system.
///
/// # Type Parameters
///
/// * `PassType` - The Pictorus data type that this message converts to (e.g., tuples, matrices)
///
/// # Examples
///
/// ```rust
/// use pictorus_px4::message_impls::{ToPassType, UorbMessage};
/// use px4_msgs_sys::message_defs::sensor_accel_s;
///
/// impl ToPassType for sensor_accel_s {
///     type PassType = (f64, f64, f64, f64, f64, f64, f64, f64);
///     
///     fn to_pass_type(&self) -> Self::PassType {
///         (
///             self.timestamp as f64,
///             self.timestamp_sample as f64,
///             self.device_id as f64,
///             self.x as f64,
///             self.y as f64,
///             self.z as f64,
///             self.temperature as f64,
///             self.error_count as f64,
///         )
///     }
/// }
/// ```
pub trait ToPassType: UorbMessage {
    /// The Pictorus data type this message converts to
    type PassType: Pass + Default;

    /// Convert this PX4 message to a Pictorus data type
    ///
    /// This method extracts relevant fields from the PX4 message struct and
    /// packages them into a Pictorus-compatible data type for processing.
    ///
    /// # Returns
    /// Pictorus data representation of this message
    fn to_pass_type(&self) -> (u64, Self::PassType);
}

/// Trait for converting Pictorus data types to PX4 messages for output publishing
///
/// This trait enables Pictorus computation results to be converted back into PX4 uORB
/// message formats for publishing to the flight control system. It defines how to
/// construct a complete PX4 message from Pictorus computation outputs.
///
/// # Type Parameters
///
/// * `PassType` - The Pictorus data type that gets converted to this message
///
/// # Examples
///
/// ```rust
/// use pictorus_px4::message_impls::{FromPassType, UorbMessage};
/// use pictorus_traits::{PassBy, Matrix};
/// use px4_msgs_sys::message_defs::vehicle_attitude_setpoint_s;
///
/// impl FromPassType for vehicle_attitude_setpoint_s {
///     type PassType = (f64, f64, Matrix<4, 1, f64>, Matrix<3, 1, f64>, f64, f64);
///     
///     fn from_pass_type(pass: PassBy<Self::PassType>) -> Self {
///         // Extract Pictorus data and build PX4 message struct
///         // ...
///     }
/// }
/// ```
pub trait FromPassType: UorbMessage {
    /// The Pictorus data type this message is created from
    type PassType: Pass + Default;

    /// Create a PX4 message from Pictorus computation results
    ///
    /// This method takes the output from a Pictorus computation block and
    /// constructs a complete PX4 message struct ready for publishing to uORB.
    ///
    /// # Arguments
    /// * `pass` - Pictorus data to convert to a PX4 message
    ///
    /// # Returns
    /// Complete PX4 message struct ready for uORB publishing
    fn from_pass_type(timestamp: u64, pass: PassBy<Self::PassType>) -> Self;
}

impl ToPassType for sensor_accel_s {
    type PassType = (f64, f64, f64, f64, f64, f64, f64, f64);
    fn to_pass_type(&self) -> (u64, Self::PassType) {
        (
            self.timestamp,
            (
                self.timestamp as f64,
                self.timestamp_sample as f64,
                self.device_id as f64,
                self.x as f64,
                self.y as f64,
                self.z as f64,
                self.temperature as f64,
                self.error_count as f64,
            ),
        )
    }
}

impl ToPassType for sensor_gyro_s {
    type PassType = (f64, f64, f64, f64, f64, f64, f64, f64);
    fn to_pass_type(&self) -> (u64, Self::PassType) {
        (
            self.timestamp,
            (
                self.timestamp as f64,
                self.timestamp_sample as f64,
                self.device_id as f64,
                self.x as f64,
                self.y as f64,
                self.z as f64,
                self.temperature as f64,
                self.error_count as f64,
            ),
        )
    }
}

impl ToPassType for manual_control_setpoint_s {
    type PassType = (
        f64,
        f64,
        f64,
        Matrix<4, 1, f64>,
        f64,
        Matrix<6, 1, f64>,
        f64,
        f64,
    );
    fn to_pass_type(&self) -> (u64, Self::PassType) {
        (
            self.timestamp,
            (
                self.timestamp as f64,
                if self.valid { 1.0 } else { 0.0 },
                self.data_source as f64,
                Matrix {
                    data: [[
                        self.throttle as f64,
                        self.roll as f64,
                        self.pitch as f64,
                        self.yaw as f64,
                    ]],
                },
                self.flaps as f64,
                Matrix {
                    data: [[
                        self.aux1 as f64,
                        self.aux2 as f64,
                        self.aux3 as f64,
                        self.aux4 as f64,
                        self.aux5 as f64,
                        self.aux6 as f64,
                    ]],
                },
                if self.sticks_moving { 1.0 } else { 0.0 },
                self.buttons as f64,
            ),
        )
    }
}

impl ToPassType for vehicle_odometry_s {
    type PassType = (
        f64,
        Matrix<3, 1, f64>,
        Matrix<4, 1, f64>,
        Matrix<3, 1, f64>,
        Matrix<3, 1, f64>,
        Matrix<3, 3, f64>,
        f64,
        f64,
    );
    fn to_pass_type(&self) -> (u64, Self::PassType) {
        (
            self.timestamp,
            (
                self.timestamp as f64,
                Matrix {
                    data: [[
                        self.position[0] as f64,
                        self.position[1] as f64,
                        self.position[2] as f64,
                    ]],
                },
                Matrix {
                    data: [[
                        self.q[0] as f64,
                        self.q[1] as f64,
                        self.q[2] as f64,
                        self.q[3] as f64,
                    ]],
                },
                Matrix {
                    data: [[
                        self.velocity[0] as f64,
                        self.velocity[1] as f64,
                        self.velocity[2] as f64,
                    ]],
                },
                Matrix {
                    data: [[
                        self.angular_velocity[0] as f64,
                        self.angular_velocity[1] as f64,
                        self.angular_velocity[2] as f64,
                    ]],
                },
                Matrix {
                    data: [
                        [
                            self.position_variance[0] as f64,
                            self.position_variance[1] as f64,
                            self.position_variance[2] as f64,
                        ],
                        [
                            self.orientation_variance[0] as f64,
                            self.orientation_variance[1] as f64,
                            self.orientation_variance[2] as f64,
                        ],
                        [
                            self.velocity_variance[0] as f64,
                            self.velocity_variance[1] as f64,
                            self.velocity_variance[2] as f64,
                        ],
                    ],
                },
                self.reset_counter as f64,
                self.quality as f64,
            ),
        )
    }
}

impl FromPassType for actuator_motors_s {
    type PassType = (Matrix<12, 1, f64>, f64);
    fn from_pass_type(timestamp: u64, pass: PassBy<Self::PassType>) -> Self {
        Self {
            timestamp,
            timestamp_sample: timestamp,
            control: [
                pass.0.data[0][0] as f32,
                pass.0.data[0][1] as f32,
                pass.0.data[0][2] as f32,
                pass.0.data[0][3] as f32,
                pass.0.data[0][4] as f32,
                pass.0.data[0][5] as f32,
                pass.0.data[0][6] as f32,
                pass.0.data[0][7] as f32,
                pass.0.data[0][8] as f32,
                pass.0.data[0][9] as f32,
                pass.0.data[0][10] as f32,
                pass.0.data[0][11] as f32,
            ],
            reversible_flags: pass.1 as u16,
            _padding0: [0; 6],
        }
    }
}

impl FromPassType for vehicle_attitude_setpoint_s {
    type PassType = (f64, f64, Matrix<4, 1, f64>, Matrix<3, 1, f64>, f64, f64);
    fn from_pass_type(timestamp: u64, pass: PassBy<Self::PassType>) -> Self {
        let q_d: [f32; 4] = [
            pass.2.data[0][0] as f32,
            pass.2.data[0][1] as f32,
            pass.2.data[0][2] as f32,
            pass.2.data[0][3] as f32,
        ];
        let thrust_body: [f32; 3] = [
            pass.3.data[0][0] as f32,
            pass.3.data[0][1] as f32,
            pass.3.data[0][2] as f32,
        ];
        Self {
            timestamp: timestamp,
            yaw_sp_move_rate: pass.1 as f32,
            q_d,
            thrust_body,
            reset_integral: pass.4 == 0.0,
            fw_control_yaw_wheel: pass.5 == 0.0,
            _padding0: [0; 6],
        }
    }
}

impl FromPassType for actuator_armed_s {
    type PassType = (f64, f64, f64, f64, f64, f64, f64);
    fn from_pass_type(timestamp: u64, pass: PassBy<Self::PassType>) -> Self {
        Self {
            timestamp,
            armed: pass.0 != 0.0,
            prearmed: pass.1 != 0.0,
            ready_to_arm: pass.2 != 0.0,
            lockdown: pass.3 != 0.0,
            manual_lockdown: pass.4 != 0.0,
            force_failsafe: pass.5 != 0.0,
            in_esc_calibration_mode: pass.6 != 0.0,
            _padding0: [0; 1],
        }
    }
}

// when given a list of messages, this macro will implement the UorbMessage trait for each message type
macro_rules! impl_uorb_message {
    ($($message:ty),+) => {
        $(
            impl UorbMessage for $message {
                fn view_from_bytes(bytes: &[u8]) -> &Self {
                    debug_assert!(bytes.len() >= core::mem::size_of::<Self>());
                    debug_assert!(bytes.as_ptr() as usize % core::mem::align_of::<Self>() == 0);
                    // SAFETY: We assert that bytes has sufficient length and proper alignment.
                    // PX4 message types are #[repr(C)] structs with known layout, so casting
                    // from properly aligned bytes to the struct reference is safe.
                    unsafe { &*(bytes.as_ptr() as *const Self) }
                }

                fn as_bytes(&self) -> &[u8] {
                    // SAFETY: Self is a #[repr(C)] struct, so it has a stable memory layout.
                    // Creating a byte slice view of the struct is safe as long as the struct
                    // doesn't contain any padding with uninitialized data (PX4 structs are
                    // designed to be serializable).
                    unsafe { core::slice::from_raw_parts(self as *const Self as *const u8, core::mem::size_of::<Self>()) }
                }
            }
        )+
    };
}

// Macro to define topic ZSTs
macro_rules! define_topics {
    ($(
        $(#[$meta:meta])*
        $topic:ident => $message:ty, $metadata_symbol:ident
    );+ $(;)?) => {
        $(
            $(#[$meta])*
            #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, Default)]
            pub struct $topic;

            impl Topic for $topic {
                type Message = $message;

                fn id() -> *const orb_metadata {
                    unsafe { &$metadata_symbol }
                }
            }

            // Make topics safe to use in static/concurrent contexts
            unsafe impl Send for $topic {}
            unsafe impl Sync for $topic {}
        )+
    };
}

use px4_msgs_sys::{
    message_defs::{
        __orb_ackermann_velocity_setpoint, __orb_action_request, __orb_actuator_armed,
        __orb_actuator_controls_status_0, __orb_actuator_controls_status_1, __orb_actuator_motors,
        __orb_actuator_outputs, __orb_actuator_outputs_debug, __orb_actuator_outputs_sim,
        __orb_actuator_servos, __orb_actuator_servos_trim, __orb_actuator_test, __orb_adc_report,
        __orb_airspeed, __orb_airspeed_validated, __orb_airspeed_wind, __orb_arming_check_request,
        __orb_autotune_attitude_control_status, __orb_aux_global_position, __orb_battery_status,
        __orb_button_event, __orb_camera_capture, __orb_camera_status, __orb_camera_trigger,
        __orb_can_interface_status, __orb_cellular_status, __orb_collision_constraints,
        __orb_config_control_setpoints, __orb_config_overrides, __orb_config_overrides_request,
        __orb_control_allocator_status, __orb_cpuload, __orb_dataman_request,
        __orb_dataman_response, __orb_debug_array, __orb_debug_key_value, __orb_debug_value,
        __orb_debug_vect, __orb_differential_pressure, __orb_differential_velocity_setpoint,
        __orb_distance_sensor, __orb_distance_sensor_mode_change_request, __orb_ekf2_timestamps,
        __orb_esc_report, __orb_esc_serial_passthru, __orb_estimator_aid_src_airspeed,
        __orb_estimator_aid_src_aux_global_position, __orb_estimator_aid_src_aux_vel,
        __orb_estimator_aid_src_baro_hgt, __orb_estimator_aid_src_drag,
        __orb_estimator_aid_src_ev_hgt, __orb_estimator_aid_src_ev_pos,
        __orb_estimator_aid_src_ev_vel, __orb_estimator_aid_src_ev_yaw,
        __orb_estimator_aid_src_fake_hgt, __orb_estimator_aid_src_fake_pos,
        __orb_estimator_aid_src_gnss_hgt, __orb_estimator_aid_src_gnss_pos,
        __orb_estimator_aid_src_gnss_vel, __orb_estimator_aid_src_gnss_yaw,
        __orb_estimator_aid_src_gravity, __orb_estimator_aid_src_mag,
        __orb_estimator_aid_src_optical_flow, __orb_estimator_aid_src_rng_hgt,
        __orb_estimator_aid_src_sideslip, __orb_estimator_attitude, __orb_estimator_baro_bias,
        __orb_estimator_bias3d, __orb_estimator_ev_pos_bias, __orb_estimator_event_flags,
        __orb_estimator_global_position, __orb_estimator_gnss_hgt_bias, __orb_estimator_gps_status,
        __orb_estimator_innovation_test_ratios, __orb_estimator_innovation_variances,
        __orb_estimator_innovations, __orb_estimator_local_position, __orb_estimator_odometry,
        __orb_estimator_optical_flow_vel, __orb_estimator_selector_status,
        __orb_estimator_sensor_bias, __orb_estimator_states, __orb_estimator_status,
        __orb_estimator_status_flags, __orb_estimator_wind, __orb_event,
        __orb_external_ins_attitude, __orb_external_ins_global_position,
        __orb_external_ins_local_position, __orb_failsafe_flags, __orb_failure_detector_status,
        __orb_figure_eight_status, __orb_flaps_setpoint, __orb_flight_phase_estimation,
        __orb_follow_target, __orb_follow_target_estimator, __orb_follow_target_status,
        __orb_fuel_tank_status, __orb_fw_virtual_attitude_setpoint, __orb_generator_status,
        __orb_geofence_result, __orb_geofence_status, __orb_gimbal_controls,
        __orb_gimbal_device_attitude_status, __orb_gimbal_device_information,
        __orb_gimbal_device_set_attitude, __orb_gimbal_manager_information,
        __orb_gimbal_manager_set_attitude, __orb_gimbal_manager_set_manual_control,
        __orb_gimbal_manager_status, __orb_gimbal_v1_command, __orb_goto_setpoint,
        __orb_gpio_config, __orb_gpio_in, __orb_gpio_out, __orb_gpio_request, __orb_gps_dump,
        __orb_gps_inject_data, __orb_gripper, __orb_health_report, __orb_heater_status,
        __orb_home_position, __orb_hover_thrust_estimate, __orb_input_rc,
        __orb_internal_combustion_engine_control, __orb_internal_combustion_engine_status,
        __orb_iridiumsbd_status, __orb_irlock_report, __orb_landing_gear, __orb_landing_gear_wheel,
        __orb_landing_target_innovations, __orb_landing_target_pose, __orb_launch_detection_status,
        __orb_led_control, __orb_log_message, __orb_logger_status, __orb_mag_worker_data,
        __orb_magnetometer_bias_estimate, __orb_manual_control_input,
        __orb_manual_control_setpoint, __orb_manual_control_switches, __orb_mavlink_log,
        __orb_mavlink_tunnel, __orb_mc_virtual_attitude_setpoint, __orb_message_format_request,
        __orb_message_format_response, __orb_mission, __orb_mission_result, __orb_mode_completed,
        __orb_mount_orientation, __orb_navigator_mission_item, __orb_navigator_status,
        __orb_npfg_status, __orb_obstacle_distance, __orb_obstacle_distance_fused,
        __orb_offboard_control_mode, __orb_onboard_computer_status, __orb_open_drone_id_arm_status,
        __orb_open_drone_id_operator_id, __orb_open_drone_id_self_id, __orb_open_drone_id_system,
        __orb_orb_multitest, __orb_orb_test, __orb_orb_test_large, __orb_orb_test_medium,
        __orb_orb_test_medium_multi, __orb_orb_test_medium_queue, __orb_orb_test_medium_queue_poll,
        __orb_orb_test_medium_wrap_around, __orb_orbit_status,
        __orb_parameter_primary_set_value_request, __orb_parameter_primary_set_value_response,
        __orb_parameter_remote_set_value_request, __orb_parameter_remote_set_value_response,
        __orb_parameter_reset_request, __orb_parameter_set_used_request,
        __orb_parameter_set_value_request, __orb_parameter_set_value_response,
        __orb_parameter_update, __orb_ping, __orb_position_controller_landing_status,
        __orb_position_controller_status, __orb_position_setpoint, __orb_power_button_state,
        __orb_power_monitor, __orb_pps_capture, __orb_pure_pursuit_status, __orb_pwm_input,
        __orb_px4io_status, __orb_qshell_req, __orb_qshell_retval, __orb_radio_status,
        __orb_rate_ctrl_status, __orb_rc_channels, __orb_rc_parameter_map,
        __orb_register_ext_component_reply, __orb_register_ext_component_request,
        __orb_rover_attitude_setpoint, __orb_rover_attitude_status, __orb_rover_position_setpoint,
        __orb_rover_rate_setpoint, __orb_rover_rate_status, __orb_rover_steering_setpoint,
        __orb_rover_throttle_setpoint, __orb_rover_velocity_status, __orb_rpm, __orb_rtl_status,
        __orb_rtl_time_estimate, __orb_safety_button, __orb_satellite_info, __orb_sensor_accel,
        __orb_sensor_accel_fifo, __orb_sensor_airflow, __orb_sensor_baro, __orb_sensor_combined,
        __orb_sensor_correction, __orb_sensor_gnss_relative, __orb_sensor_gps, __orb_sensor_gyro,
        __orb_sensor_gyro_fft, __orb_sensor_gyro_fifo, __orb_sensor_hygrometer, __orb_sensor_mag,
        __orb_sensor_optical_flow, __orb_sensor_preflight_mag, __orb_sensor_selection,
        __orb_sensor_uwb, __orb_sensors_status_baro, __orb_sensors_status_imu,
        __orb_sensors_status_mag, __orb_spoilers_setpoint, __orb_system_power,
        __orb_takeoff_status, __orb_task_stack_info, __orb_tecs_status, __orb_telemetry_status,
        __orb_tiltrotor_extra_controls, __orb_timesync_status, __orb_trajectory_setpoint,
        __orb_trajectory_setpoint6dof, __orb_transponder_report, __orb_tune_control,
        __orb_uavcan_parameter_request, __orb_uavcan_parameter_value, __orb_ulog_stream,
        __orb_ulog_stream_ack, __orb_unregister_ext_component, __orb_vehicle_acceleration,
        __orb_vehicle_air_data, __orb_vehicle_angular_acceleration_setpoint,
        __orb_vehicle_angular_velocity, __orb_vehicle_angular_velocity_groundtruth,
        __orb_vehicle_attitude, __orb_vehicle_attitude_groundtruth,
        __orb_vehicle_attitude_setpoint, __orb_vehicle_command, __orb_vehicle_command_ack,
        __orb_vehicle_command_mode_executor, __orb_vehicle_constraints, __orb_vehicle_control_mode,
        __orb_vehicle_global_position, __orb_vehicle_global_position_groundtruth,
        __orb_vehicle_gps_position, __orb_vehicle_imu, __orb_vehicle_imu_status,
        __orb_vehicle_land_detected, __orb_vehicle_local_position,
        __orb_vehicle_local_position_groundtruth, __orb_vehicle_local_position_setpoint,
        __orb_vehicle_magnetometer, __orb_vehicle_mocap_odometry, __orb_vehicle_odometry,
        __orb_vehicle_optical_flow, __orb_vehicle_optical_flow_vel, __orb_vehicle_rates_setpoint,
        __orb_vehicle_roi, __orb_vehicle_status, __orb_vehicle_thrust_setpoint,
        __orb_vehicle_thrust_setpoint_virtual_fw, __orb_vehicle_thrust_setpoint_virtual_mc,
        __orb_vehicle_torque_setpoint, __orb_vehicle_torque_setpoint_virtual_fw,
        __orb_vehicle_torque_setpoint_virtual_mc, __orb_vehicle_visual_odometry,
        __orb_velocity_limits, __orb_vtol_vehicle_status, __orb_wheel_encoders, __orb_wind,
        __orb_yaw_estimator_status, ackermann_velocity_setpoint_s, action_request_s,
        actuator_armed_s, actuator_controls_status_s, actuator_motors_s, actuator_outputs_s,
        actuator_servos_s, actuator_servos_trim_s, actuator_test_s, adc_report_s, airspeed_s,
        airspeed_validated_s, airspeed_wind_s, arming_check_request_s,
        autotune_attitude_control_status_s, battery_status_s, button_event_s, camera_capture_s,
        camera_status_s, camera_trigger_s, can_interface_status_s, cellular_status_s,
        collision_constraints_s, config_overrides_s, control_allocator_status_s, cpuload_s,
        dataman_request_s, dataman_response_s, debug_array_s, debug_key_value_s, debug_value_s,
        debug_vect_s, differential_pressure_s, differential_velocity_setpoint_s,
        distance_sensor_mode_change_request_s, distance_sensor_s, ekf2_timestamps_s, esc_report_s,
        estimator_aid_source1d_s, estimator_aid_source2d_s, estimator_aid_source3d_s,
        estimator_bias3d_s, estimator_bias_s, estimator_event_flags_s, estimator_gps_status_s,
        estimator_innovations_s, estimator_selector_status_s, estimator_sensor_bias_s,
        estimator_states_s, estimator_status_flags_s, estimator_status_s, event_s,
        failsafe_flags_s, failure_detector_status_s, figure_eight_status_s,
        flight_phase_estimation_s, follow_target_estimator_s, follow_target_s,
        follow_target_status_s, fuel_tank_status_s, generator_status_s, geofence_result_s,
        geofence_status_s, gimbal_controls_s, gimbal_device_attitude_status_s,
        gimbal_device_information_s, gimbal_device_set_attitude_s, gimbal_manager_information_s,
        gimbal_manager_set_attitude_s, gimbal_manager_set_manual_control_s,
        gimbal_manager_status_s, goto_setpoint_s, gpio_config_s, gpio_in_s, gpio_out_s,
        gpio_request_s, gps_dump_s, gps_inject_data_s, gripper_s, health_report_s, heater_status_s,
        home_position_s, hover_thrust_estimate_s, input_rc_s, internal_combustion_engine_control_s,
        internal_combustion_engine_status_s, iridiumsbd_status_s, irlock_report_s, landing_gear_s,
        landing_gear_wheel_s, landing_target_innovations_s, landing_target_pose_s,
        launch_detection_status_s, led_control_s, log_message_s, logger_status_s,
        mag_worker_data_s, magnetometer_bias_estimate_s, manual_control_setpoint_s,
        manual_control_switches_s, mavlink_log_s, mavlink_tunnel_s, message_format_request_s,
        message_format_response_s, mission_result_s, mission_s, mode_completed_s,
        mount_orientation_s, navigator_mission_item_s, navigator_status_s,
        normalized_unsigned_setpoint_s, npfg_status_s, obstacle_distance_s,
        offboard_control_mode_s, onboard_computer_status_s, open_drone_id_arm_status_s,
        open_drone_id_operator_id_s, open_drone_id_self_id_s, open_drone_id_system_s,
        orb_test_large_s, orb_test_medium_s, orb_test_s, orbit_status_s, parameter_reset_request_s,
        parameter_set_used_request_s, parameter_set_value_request_s,
        parameter_set_value_response_s, parameter_update_s, ping_s,
        position_controller_landing_status_s, position_controller_status_s, position_setpoint_s,
        power_button_state_s, power_monitor_s, pps_capture_s, pure_pursuit_status_s, pwm_input_s,
        px4io_status_s, qshell_req_s, qshell_retval_s, radio_status_s, rate_ctrl_status_s,
        rc_channels_s, rc_parameter_map_s, register_ext_component_reply_s,
        register_ext_component_request_s, rover_attitude_setpoint_s, rover_attitude_status_s,
        rover_position_setpoint_s, rover_rate_setpoint_s, rover_rate_status_s,
        rover_steering_setpoint_s, rover_throttle_setpoint_s, rover_velocity_status_s, rpm_s,
        rtl_status_s, rtl_time_estimate_s, satellite_info_s, sensor_accel_fifo_s, sensor_accel_s,
        sensor_airflow_s, sensor_baro_s, sensor_combined_s, sensor_correction_s,
        sensor_gnss_relative_s, sensor_gps_s, sensor_gyro_fft_s, sensor_gyro_fifo_s, sensor_gyro_s,
        sensor_hygrometer_s, sensor_mag_s, sensor_optical_flow_s, sensor_preflight_mag_s,
        sensor_selection_s, sensor_uwb_s, sensors_status_imu_s, sensors_status_s, system_power_s,
        takeoff_status_s, task_stack_info_s, tecs_status_s, telemetry_status_s,
        tiltrotor_extra_controls_s, timesync_status_s, trajectory_setpoint6dof_s,
        trajectory_setpoint_s, transponder_report_s, tune_control_s, uavcan_parameter_request_s,
        uavcan_parameter_value_s, ulog_stream_ack_s, ulog_stream_s, unregister_ext_component_s,
        vehicle_acceleration_s, vehicle_air_data_s, vehicle_angular_acceleration_setpoint_s,
        vehicle_angular_velocity_s, vehicle_attitude_s, vehicle_attitude_setpoint_s,
        vehicle_command_ack_s, vehicle_command_s, vehicle_constraints_s, vehicle_control_mode_s,
        vehicle_global_position_s, vehicle_imu_s, vehicle_imu_status_s, vehicle_land_detected_s,
        vehicle_local_position_s, vehicle_local_position_setpoint_s, vehicle_magnetometer_s,
        vehicle_odometry_s, vehicle_optical_flow_s, vehicle_optical_flow_vel_s,
        vehicle_rates_setpoint_s, vehicle_roi_s, vehicle_status_s, vehicle_thrust_setpoint_s,
        vehicle_torque_setpoint_s, velocity_limits_s, vtol_vehicle_status_s, wheel_encoders_s,
        wind_s, yaw_estimator_status_s,
    },
    orb::orb_metadata,
};

impl_uorb_message!(
    ackermann_velocity_setpoint_s,
    action_request_s,
    actuator_armed_s,
    actuator_controls_status_s,
    actuator_motors_s,
    actuator_outputs_s,
    actuator_servos_s,
    actuator_servos_trim_s,
    actuator_test_s,
    adc_report_s,
    airspeed_s,
    airspeed_validated_s,
    airspeed_wind_s,
    arming_check_request_s,
    autotune_attitude_control_status_s,
    battery_status_s,
    button_event_s,
    camera_capture_s,
    camera_status_s,
    camera_trigger_s,
    can_interface_status_s,
    cellular_status_s,
    collision_constraints_s,
    config_overrides_s,
    control_allocator_status_s,
    cpuload_s,
    dataman_request_s,
    dataman_response_s,
    debug_array_s,
    debug_key_value_s,
    debug_value_s,
    debug_vect_s,
    differential_pressure_s,
    differential_velocity_setpoint_s,
    distance_sensor_mode_change_request_s,
    distance_sensor_s,
    ekf2_timestamps_s,
    esc_report_s,
    estimator_aid_source1d_s,
    estimator_aid_source2d_s,
    estimator_aid_source3d_s,
    estimator_bias3d_s,
    estimator_bias_s,
    estimator_event_flags_s,
    estimator_gps_status_s,
    estimator_innovations_s,
    estimator_selector_status_s,
    estimator_sensor_bias_s,
    estimator_states_s,
    estimator_status_flags_s,
    estimator_status_s,
    event_s,
    failsafe_flags_s,
    failure_detector_status_s,
    figure_eight_status_s,
    flight_phase_estimation_s,
    follow_target_estimator_s,
    follow_target_s,
    follow_target_status_s,
    fuel_tank_status_s,
    generator_status_s,
    geofence_result_s,
    geofence_status_s,
    gimbal_controls_s,
    gimbal_device_attitude_status_s,
    gimbal_device_information_s,
    gimbal_device_set_attitude_s,
    gimbal_manager_information_s,
    gimbal_manager_set_attitude_s,
    gimbal_manager_set_manual_control_s,
    gimbal_manager_status_s,
    goto_setpoint_s,
    gpio_config_s,
    gpio_in_s,
    gpio_out_s,
    gpio_request_s,
    gps_dump_s,
    gps_inject_data_s,
    gripper_s,
    health_report_s,
    heater_status_s,
    home_position_s,
    hover_thrust_estimate_s,
    input_rc_s,
    internal_combustion_engine_control_s,
    internal_combustion_engine_status_s,
    iridiumsbd_status_s,
    irlock_report_s,
    landing_gear_s,
    landing_gear_wheel_s,
    landing_target_innovations_s,
    landing_target_pose_s,
    launch_detection_status_s,
    led_control_s,
    log_message_s,
    logger_status_s,
    mag_worker_data_s,
    magnetometer_bias_estimate_s,
    manual_control_setpoint_s,
    manual_control_switches_s,
    mavlink_log_s,
    mavlink_tunnel_s,
    message_format_request_s,
    message_format_response_s,
    mission_result_s,
    mission_s,
    mode_completed_s,
    mount_orientation_s,
    navigator_mission_item_s,
    navigator_status_s,
    normalized_unsigned_setpoint_s,
    npfg_status_s,
    obstacle_distance_s,
    offboard_control_mode_s,
    onboard_computer_status_s,
    open_drone_id_arm_status_s,
    open_drone_id_operator_id_s,
    open_drone_id_self_id_s,
    open_drone_id_system_s,
    orb_test_large_s,
    orb_test_medium_s,
    orb_test_s,
    orbit_status_s,
    parameter_reset_request_s,
    parameter_set_used_request_s,
    parameter_set_value_request_s,
    parameter_set_value_response_s,
    parameter_update_s,
    ping_s,
    position_controller_landing_status_s,
    position_controller_status_s,
    position_setpoint_s,
    power_button_state_s,
    power_monitor_s,
    pps_capture_s,
    pure_pursuit_status_s,
    pwm_input_s,
    px4io_status_s,
    qshell_req_s,
    qshell_retval_s,
    radio_status_s,
    rate_ctrl_status_s,
    rc_channels_s,
    rc_parameter_map_s,
    register_ext_component_reply_s,
    register_ext_component_request_s,
    rover_attitude_setpoint_s,
    rover_attitude_status_s,
    rover_position_setpoint_s,
    rover_rate_setpoint_s,
    rover_rate_status_s,
    rover_steering_setpoint_s,
    rover_throttle_setpoint_s,
    rover_velocity_status_s,
    rpm_s,
    rtl_status_s,
    rtl_time_estimate_s,
    satellite_info_s,
    sensor_accel_fifo_s,
    sensor_accel_s,
    sensor_airflow_s,
    sensor_baro_s,
    sensor_combined_s,
    sensor_correction_s,
    sensor_gnss_relative_s,
    sensor_gps_s,
    sensor_gyro_fft_s,
    sensor_gyro_fifo_s,
    sensor_gyro_s,
    sensor_hygrometer_s,
    sensor_mag_s,
    sensor_optical_flow_s,
    sensor_preflight_mag_s,
    sensor_selection_s,
    sensor_uwb_s,
    sensors_status_imu_s,
    sensors_status_s,
    system_power_s,
    takeoff_status_s,
    task_stack_info_s,
    tecs_status_s,
    telemetry_status_s,
    tiltrotor_extra_controls_s,
    timesync_status_s,
    trajectory_setpoint6dof_s,
    trajectory_setpoint_s,
    transponder_report_s,
    tune_control_s,
    uavcan_parameter_request_s,
    uavcan_parameter_value_s,
    ulog_stream_ack_s,
    ulog_stream_s,
    unregister_ext_component_s,
    vehicle_acceleration_s,
    vehicle_air_data_s,
    vehicle_angular_acceleration_setpoint_s,
    vehicle_angular_velocity_s,
    vehicle_attitude_s,
    vehicle_attitude_setpoint_s,
    vehicle_command_ack_s,
    vehicle_command_s,
    vehicle_constraints_s,
    vehicle_control_mode_s,
    vehicle_global_position_s,
    vehicle_imu_s,
    vehicle_imu_status_s,
    vehicle_land_detected_s,
    vehicle_local_position_s,
    vehicle_local_position_setpoint_s,
    vehicle_magnetometer_s,
    vehicle_odometry_s,
    vehicle_optical_flow_s,
    vehicle_optical_flow_vel_s,
    vehicle_rates_setpoint_s,
    vehicle_roi_s,
    vehicle_status_s,
    vehicle_thrust_setpoint_s,
    vehicle_torque_setpoint_s,
    velocity_limits_s,
    vtol_vehicle_status_s,
    wheel_encoders_s,
    wind_s,
    yaw_estimator_status_s
);

// Generated topic definitions
define_topics! {
    /// Sensor Gnss Relative topic
    SensorGnssRelative => sensor_gnss_relative_s, __orb_sensor_gnss_relative;

    /// Estimator Aid Src Ev Vel topic
    EstimatorAidSrcEvVel => estimator_aid_source3d_s, __orb_estimator_aid_src_ev_vel;

    /// Estimator Aid Src Gnss Vel topic
    EstimatorAidSrcGnssVel => estimator_aid_source3d_s, __orb_estimator_aid_src_gnss_vel;

    /// Estimator Aid Src Gravity topic
    EstimatorAidSrcGravity => estimator_aid_source3d_s, __orb_estimator_aid_src_gravity;

    /// Estimator Aid Src Mag topic
    EstimatorAidSrcMag => estimator_aid_source3d_s, __orb_estimator_aid_src_mag;

    /// Rpm topic
    Rpm => rpm_s, __orb_rpm;

    /// Irlock Report topic
    IrlockReport => irlock_report_s, __orb_irlock_report;

    /// Sensor Uwb topic
    SensorUwb => sensor_uwb_s, __orb_sensor_uwb;

    /// Gpio Config topic
    GpioConfig => gpio_config_s, __orb_gpio_config;

    /// Gimbal Manager Information topic
    GimbalManagerInformation => gimbal_manager_information_s, __orb_gimbal_manager_information;

    /// Estimator Event Flags topic
    EstimatorEventFlags => estimator_event_flags_s, __orb_estimator_event_flags;

    /// Logger Status topic
    LoggerStatus => logger_status_s, __orb_logger_status;

    /// Mode Completed topic
    ModeCompleted => mode_completed_s, __orb_mode_completed;

    /// Position Controller Status topic
    PositionControllerStatus => position_controller_status_s, __orb_position_controller_status;

    /// Wind topic
    Wind => wind_s, __orb_wind;

    /// Estimator Wind topic
    EstimatorWind => wind_s, __orb_estimator_wind;

    /// Autotune Attitude Control Status topic
    AutotuneAttitudeControlStatus => autotune_attitude_control_status_s, __orb_autotune_attitude_control_status;

    /// Sensor Gyro Fft topic
    SensorGyroFft => sensor_gyro_fft_s, __orb_sensor_gyro_fft;

    /// Ekf2 Timestamps topic
    Ekf2Timestamps => ekf2_timestamps_s, __orb_ekf2_timestamps;

    /// Cpuload topic
    Cpuload => cpuload_s, __orb_cpuload;

    /// Camera Trigger topic
    CameraTrigger => camera_trigger_s, __orb_camera_trigger;

    /// Follow Target Status topic
    FollowTargetStatus => follow_target_status_s, __orb_follow_target_status;

    /// Gimbal Device Set Attitude topic
    GimbalDeviceSetAttitude => gimbal_device_set_attitude_s, __orb_gimbal_device_set_attitude;

    /// Unregister Ext Component topic
    UnregisterExtComponent => unregister_ext_component_s, __orb_unregister_ext_component;

    /// Goto Setpoint topic
    GotoSetpoint => goto_setpoint_s, __orb_goto_setpoint;

    /// Rover Rate Status topic
    RoverRateStatus => rover_rate_status_s, __orb_rover_rate_status;

    /// Vehicle Angular Velocity topic
    VehicleAngularVelocity => vehicle_angular_velocity_s, __orb_vehicle_angular_velocity;

    /// Vehicle Angular Velocity Groundtruth topic
    VehicleAngularVelocityGroundtruth => vehicle_angular_velocity_s, __orb_vehicle_angular_velocity_groundtruth;

    /// Ping topic
    Ping => ping_s, __orb_ping;

    /// Position Controller Landing Status topic
    PositionControllerLandingStatus => position_controller_landing_status_s, __orb_position_controller_landing_status;

    /// Distance Sensor topic
    DistanceSensor => distance_sensor_s, __orb_distance_sensor;

    /// Sensors Status Imu topic
    SensorsStatusImu => sensors_status_imu_s, __orb_sensors_status_imu;

    /// Actuator Servos topic
    ActuatorServos => actuator_servos_s, __orb_actuator_servos;

    /// Failure Detector Status topic
    FailureDetectorStatus => failure_detector_status_s, __orb_failure_detector_status;

    /// Hover Thrust Estimate topic
    HoverThrustEstimate => hover_thrust_estimate_s, __orb_hover_thrust_estimate;

    /// Vehicle Attitude topic
    VehicleAttitude => vehicle_attitude_s, __orb_vehicle_attitude;

    /// Vehicle Attitude Groundtruth topic
    VehicleAttitudeGroundtruth => vehicle_attitude_s, __orb_vehicle_attitude_groundtruth;

    /// External Ins Attitude topic
    ExternalInsAttitude => vehicle_attitude_s, __orb_external_ins_attitude;

    /// Estimator Attitude topic
    EstimatorAttitude => vehicle_attitude_s, __orb_estimator_attitude;

    /// Heater Status topic
    HeaterStatus => heater_status_s, __orb_heater_status;

    /// Gimbal Manager Status topic
    GimbalManagerStatus => gimbal_manager_status_s, __orb_gimbal_manager_status;

    /// Gps Dump topic
    GpsDump => gps_dump_s, __orb_gps_dump;

    /// Figure Eight Status topic
    FigureEightStatus => figure_eight_status_s, __orb_figure_eight_status;

    /// Offboard Control Mode topic
    OffboardControlMode => offboard_control_mode_s, __orb_offboard_control_mode;

    /// Sensor Baro topic
    SensorBaro => sensor_baro_s, __orb_sensor_baro;

    /// Gpio Request topic
    GpioRequest => gpio_request_s, __orb_gpio_request;

    /// Rate Ctrl Status topic
    RateCtrlStatus => rate_ctrl_status_s, __orb_rate_ctrl_status;

    /// Register Ext Component Reply topic
    RegisterExtComponentReply => register_ext_component_reply_s, __orb_register_ext_component_reply;

    /// Input Rc topic
    InputRc => input_rc_s, __orb_input_rc;

    /// Iridiumsbd Status topic
    IridiumsbdStatus => iridiumsbd_status_s, __orb_iridiumsbd_status;

    /// Rc Channels topic
    RcChannels => rc_channels_s, __orb_rc_channels;

    /// Vehicle Imu Status topic
    VehicleImuStatus => vehicle_imu_status_s, __orb_vehicle_imu_status;

    /// Follow Target topic
    FollowTarget => follow_target_s, __orb_follow_target;

    /// Satellite Info topic
    SatelliteInfo => satellite_info_s, __orb_satellite_info;

    /// Transponder Report topic
    TransponderReport => transponder_report_s, __orb_transponder_report;

    /// Estimator Optical Flow Vel topic
    EstimatorOpticalFlowVel => vehicle_optical_flow_vel_s, __orb_estimator_optical_flow_vel;

    /// Vehicle Optical Flow Vel topic
    VehicleOpticalFlowVel => vehicle_optical_flow_vel_s, __orb_vehicle_optical_flow_vel;

    /// Vehicle Angular Acceleration Setpoint topic
    VehicleAngularAccelerationSetpoint => vehicle_angular_acceleration_setpoint_s, __orb_vehicle_angular_acceleration_setpoint;

    /// Dataman Response topic
    DatamanResponse => dataman_response_s, __orb_dataman_response;

    /// Sensor Optical Flow topic
    SensorOpticalFlow => sensor_optical_flow_s, __orb_sensor_optical_flow;

    /// Mission topic
    Mission => mission_s, __orb_mission;

    /// Actuator Outputs topic
    ActuatorOutputs => actuator_outputs_s, __orb_actuator_outputs;

    /// Actuator Outputs Sim topic
    ActuatorOutputsSim => actuator_outputs_s, __orb_actuator_outputs_sim;

    /// Actuator Outputs Debug topic
    ActuatorOutputsDebug => actuator_outputs_s, __orb_actuator_outputs_debug;

    /// Sensor Gyro topic
    SensorGyro => sensor_gyro_s, __orb_sensor_gyro;

    /// Debug Key Value topic
    DebugKeyValue => debug_key_value_s, __orb_debug_key_value;

    /// Action Request topic
    ActionRequest => action_request_s, __orb_action_request;

    /// Vehicle Land Detected topic
    VehicleLandDetected => vehicle_land_detected_s, __orb_vehicle_land_detected;

    /// Sensors Status Baro topic
    SensorsStatusBaro => sensors_status_s, __orb_sensors_status_baro;

    /// Sensors Status Mag topic
    SensorsStatusMag => sensors_status_s, __orb_sensors_status_mag;

    /// Vehicle Torque Setpoint topic
    VehicleTorqueSetpoint => vehicle_torque_setpoint_s, __orb_vehicle_torque_setpoint;

    /// Vehicle Torque Setpoint Virtual Fw topic
    VehicleTorqueSetpointVirtualFw => vehicle_torque_setpoint_s, __orb_vehicle_torque_setpoint_virtual_fw;

    /// Vehicle Torque Setpoint Virtual Mc topic
    VehicleTorqueSetpointVirtualMc => vehicle_torque_setpoint_s, __orb_vehicle_torque_setpoint_virtual_mc;

    /// Vehicle Global Position topic
    VehicleGlobalPosition => vehicle_global_position_s, __orb_vehicle_global_position;

    /// Vehicle Global Position Groundtruth topic
    VehicleGlobalPositionGroundtruth => vehicle_global_position_s, __orb_vehicle_global_position_groundtruth;

    /// External Ins Global Position topic
    ExternalInsGlobalPosition => vehicle_global_position_s, __orb_external_ins_global_position;

    /// Estimator Global Position topic
    EstimatorGlobalPosition => vehicle_global_position_s, __orb_estimator_global_position;

    /// Aux Global Position topic
    AuxGlobalPosition => vehicle_global_position_s, __orb_aux_global_position;

    /// Vehicle Odometry topic
    VehicleOdometry => vehicle_odometry_s, __orb_vehicle_odometry;

    /// Vehicle Mocap Odometry topic
    VehicleMocapOdometry => vehicle_odometry_s, __orb_vehicle_mocap_odometry;

    /// Vehicle Visual Odometry topic
    VehicleVisualOdometry => vehicle_odometry_s, __orb_vehicle_visual_odometry;

    /// Estimator Odometry topic
    EstimatorOdometry => vehicle_odometry_s, __orb_estimator_odometry;

    /// Dataman Request topic
    DatamanRequest => dataman_request_s, __orb_dataman_request;

    /// Rover Rate Setpoint topic
    RoverRateSetpoint => rover_rate_setpoint_s, __orb_rover_rate_setpoint;

    /// Vehicle Thrust Setpoint topic
    VehicleThrustSetpoint => vehicle_thrust_setpoint_s, __orb_vehicle_thrust_setpoint;

    /// Vehicle Thrust Setpoint Virtual Fw topic
    VehicleThrustSetpointVirtualFw => vehicle_thrust_setpoint_s, __orb_vehicle_thrust_setpoint_virtual_fw;

    /// Vehicle Thrust Setpoint Virtual Mc topic
    VehicleThrustSetpointVirtualMc => vehicle_thrust_setpoint_s, __orb_vehicle_thrust_setpoint_virtual_mc;

    /// Mission Result topic
    MissionResult => mission_result_s, __orb_mission_result;

    /// Parameter Reset Request topic
    ParameterResetRequest => parameter_reset_request_s, __orb_parameter_reset_request;

    /// Estimator Sensor Bias topic
    EstimatorSensorBias => estimator_sensor_bias_s, __orb_estimator_sensor_bias;

    /// Tune Control topic
    TuneControl => tune_control_s, __orb_tune_control;

    /// Sensor Preflight Mag topic
    SensorPreflightMag => sensor_preflight_mag_s, __orb_sensor_preflight_mag;

    /// Esc Report topic
    EscReport => esc_report_s, __orb_esc_report;

    /// Pwm Input topic
    PwmInput => pwm_input_s, __orb_pwm_input;

    /// Wheel Encoders topic
    WheelEncoders => wheel_encoders_s, __orb_wheel_encoders;

    /// Arming Check Request topic
    ArmingCheckRequest => arming_check_request_s, __orb_arming_check_request;

    /// Estimator Status topic
    EstimatorStatus => estimator_status_s, __orb_estimator_status;

    /// Radio Status topic
    RadioStatus => radio_status_s, __orb_radio_status;

    /// Sensor Gps topic
    SensorGps => sensor_gps_s, __orb_sensor_gps;

    /// Vehicle Gps Position topic
    VehicleGpsPosition => sensor_gps_s, __orb_vehicle_gps_position;

    /// Parameter Update topic
    ParameterUpdate => parameter_update_s, __orb_parameter_update;

    /// Mag Worker Data topic
    MagWorkerData => mag_worker_data_s, __orb_mag_worker_data;

    /// Rover Position Setpoint topic
    RoverPositionSetpoint => rover_position_setpoint_s, __orb_rover_position_setpoint;

    /// Fuel Tank Status topic
    FuelTankStatus => fuel_tank_status_s, __orb_fuel_tank_status;

    /// Camera Capture topic
    CameraCapture => camera_capture_s, __orb_camera_capture;

    /// Estimator States topic
    EstimatorStates => estimator_states_s, __orb_estimator_states;

    /// Sensor Hygrometer topic
    SensorHygrometer => sensor_hygrometer_s, __orb_sensor_hygrometer;

    /// Gimbal Controls topic
    GimbalControls => gimbal_controls_s, __orb_gimbal_controls;

    /// Debug Array topic
    DebugArray => debug_array_s, __orb_debug_array;

    /// Estimator Aid Src Ev Pos topic
    EstimatorAidSrcEvPos => estimator_aid_source2d_s, __orb_estimator_aid_src_ev_pos;

    /// Estimator Aid Src Fake Pos topic
    EstimatorAidSrcFakePos => estimator_aid_source2d_s, __orb_estimator_aid_src_fake_pos;

    /// Estimator Aid Src Gnss Pos topic
    EstimatorAidSrcGnssPos => estimator_aid_source2d_s, __orb_estimator_aid_src_gnss_pos;

    /// Estimator Aid Src Aux Global Position topic
    EstimatorAidSrcAuxGlobalPosition => estimator_aid_source2d_s, __orb_estimator_aid_src_aux_global_position;

    /// Estimator Aid Src Aux Vel topic
    EstimatorAidSrcAuxVel => estimator_aid_source2d_s, __orb_estimator_aid_src_aux_vel;

    /// Estimator Aid Src Optical Flow topic
    EstimatorAidSrcOpticalFlow => estimator_aid_source2d_s, __orb_estimator_aid_src_optical_flow;

    /// Estimator Aid Src Drag topic
    EstimatorAidSrcDrag => estimator_aid_source2d_s, __orb_estimator_aid_src_drag;

    /// Internal Combustion Engine Status topic
    InternalCombustionEngineStatus => internal_combustion_engine_status_s, __orb_internal_combustion_engine_status;

    /// Mount Orientation topic
    MountOrientation => mount_orientation_s, __orb_mount_orientation;

    /// Rover Attitude Setpoint topic
    RoverAttitudeSetpoint => rover_attitude_setpoint_s, __orb_rover_attitude_setpoint;

    /// Vehicle Rates Setpoint topic
    VehicleRatesSetpoint => vehicle_rates_setpoint_s, __orb_vehicle_rates_setpoint;

    /// Failsafe Flags topic
    FailsafeFlags => failsafe_flags_s, __orb_failsafe_flags;

    /// Estimator Bias3D topic
    EstimatorBias3d => estimator_bias3d_s, __orb_estimator_bias3d;

    /// Estimator Ev Pos Bias topic
    EstimatorEvPosBias => estimator_bias3d_s, __orb_estimator_ev_pos_bias;

    /// Sensor Accel Fifo topic
    SensorAccelFifo => sensor_accel_fifo_s, __orb_sensor_accel_fifo;

    /// Health Report topic
    HealthReport => health_report_s, __orb_health_report;

    /// Sensor Mag topic
    SensorMag => sensor_mag_s, __orb_sensor_mag;

    /// Flaps Setpoint topic
    FlapsSetpoint => normalized_unsigned_setpoint_s, __orb_flaps_setpoint;

    /// Spoilers Setpoint topic
    SpoilersSetpoint => normalized_unsigned_setpoint_s, __orb_spoilers_setpoint;

    /// Tiltrotor Extra Controls topic
    TiltrotorExtraControls => tiltrotor_extra_controls_s, __orb_tiltrotor_extra_controls;

    /// Ulog Stream topic
    UlogStream => ulog_stream_s, __orb_ulog_stream;

    /// Orb Test Medium topic
    OrbTestMedium => orb_test_medium_s, __orb_orb_test_medium;

    /// Orb Test Medium Multi topic
    OrbTestMediumMulti => orb_test_medium_s, __orb_orb_test_medium_multi;

    /// Orb Test Medium Wrap Around topic
    OrbTestMediumWrapAround => orb_test_medium_s, __orb_orb_test_medium_wrap_around;

    /// Orb Test Medium Queue topic
    OrbTestMediumQueue => orb_test_medium_s, __orb_orb_test_medium_queue;

    /// Orb Test Medium Queue Poll topic
    OrbTestMediumQueuePoll => orb_test_medium_s, __orb_orb_test_medium_queue_poll;

    /// Open Drone Id Self Id topic
    OpenDroneIdSelfId => open_drone_id_self_id_s, __orb_open_drone_id_self_id;

    /// Config Overrides topic
    ConfigOverrides => config_overrides_s, __orb_config_overrides;

    /// Config Overrides Request topic
    ConfigOverridesRequest => config_overrides_s, __orb_config_overrides_request;

    /// Battery Status topic
    BatteryStatus => battery_status_s, __orb_battery_status;

    /// Rover Throttle Setpoint topic
    RoverThrottleSetpoint => rover_throttle_setpoint_s, __orb_rover_throttle_setpoint;

    /// Orbit Status topic
    OrbitStatus => orbit_status_s, __orb_orbit_status;

    /// Vehicle Local Position topic
    VehicleLocalPosition => vehicle_local_position_s, __orb_vehicle_local_position;

    /// Vehicle Local Position Groundtruth topic
    VehicleLocalPositionGroundtruth => vehicle_local_position_s, __orb_vehicle_local_position_groundtruth;

    /// External Ins Local Position topic
    ExternalInsLocalPosition => vehicle_local_position_s, __orb_external_ins_local_position;

    /// Estimator Local Position topic
    EstimatorLocalPosition => vehicle_local_position_s, __orb_estimator_local_position;

    /// Airspeed Validated topic
    AirspeedValidated => airspeed_validated_s, __orb_airspeed_validated;

    /// Actuator Servos Trim topic
    ActuatorServosTrim => actuator_servos_trim_s, __orb_actuator_servos_trim;

    /// Pure Pursuit Status topic
    PurePursuitStatus => pure_pursuit_status_s, __orb_pure_pursuit_status;

    /// Log Message topic
    LogMessage => log_message_s, __orb_log_message;

    /// Vehicle Command Ack topic
    VehicleCommandAck => vehicle_command_ack_s, __orb_vehicle_command_ack;

    /// Yaw Estimator Status topic
    YawEstimatorStatus => yaw_estimator_status_s, __orb_yaw_estimator_status;

    /// Timesync Status topic
    TimesyncStatus => timesync_status_s, __orb_timesync_status;

    /// Trajectory Setpoint6Dof topic
    TrajectorySetpoint6dof => trajectory_setpoint6dof_s, __orb_trajectory_setpoint6dof;

    /// Event topic
    Event => event_s, __orb_event;

    /// Power Monitor topic
    PowerMonitor => power_monitor_s, __orb_power_monitor;

    /// Obstacle Distance topic
    ObstacleDistance => obstacle_distance_s, __orb_obstacle_distance;

    /// Obstacle Distance Fused topic
    ObstacleDistanceFused => obstacle_distance_s, __orb_obstacle_distance_fused;

    /// Open Drone Id Operator Id topic
    OpenDroneIdOperatorId => open_drone_id_operator_id_s, __orb_open_drone_id_operator_id;

    /// Rover Velocity Status topic
    RoverVelocityStatus => rover_velocity_status_s, __orb_rover_velocity_status;

    /// Gpio In topic
    GpioIn => gpio_in_s, __orb_gpio_in;

    /// Mavlink Log topic
    MavlinkLog => mavlink_log_s, __orb_mavlink_log;

    /// Estimator Innovations topic
    EstimatorInnovations => estimator_innovations_s, __orb_estimator_innovations;

    /// Estimator Innovation Variances topic
    EstimatorInnovationVariances => estimator_innovations_s, __orb_estimator_innovation_variances;

    /// Estimator Innovation Test Ratios topic
    EstimatorInnovationTestRatios => estimator_innovations_s, __orb_estimator_innovation_test_ratios;

    /// Sensor Combined topic
    SensorCombined => sensor_combined_s, __orb_sensor_combined;

    /// Led Control topic
    LedControl => led_control_s, __orb_led_control;

    /// Message Format Response topic
    MessageFormatResponse => message_format_response_s, __orb_message_format_response;

    /// Home Position topic
    HomePosition => home_position_s, __orb_home_position;

    /// Rtl Status topic
    RtlStatus => rtl_status_s, __orb_rtl_status;

    /// Vehicle Roi topic
    VehicleRoi => vehicle_roi_s, __orb_vehicle_roi;

    /// Navigator Status topic
    NavigatorStatus => navigator_status_s, __orb_navigator_status;

    /// Trajectory Setpoint topic
    TrajectorySetpoint => trajectory_setpoint_s, __orb_trajectory_setpoint;

    /// Uavcan Parameter Request topic
    UavcanParameterRequest => uavcan_parameter_request_s, __orb_uavcan_parameter_request;

    /// Landing Target Pose topic
    LandingTargetPose => landing_target_pose_s, __orb_landing_target_pose;

    /// Sensor Airflow topic
    SensorAirflow => sensor_airflow_s, __orb_sensor_airflow;

    /// Ulog Stream Ack topic
    UlogStreamAck => ulog_stream_ack_s, __orb_ulog_stream_ack;

    /// Takeoff Status topic
    TakeoffStatus => takeoff_status_s, __orb_takeoff_status;

    /// Parameter Set Value Response topic
    ParameterSetValueResponse => parameter_set_value_response_s, __orb_parameter_set_value_response;

    /// Parameter Remote Set Value Response topic
    ParameterRemoteSetValueResponse => parameter_set_value_response_s, __orb_parameter_remote_set_value_response;

    /// Parameter Primary Set Value Response topic
    ParameterPrimarySetValueResponse => parameter_set_value_response_s, __orb_parameter_primary_set_value_response;

    /// Power Button State topic
    PowerButtonState => power_button_state_s, __orb_power_button_state;

    /// Vtol Vehicle Status topic
    VtolVehicleStatus => vtol_vehicle_status_s, __orb_vtol_vehicle_status;

    /// Rover Steering Setpoint topic
    RoverSteeringSetpoint => rover_steering_setpoint_s, __orb_rover_steering_setpoint;

    /// Vehicle Optical Flow topic
    VehicleOpticalFlow => vehicle_optical_flow_s, __orb_vehicle_optical_flow;

    /// Qshell Req topic
    QshellReq => qshell_req_s, __orb_qshell_req;

    /// Vehicle Acceleration topic
    VehicleAcceleration => vehicle_acceleration_s, __orb_vehicle_acceleration;

    /// Rover Attitude Status topic
    RoverAttitudeStatus => rover_attitude_status_s, __orb_rover_attitude_status;

    /// Onboard Computer Status topic
    OnboardComputerStatus => onboard_computer_status_s, __orb_onboard_computer_status;

    /// Estimator Gps Status topic
    EstimatorGpsStatus => estimator_gps_status_s, __orb_estimator_gps_status;

    /// System Power topic
    SystemPower => system_power_s, __orb_system_power;

    /// Magnetometer Bias Estimate topic
    MagnetometerBiasEstimate => magnetometer_bias_estimate_s, __orb_magnetometer_bias_estimate;

    /// Gimbal Device Attitude Status topic
    GimbalDeviceAttitudeStatus => gimbal_device_attitude_status_s, __orb_gimbal_device_attitude_status;

    /// Sensor Gyro Fifo topic
    SensorGyroFifo => sensor_gyro_fifo_s, __orb_sensor_gyro_fifo;

    /// Vehicle Command topic
    VehicleCommand => vehicle_command_s, __orb_vehicle_command;

    /// Gimbal V1 Command topic
    GimbalV1Command => vehicle_command_s, __orb_gimbal_v1_command;

    /// Vehicle Command Mode Executor topic
    VehicleCommandModeExecutor => vehicle_command_s, __orb_vehicle_command_mode_executor;

    /// Follow Target Estimator topic
    FollowTargetEstimator => follow_target_estimator_s, __orb_follow_target_estimator;

    /// Navigator Mission Item topic
    NavigatorMissionItem => navigator_mission_item_s, __orb_navigator_mission_item;

    /// Vehicle Imu topic
    VehicleImu => vehicle_imu_s, __orb_vehicle_imu;

    /// Camera Status topic
    CameraStatus => camera_status_s, __orb_camera_status;

    /// Actuator Motors topic
    ActuatorMotors => actuator_motors_s, __orb_actuator_motors;

    /// Task Stack Info topic
    TaskStackInfo => task_stack_info_s, __orb_task_stack_info;

    /// Estimator Selector Status topic
    EstimatorSelectorStatus => estimator_selector_status_s, __orb_estimator_selector_status;

    /// Can Interface Status topic
    CanInterfaceStatus => can_interface_status_s, __orb_can_interface_status;

    /// Differential Pressure topic
    DifferentialPressure => differential_pressure_s, __orb_differential_pressure;

    /// Launch Detection Status topic
    LaunchDetectionStatus => launch_detection_status_s, __orb_launch_detection_status;

    /// Orb Test topic
    OrbTest => orb_test_s, __orb_orb_test;

    /// Orb Multitest topic
    OrbMultitest => orb_test_s, __orb_orb_multitest;

    /// Adc Report topic
    AdcReport => adc_report_s, __orb_adc_report;

    /// Register Ext Component Request topic
    RegisterExtComponentRequest => register_ext_component_request_s, __orb_register_ext_component_request;

    /// Open Drone Id Arm Status topic
    OpenDroneIdArmStatus => open_drone_id_arm_status_s, __orb_open_drone_id_arm_status;

    /// Gripper topic
    Gripper => gripper_s, __orb_gripper;

    /// Vehicle Magnetometer topic
    VehicleMagnetometer => vehicle_magnetometer_s, __orb_vehicle_magnetometer;

    /// Vehicle Status topic
    VehicleStatus => vehicle_status_s, __orb_vehicle_status;

    /// Internal Combustion Engine Control topic
    InternalCombustionEngineControl => internal_combustion_engine_control_s, __orb_internal_combustion_engine_control;

    /// Landing Gear topic
    LandingGear => landing_gear_s, __orb_landing_gear;

    /// Position Setpoint topic
    PositionSetpoint => position_setpoint_s, __orb_position_setpoint;

    /// Generator Status topic
    GeneratorStatus => generator_status_s, __orb_generator_status;

    /// Control Allocator Status topic
    ControlAllocatorStatus => control_allocator_status_s, __orb_control_allocator_status;

    /// Manual Control Setpoint topic
    ManualControlSetpoint => manual_control_setpoint_s, __orb_manual_control_setpoint;

    /// Manual Control Input topic
    ManualControlInput => manual_control_setpoint_s, __orb_manual_control_input;

    /// Collision Constraints topic
    CollisionConstraints => collision_constraints_s, __orb_collision_constraints;

    /// Gimbal Manager Set Manual Control topic
    GimbalManagerSetManualControl => gimbal_manager_set_manual_control_s, __orb_gimbal_manager_set_manual_control;

    /// Sensor Correction topic
    SensorCorrection => sensor_correction_s, __orb_sensor_correction;

    /// Sensor Selection topic
    SensorSelection => sensor_selection_s, __orb_sensor_selection;

    /// Landing Target Innovations topic
    LandingTargetInnovations => landing_target_innovations_s, __orb_landing_target_innovations;

    /// Estimator Status Flags topic
    EstimatorStatusFlags => estimator_status_flags_s, __orb_estimator_status_flags;

    /// Landing Gear Wheel topic
    LandingGearWheel => landing_gear_wheel_s, __orb_landing_gear_wheel;

    /// Geofence Result topic
    GeofenceResult => geofence_result_s, __orb_geofence_result;

    /// Npfg Status topic
    NpfgStatus => npfg_status_s, __orb_npfg_status;

    /// Rc Parameter Map topic
    RcParameterMap => rc_parameter_map_s, __orb_rc_parameter_map;

    /// Rtl Time Estimate topic
    RtlTimeEstimate => rtl_time_estimate_s, __orb_rtl_time_estimate;

    /// Actuator Armed topic
    ActuatorArmed => actuator_armed_s, __orb_actuator_armed;

    /// Actuator Controls Status 0 topic
    ActuatorControlsStatus0 => actuator_controls_status_s, __orb_actuator_controls_status_0;

    /// Actuator Controls Status 1 topic
    ActuatorControlsStatus1 => actuator_controls_status_s, __orb_actuator_controls_status_1;

    /// Debug Vect topic
    DebugVect => debug_vect_s, __orb_debug_vect;

    /// Distance Sensor Mode Change Request topic
    DistanceSensorModeChangeRequest => distance_sensor_mode_change_request_s, __orb_distance_sensor_mode_change_request;

    /// Parameter Set Value Request topic
    ParameterSetValueRequest => parameter_set_value_request_s, __orb_parameter_set_value_request;

    /// Parameter Remote Set Value Request topic
    ParameterRemoteSetValueRequest => parameter_set_value_request_s, __orb_parameter_remote_set_value_request;

    /// Parameter Primary Set Value Request topic
    ParameterPrimarySetValueRequest => parameter_set_value_request_s, __orb_parameter_primary_set_value_request;

    /// Qshell Retval topic
    QshellRetval => qshell_retval_s, __orb_qshell_retval;

    /// Geofence Status topic
    GeofenceStatus => geofence_status_s, __orb_geofence_status;

    /// Estimator Baro Bias topic
    EstimatorBaroBias => estimator_bias_s, __orb_estimator_baro_bias;

    /// Estimator Gnss Hgt Bias topic
    EstimatorGnssHgtBias => estimator_bias_s, __orb_estimator_gnss_hgt_bias;

    /// Sensor Accel topic
    SensorAccel => sensor_accel_s, __orb_sensor_accel;

    /// Cellular Status topic
    CellularStatus => cellular_status_s, __orb_cellular_status;

    /// Gimbal Manager Set Attitude topic
    GimbalManagerSetAttitude => gimbal_manager_set_attitude_s, __orb_gimbal_manager_set_attitude;

    /// Orb Test Large topic
    OrbTestLarge => orb_test_large_s, __orb_orb_test_large;

    /// Airspeed Wind topic
    AirspeedWind => airspeed_wind_s, __orb_airspeed_wind;

    /// Message Format Request topic
    MessageFormatRequest => message_format_request_s, __orb_message_format_request;

    /// Vehicle Control Mode topic
    VehicleControlMode => vehicle_control_mode_s, __orb_vehicle_control_mode;

    /// Config Control Setpoints topic
    ConfigControlSetpoints => vehicle_control_mode_s, __orb_config_control_setpoints;

    /// Button Event topic
    ButtonEvent => button_event_s, __orb_button_event;

    /// Safety Button topic
    SafetyButton => button_event_s, __orb_safety_button;

    /// Airspeed topic
    Airspeed => airspeed_s, __orb_airspeed;

    /// Pps Capture topic
    PpsCapture => pps_capture_s, __orb_pps_capture;

    /// Parameter Set Used Request topic
    ParameterSetUsedRequest => parameter_set_used_request_s, __orb_parameter_set_used_request;

    /// Uavcan Parameter Value topic
    UavcanParameterValue => uavcan_parameter_value_s, __orb_uavcan_parameter_value;

    /// Actuator Test topic
    ActuatorTest => actuator_test_s, __orb_actuator_test;

    /// Debug Value topic
    DebugValue => debug_value_s, __orb_debug_value;

    /// Px4Io Status topic
    Px4ioStatus => px4io_status_s, __orb_px4io_status;

    /// Manual Control Switches topic
    ManualControlSwitches => manual_control_switches_s, __orb_manual_control_switches;

    /// Open Drone Id System topic
    OpenDroneIdSystem => open_drone_id_system_s, __orb_open_drone_id_system;

    /// Tecs Status topic
    TecsStatus => tecs_status_s, __orb_tecs_status;

    /// Vehicle Constraints topic
    VehicleConstraints => vehicle_constraints_s, __orb_vehicle_constraints;

    /// Gps Inject Data topic
    GpsInjectData => gps_inject_data_s, __orb_gps_inject_data;

    /// Vehicle Air Data topic
    VehicleAirData => vehicle_air_data_s, __orb_vehicle_air_data;

    /// Vehicle Local Position Setpoint topic
    VehicleLocalPositionSetpoint => vehicle_local_position_setpoint_s, __orb_vehicle_local_position_setpoint;

    /// Mavlink Tunnel topic
    MavlinkTunnel => mavlink_tunnel_s, __orb_mavlink_tunnel;

    /// Esc Serial Passthru topic
    EscSerialPassthru => mavlink_tunnel_s, __orb_esc_serial_passthru;

    /// Flight Phase Estimation topic
    FlightPhaseEstimation => flight_phase_estimation_s, __orb_flight_phase_estimation;

    /// Differential Velocity Setpoint topic
    DifferentialVelocitySetpoint => differential_velocity_setpoint_s, __orb_differential_velocity_setpoint;

    /// Velocity Limits topic
    VelocityLimits => velocity_limits_s, __orb_velocity_limits;

    /// Gpio Out topic
    GpioOut => gpio_out_s, __orb_gpio_out;

    /// Estimator Aid Src Baro Hgt topic
    EstimatorAidSrcBaroHgt => estimator_aid_source1d_s, __orb_estimator_aid_src_baro_hgt;

    /// Estimator Aid Src Ev Hgt topic
    EstimatorAidSrcEvHgt => estimator_aid_source1d_s, __orb_estimator_aid_src_ev_hgt;

    /// Estimator Aid Src Gnss Hgt topic
    EstimatorAidSrcGnssHgt => estimator_aid_source1d_s, __orb_estimator_aid_src_gnss_hgt;

    /// Estimator Aid Src Rng Hgt topic
    EstimatorAidSrcRngHgt => estimator_aid_source1d_s, __orb_estimator_aid_src_rng_hgt;

    /// Estimator Aid Src Airspeed topic
    EstimatorAidSrcAirspeed => estimator_aid_source1d_s, __orb_estimator_aid_src_airspeed;

    /// Estimator Aid Src Sideslip topic
    EstimatorAidSrcSideslip => estimator_aid_source1d_s, __orb_estimator_aid_src_sideslip;

    /// Estimator Aid Src Fake Hgt topic
    EstimatorAidSrcFakeHgt => estimator_aid_source1d_s, __orb_estimator_aid_src_fake_hgt;

    /// Estimator Aid Src Gnss Yaw topic
    EstimatorAidSrcGnssYaw => estimator_aid_source1d_s, __orb_estimator_aid_src_gnss_yaw;

    /// Estimator Aid Src Ev Yaw topic
    EstimatorAidSrcEvYaw => estimator_aid_source1d_s, __orb_estimator_aid_src_ev_yaw;

    /// Vehicle Attitude Setpoint topic
    VehicleAttitudeSetpoint => vehicle_attitude_setpoint_s, __orb_vehicle_attitude_setpoint;

    /// Mc Virtual Attitude Setpoint topic
    McVirtualAttitudeSetpoint => vehicle_attitude_setpoint_s, __orb_mc_virtual_attitude_setpoint;

    /// Fw Virtual Attitude Setpoint topic
    FwVirtualAttitudeSetpoint => vehicle_attitude_setpoint_s, __orb_fw_virtual_attitude_setpoint;

    /// Telemetry Status topic
    TelemetryStatus => telemetry_status_s, __orb_telemetry_status;

    /// Ackermann Velocity Setpoint topic
    AckermannVelocitySetpoint => ackermann_velocity_setpoint_s, __orb_ackermann_velocity_setpoint;

    /// Gimbal Device Information topic
    GimbalDeviceInformation => gimbal_device_information_s, __orb_gimbal_device_information;
}
